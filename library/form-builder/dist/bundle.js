!function(e){var t={};function i(n){if(t[n])return t[n].exports;var l=t[n]={i:n,l:!1,exports:{}};return e[n].call(l.exports,l,l.exports,i),l.l=!0,l.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)i.d(n,l,function(t){return e[t]}.bind(null,l));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="./dist/",i(i.s=2)}([
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(e){"object"==typeof window&&(i=window)}e.exports=i},
/*!********************************!*\
  !*** ./src/builder.ts-exposed ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./builder.ts */8)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!*****************************!*\
  !*** ./src/main.ts-exposed ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./main.ts */3)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!**********************************************!*\
  !*** ./node_modules/ts-loader!./src/main.ts ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PixiumForm=void 0;const n=i(/*! ./section */4),l=i(/*! ./builder */1),s=i(/*! ./data.json */23);function o(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]==t)return!0;return!1}function r(e,t){for(var i=document.querySelectorAll(t),n=e.parentNode;n&&!o(i,n);)n=n.parentNode;return n}t.PixiumForm=class{constructor(e){if(this.sections=[],this.currentNode=0,e.div){if(this.div=e.div,this.mainNode=document.getElementById(this.div),console.log(this.mainNode),this.mainNode.setAttribute("class","container form-container drop-targets"),e.data?this.json=e.data:this.json=s,e.singleSection?this.singleSection=e.singleSection:this.singleSection=!1,this.json&&this.json.sections){this.json.sections.forEach(e=>{let t=new n.Section(this.mainNode,e,this.singleSection?null:e=>this.moveSection(e));this.sections.push(t)})}else alert("Could not init the module."),console.log(this.json);e.debug?this.debug=e.debug:this.debug=!1,e.mode?this.mode=e.mode:this.mode="run","build"===this.mode?this.build():this.run()}else alert("Div not found. Cannot display the form")}getIndexFromSectionId(e){for(let t=0;t<this.sections.length;t++)if(this.sections[t].id==e)return t;return null}swapSections(e,t){console.log(this.sections);let i=this.sections[e];this.sections[e]=this.sections[t],this.sections[t]=i,console.log(this.sections)}dragStart(e){e.dataTransfer.setData("text/plain",e.target.id),setTimeout(()=>{r(e.target,".drop-target")||alert("not found")},0)}dragEnter(e){e.preventDefault();let t=r(e.target,".drop-target");t&&t.classList.add("drag-over")}dragOver(e){e.preventDefault();let t=r(e.target,".drop-target");t&&t.classList.add("drag-over")}dragLeave(e){let t=r(e.target,".drop-target");t&&t.classList.remove("drag-over")}drop(e){e.target.classList.remove("drag-over");const t=e.dataTransfer.getData("text/plain");let i=document.getElementById(t),n=r(e.target,".drop-target");if(n.classList.remove("drag-over"),i.classList.remove("drag-over"),n){let e=this.getIndexFromSectionId(n.children[0].id),t=this.getIndexFromSectionId(i.id);e!=t&&(this.swapSections(e,t),l=n.children[0],s=i,o=l.parentNode,a=s.parentNode,d=document.createElement("div"),c=document.createElement("div"),o.replaceChild(d,l),a.replaceChild(c,s),o.replaceChild(s,d),a.replaceChild(l,c))}else alert("not parent found");var l,s,o,a,d,c}build(){if(this.clear(),this.sections.forEach(e=>{if(e.build(this.mainNode),!this.singleSection){let t=l.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button",id:"btn-delete-section-"+e.id});t.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',t.onclick=t=>{this.mainNode.removeChild(e.contentWrapper),this.sections=this.sections.filter((function(t){return t.id!=e.id}))},e.contentWrapper.appendChild(t)}e.contentWrapper.ondragstart=e=>{this.dragStart(e)}}),document.querySelectorAll(".pixium-box").forEach(e=>{e.addEventListener("dragenter",this.dragEnter),e.addEventListener("dragover",this.dragOver),e.addEventListener("dragleave",this.dragLeave),e.addEventListener("drop",e=>this.drop(e))}),!this.singleSection){let t=l.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button"});t.innerText="+",t.onclick=t=>{let i=t.target,s=new n.Section(this.mainNode,null,e=>this.moveSection(e));this.sections.push(s),this.mainNode.removeChild(i),this.debug&&this.mainNode.removeChild(e),s.build(this.mainNode);let o=l.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button",id:"btn-delete-section-"+s.id});o.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',o.onclick=e=>{this.mainNode.removeChild(s.node),this.sections=this.sections.filter((function(e){return e.id!=s.id}))},s.contentWrapper.appendChild(o),this.mainNode.appendChild(i),this.debug&&this.mainNode.appendChild(e)},this.mainNode.appendChild(t)}let e=l.Builder.createElement("button",{class:"btn btn-primary form-builder-btn",type:"button"});e.innerText="GO TO RUN",e.onclick=()=>{this.run()},this.debug&&this.mainNode.appendChild(e)}run(){this.clear(),this.sections.forEach(e=>{e.run(this.mainNode)}),this.saveBtn=l.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"submit",id:"form-builder-save-final-btn"}),this.saveBtn.innerText="Save",this.saveBtn.onclick=e=>{this.sections[this.currentNode].isCompleted()?this.compileJson():(e.preventDefault(),alert("Please complete the form"))},this.currentNode!=this.sections.length-1||this.singleSection||(document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="none",document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).after(this.saveBtn)),this.singleSection&&this.sections[this.currentNode].node.appendChild(this.saveBtn);let e=l.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button",id:"form-builder-save-btn"});e.innerText="SAVE",e.onclick=()=>{this.compileJson()},this.debug&&this.mainNode.appendChild(e);let t=l.Builder.createElement("button",{class:"btn btn-primary form-builder-btn",type:"button"});t.innerText="GO TO BUILD MODE",t.onclick=()=>{this.build()},this.debug&&this.mainNode.appendChild(t),this.display()}result(){}clear(){this.mainNode&&(this.mainNode.innerHTML="",this.sections.forEach(e=>{e.clear()}),this.currentNode=0)}display(){this.currentNode>=0&&this.currentNode<this.sections.length&&this.sections[this.currentNode].show()}compileJson(){let e;e=[],this.sections.forEach(t=>{e.push(t.compileJson())});let t=JSON.stringify({sections:e});return console.log("finalOutput"),console.log(t),t}moveSection(e){e?this.currentNode>=0&&this.currentNode<this.sections.length-1?(this.sections[this.currentNode].hide(),this.currentNode++,this.sections[this.currentNode].show(),document.getElementById("btn-previous-section-"+this.sections[this.currentNode].id).style.display="inline-block",this.currentNode==this.sections.length-1?(document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="none",document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).after(this.saveBtn)):document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="inline-block"):alert("You already are on the next slide"):this.currentNode>=1&&this.currentNode<this.sections.length?(this.sections[this.currentNode].hide(),this.currentNode--,this.sections[this.currentNode].show(),document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="inline-block",0==this.currentNode&&(document.getElementById("btn-previous-section-"+this.sections[this.currentNode].id).style.display="none")):alert("You already are on the first slide")}}},
/*!********************************!*\
  !*** ./src/section.ts-exposed ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./section.ts */5)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************!*\
  !*** ./node_modules/ts-loader!./src/section.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Section=void 0;const n=i(/*! ./block/block */6),l=i(/*! ./builder */1);t.Section=class{constructor(e,t,i){this.parent=e,this.blocks=[],this.callback=i,this.title="",this.id=Math.random().toString(36).substring(7),t&&(t.title&&(this.title=t.title),t.blocks&&t.blocks.forEach(e=>{let t=new n.Block(e);this.blocks.push(t)}))}build(e){this.contentWrapper=l.Builder.createElement("div",{class:"pixium-box-content",draggable:!0,id:this.id}),this.node=l.Builder.createElement("div",{class:"row pixium-box drop-target",id:"holder-"+this.id});let t=l.Builder.createElement("div",{class:"row pixium-block-build pixium-block-build-header"});l.Builder.addBuilderInputText(t,this.id,this.title,"Title Section",e=>{this.title=e},"col-md-4"),this.contentWrapper.appendChild(t),this.blocks.forEach(e=>{let t=l.Builder.createElement("button",{class:"form-builder-btn button-delete",type:"button",style:"display:block"});t.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',e.build(this.contentWrapper,t),t.onclick=t=>{this.contentWrapper.removeChild(e.node),this.blocks=this.blocks.filter((function(t){return t.id!=e.id}))}});let i=l.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button"});i.innerHTML="+",i.onclick=e=>{let t,i=e.target,s=new n.Block(null);this.blocks.push(s),this.contentWrapper.removeChild(i),this.callback&&(t=document.getElementById("btn-delete-section-"+this.id),this.contentWrapper.removeChild(t)),s.build(this.contentWrapper,!1,"");let o=l.Builder.createElement("button",{class:"form-builder-btn button-delete float-right",type:"button",style:"display:block"});o.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',o.onclick=e=>{this.contentWrapper.removeChild(s.node),this.blocks=this.blocks.filter((function(e){return e.id!=s.id}))},s.header.insertBefore(o,s.header.firstChild),this.contentWrapper.appendChild(i),this.callback&&this.contentWrapper.appendChild(t)},this.contentWrapper.appendChild(i),this.node.appendChild(this.contentWrapper),e.appendChild(this.node)}run(e){this.node=l.Builder.createElement("div",{class:"row pixium-box"});let t=document.createElement("h1");t.innerHTML=this.title;let i=document.createElement("hr");if(this.node.appendChild(t),this.node.appendChild(i),this.blocks.forEach(e=>{e.run(this.node)}),console.log("node.singleSection"),console.log(this.callback),this.callback){let e=l.Builder.createElement("button",{class:"btn btn-info form-builder-btn",id:"btn-previous-section-"+this.id,type:"button"});e.innerText="Previous",e.style.display="none",e.onclick=()=>{this.callback&&this.callback(!1)},this.node.appendChild(e);let t=l.Builder.createElement("button",{class:"btn btn-info form-builder-btn",id:"btn-next-section-"+this.id,type:"button"});t.innerText="Next",t.onclick=()=>{this.isCompleted()?this.callback&&this.callback(!0):alert("Please complete the form...")},this.node.appendChild(t)}this.node.style.display="none",e.appendChild(this.node)}clear(){this.node&&(this.node.innerHTML=""),this.blocks.forEach(e=>{e.clear()})}getNode(){return alert(this.node),this.node}show(){this.node.style.display="block"}hide(){this.node.style.display="none"}isCompleted(){let e=!0;return this.blocks.forEach(t=>{console.log(t.answer),t&&0==t.answer.length&&t.type!==n.BlockType.NOANSWER&&(e=!1)}),e}compileJson(){let e;return e=[],this.blocks.forEach(t=>{e.push(t.compileJson())}),{title:this.title,blocks:e}}}},
/*!************************************!*\
  !*** ./src/block/block.ts-exposed ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./block.ts */7)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*****************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/block.ts ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Block=t.BlockType=void 0;const n=i(/*! ../builder */1),l=i(/*! ./choice */9),s=i(/*! ./blockSlider */11),o=i(/*! ./blockFreetext */13),r=i(/*! ./blockRadio */15),a=i(/*! ./blockCheckbox */17),d=i(/*! ./blockLongtext */19),c=i(/*! ./BlockTags */21);var u;!function(e){e[e.FREETEXT=1]="FREETEXT",e[e.RADIO=2]="RADIO",e[e.SLIDER=3]="SLIDER",e[e.CHECKBOX=4]="CHECKBOX",e[e.LONGTEXT=5]="LONGTEXT",e[e.NOANSWER=6]="NOANSWER",e[e.TAGS=7]="TAGS"}(u=t.BlockType||(t.BlockType={}));t.Block=class{constructor(e=null){this.json=e,this.text="",this.type=1,this.min="",this.max="",this.step="",this.answer="",this.choices=[],this.id=Math.random().toString(36).substring(7),e&&(e.text&&(this.text=e.text),e.type&&(this.type=e.type),this.answer="",e.answer&&(this.answer=e.answer),e.min&&(this.min=e.min),e.max&&(this.max=e.max),e.step&&(this.step=e.step),this.type!==u.RADIO&&this.type!==u.CHECKBOX||e.choices&&e.choices.forEach(e=>{let t=new l.Choice(e);this.choices.push(t)}))}clear(){this.node&&(this.node.innerHTML="")}build(e,t=null,i="collapse"){this.node=n.Builder.createElement("div",{class:"row pixium-block-build"});let s=n.Builder.createElement("div",{class:"col-md-12 "+i});this.header=n.Builder.addBoxHeader(this.node,this.id,s,t),n.Builder.addBuilderInputText(this.header,this.id,this.text,"Text",e=>{this.text=e},"col-md-6"),this.node.appendChild(s);let o=Object.keys(u).filter(e=>e.match(/^\D/)).map(e=>({name:e,value:u[e]}));n.Builder.addBuilderInputDropdown(s,this.id,this.type,"Type",e=>{this.type=Number(e),this.answer="",this.triggerSubElementBlock()},o,"col-md-4");let r="";this.type!==u.RADIO&&this.type!==u.CHECKBOX&&(r="display:none;");let a=n.Builder.createElement("div",{id:"choices_block_"+this.id,class:"row col-md-12",style:r}),d=n.Builder.createElement("label");d.innerHTML="Choices : ",a.appendChild(d),this.choices.length>0&&this.choices.forEach(e=>{e.build(a);let t=n.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button"});t.innerText="-",t.onclick=t=>{a.removeChild(e.node),this.choices=this.choices.filter((function(t){return t.id!=e.id}))},e.node.appendChild(t)});let c=n.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button"});c.innerText="+",c.onclick=e=>{let t=e.target,i=new l.Choice(null);this.choices.push(i),a.removeChild(t),i.build(a);let s=n.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button"});s.innerText="-",s.onclick=e=>{a.removeChild(i.node),this.choices=this.choices.filter((function(e){return e.id!=i.id}))},i.node.appendChild(s),a.appendChild(t)},a.appendChild(c),s.appendChild(a);let h="";this.type!==u.SLIDER&&(h="display:none;");let p=n.Builder.createElement("div",{id:"slider_block_"+this.id,class:"row col-md-12",style:h});n.Builder.addBuilderInputText(p,this.id,this.min,"Min",e=>{this.min=e},"col-md-4"),n.Builder.addBuilderInputText(p,this.id,this.max,"Max",e=>{this.max=e},"col-md-4"),n.Builder.addBuilderInputText(p,this.id,this.step,"Step",e=>{this.step=e},"col-md-4"),s.appendChild(p),e.appendChild(this.node)}run(e){let t=n.Builder.createElement("p");switch(t.innerHTML=this.text,this.node=n.Builder.createElement("div"),this.node.appendChild(t),this.type){case u.RADIO:r.BlockRadio.run(this.node,this);break;case u.CHECKBOX:a.BlockCheckbox.run(this.node,this);break;case u.FREETEXT:o.BlockFreetext.run(this.node,this);break;case u.LONGTEXT:d.BlockLongtext.run(this.node,this);break;case u.NOANSWER:break;case u.SLIDER:s.BlockSlider.run(this.node,this);break;case u.TAGS:c.BlockTags.run(this.node,this)}let i=n.Builder.createElement("hr",{class:"pixium-hr"});this.node.appendChild(i),e.appendChild(this.node)}display(){}triggerSubElementBlock(){let e=null;(e=document.getElementById("slider_block_"+this.id))?this.type===u.SLIDER?e.style.display="block":e.style.display="none":alert("Node Silder not found");let t=null;(t=document.getElementById("choices_block_"+this.id))?this.type===u.RADIO||this.type===u.CHECKBOX?t.style.display="block":t.style.display="none":alert("Node Choice not found")}compileJson(){let e;return e=[],this.choices.forEach(t=>{e.push(t.compileJson())}),this.json={type:this.type,text:this.text,answer:this.answer,min:this.min,max:this.max,step:this.step,choices:e},this.json}}},
/*!*************************************************!*\
  !*** ./node_modules/ts-loader!./src/builder.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Builder=void 0;class n{static createElement(e,t=null){if(!e)return void alert("Could not build the element");let i=document.createElement(e);if(t)for(var n in t){var l=t[n];i.setAttribute(n,l)}return i}static setAttributes(e,t=null){if(t)for(var i in t){var n=t[i];e.setAttribute(i,n)}}static addBuilderInputText(e,t,i,l,s,o="col-md-12"){let r=n.createElement("div",{class:"pixium-row-block "+o}),a=n.createElement("input",{class:"pixium-textbox",type:"text",value:i,name:l+"_"+t,placeholder:l});a.onblur=e=>{console.log(e.target),s(e.target.value)},r.appendChild(a),e.appendChild(r)}static addBoxHeader(e,t,i,l){let s=n.createElement("div",{class:"col-md-12 block-header block-header-"+t});l&&(l.className+=" float-right",s.appendChild(l));let o=n.createElement("i",{class:"fa fa-eye float-right","aria-hidden":"true"});s.appendChild(o);let r=n.createElement("i",{class:"fa fa-eye-slash float-right hidden","aria-hidden":"true"});return s.appendChild(r),o.onclick=e=>{i.classList.toggle("collapse"),o.classList.toggle("hidden"),r.classList.toggle("hidden")},r.onclick=e=>{i.classList.toggle("collapse"),o.classList.toggle("hidden"),r.classList.toggle("hidden")},e.appendChild(s),s}static addBuilderInputDropdown(e,t,i,l,s,o,r="col-md-12"){let a=n.createElement("div",{class:"pixium-row-block "+r}),d=n.createElement("label");d.innerHTML=l+": ";let c=n.createElement("select",{class:"pixium-dropdown",value:i,name:l+"_"+t,style:"display:block"});c.onchange=e=>{s(e.target.value)},o.forEach(e=>{let t=n.createElement("option",{value:e.value});i===e.value&&n.setAttributes(t,{selected:"selected"}),t.innerHTML=e.name,c.appendChild(t)}),a.appendChild(d),a.appendChild(c),e.appendChild(a)}}t.Builder=n},
/*!*************************************!*\
  !*** ./src/block/choice.ts-exposed ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./choice.ts */10)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!******************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/choice.ts ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Choice=void 0;const n=i(/*! ../builder */1);t.Choice=class{constructor(e){this.id=Math.random().toString(36).substring(7),e&&(e.label&&(this.label=e.label),e.value&&(this.value=e.value))}build(e){this.node=n.Builder.createElement("div",{class:"pixium-row-block block-choices col-md-12"});let t=n.Builder.createElement("label",{for:"input_"+this.value+"_"+this.id});t.innerHTML="Value : ";let i=n.Builder.createElement("input",{class:"pixium-textbox",type:"text",value:this.value?this.value:"",placeholder:"Value",id:"input_"+this.value+"_"+this.id});i.onblur=e=>{console.log(e.target),this.value=e.target.value};let l=n.Builder.createElement("label",{for:"input_"+this.label+"_"+this.id,style:"min-width: auto;"});l.innerHTML="Label : ";let s=n.Builder.createElement("input",{class:"pixium-textbox",type:"text",value:this.label?this.label:"",placeholder:"Label",id:"input_"+this.label+"_"+this.id});s.onblur=e=>{console.log(e.target),this.label=e.target.value},this.node.appendChild(t),this.node.appendChild(i),this.node.appendChild(l),this.node.appendChild(s),e.appendChild(this.node)}compileJson(){return this.json={label:this.label,value:this.value},this.json}}},
/*!******************************************!*\
  !*** ./src/block/blockSlider.ts-exposed ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockSlider.ts */12)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!***********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockSlider.ts ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockSlider=void 0;const n=i(/*! ../builder */1);t.BlockSlider=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let l=n.Builder.createElement("input"),s=n.Builder.createElement("span",{class:"_left"});s.innerHTML=t.min?t.min:"0";let o=n.Builder.createElement("span",{class:"_right"});o.innerHTML=t.max?t.max:"100",n.Builder.setAttributes(l,{class:"pixium-slider",type:"range",value:t.answer?t.answer:t.max?Number(t.max)/2:50,min:t.min?t.min:0,max:t.max?t.max:100,id:"inputrange_"+t.id}),t.step&&l.setAttribute("step",t.step),l.onchange=()=>{t.answer=parseFloat(l.value),console.log(t.answer),document.getElementById("output_"+t.id).innerHTML=t.answer};let r=n.Builder.createElement("div");r.setAttribute("class","pixium-block-slider");let a=n.Builder.createElement("output",{id:"output_"+t.id});a.innerHTML=t.answer?t.answer:t.max?Number(t.max)/2:50,t.answer=a.innerHTML,r.appendChild(a),r.appendChild(l),r.appendChild(s),r.appendChild(o),i.appendChild(r),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockFreetext.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockFreetext.ts */14)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockFreetext.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockFreetext=void 0;const n=i(/*! ../builder */1);t.BlockFreetext=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let l=n.Builder.createElement("input");n.Builder.setAttributes(l,{class:"pixium-textbox",type:"text",value:t.answer,id:"inputfreetext_"+t.id}),l.onblur=()=>{t.answer=l.value,console.log(t.answer)},i.appendChild(l),e.appendChild(i)}}},
/*!*****************************************!*\
  !*** ./src/block/blockRadio.ts-exposed ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockRadio.ts */16)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!**********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockRadio.ts ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockRadio=void 0;const n=i(/*! ../builder */1);t.BlockRadio=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container"),t.choices.forEach(e=>{let l=n.Builder.createElement("input",{type:"radio",id:"inputradio_"+t.id,value:e.value+""}),s=n.Builder.createElement("label");s.innerHTML=e.label;let o=n.Builder.createElement("div");o.appendChild(l),o.appendChild(s),i.appendChild(o),l.onclick=e=>{console.log(e.target),t.answer=e.target.value,console.log(t.answer)}}),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockCheckbox.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockCheckbox.ts */18)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockCheckbox.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockCheckbox=void 0;const n=i(/*! ../builder */1);t.BlockCheckbox=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container"),t.choices.forEach(e=>{let l=n.Builder.createElement("input",{type:"checkbox",name:t.id,value:e.value+"",id:e.value+""});for(var s=0;s<t.answer.length;s++)e.value+""===t.answer[s]&&n.Builder.setAttributes(l,{checked:!0});let o=n.Builder.createElement("label");o.innerHTML=e.label;let r=n.Builder.createElement("div");r.appendChild(l),r.appendChild(o),i.appendChild(r),l.onclick=e=>{let i=document.querySelectorAll('input[type=checkbox][name="'+t.id+'"]:checked'),n=[];i.forEach(e=>{n.push(e.value)}),t.answer=n}}),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockLongtext.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockLongtext.ts */20)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockLongtext.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockLongtext=void 0;const n=i(/*! ../builder */1);t.BlockLongtext=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let l=document.createElement("textarea");n.Builder.setAttributes(l,{class:"pixium-textbox",rows:5,value:t.answer,id:"inputlongtext_"+t.id}),l.onblur=()=>{t.answer=l.value,console.log(t.answer)},i.appendChild(l),e.appendChild(i)}}},
/*!****************************************!*\
  !*** ./src/block/BlockTags.ts-exposed ***!
  \****************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./BlockTags.ts */22)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/BlockTags.ts ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockTags=void 0;const n=i(/*! ../builder */1);class l{static run(e,t){0==t.answer.length&&(t.answer=[]);let i=document.createElement("div");i.setAttribute("class","element-form-container"),i.setAttribute("style","display:flex");let s=document.createElement("div");i.setAttribute("class","tags"),t.answer&&t.answer.forEach(e=>{if(e&&e.length>0){let i=document.createElement("span");i.setAttribute("id","tag-"+t.id+"-"+e),i.innerHTML=e;let l=n.Builder.createElement("button",{class:"btn btn-danger",type:"button"});l.innerText="-",l.onclick=e=>{s.removeChild(i),t.answer=t.answer.filter((function(e){return e+l.outerHTML!=i.innerHTML}))},i.appendChild(l),s.appendChild(i)}});let o=n.Builder.createElement("input",{class:"fff"});o.addEventListener("keypress",(function(e){l.processNewKeyword(e,o,t,s)})),o.onblur=()=>{l.processNewKeyword(event,o,t,s,!0)},i.appendChild(s),i.appendChild(o),e.appendChild(i)}static processNewKeyword(e,t,i,l,s=!1){if(s||"Enter"===e.key||","===e.key||188==e.keyCode){e.preventDefault();let s=t.value.trim();if(console.log(s),s&&s.length>0){t.value=null,i.answer.push(s);let e=document.createElement("span");e.innerHTML=s;let o=n.Builder.createElement("button",{class:"btn",type:"button"});o.innerHTML='<i class="fa fa-times" aria-hidden="true"></i>',o.onclick=t=>{l.removeChild(e),i.answer=i.answer.filter((function(t){return t+o.outerHTML!=e.innerHTML}))},e.appendChild(o),l.appendChild(e)}}}}t.BlockTags=l},
/*!***********************!*\
  !*** ./src/data.json ***!
  \***********************/
/*! exports provided: sections, default */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e){e.exports=JSON.parse('{"sections":[{"title":"Section 1","blocks":[{"text":"BLABLA: <br> <br> How BLALBAty to delegate?","name":"q3","type":7},{"text":"Test Ludo?","name":"q3bis","type":3,"min":"1","max":"10","step":"1","label":"Delegation"}]},{"title":"Block Test Checkbox","blocks":[{"type":2,"name":"q2","text":"How do you feel about meeting new people?","choices":[{"value":1,"label":"Extraverted"},{"value":2,"label":"Introverted"}]},{"type":4,"name":"q22","text":"How do you feel about meeting new people?","choices":[{"value":1,"label":"I love meeting new people!"},{"value":2,"label":"Sometimes I like to meet new people, if I\'m in the right mood."}]}]},{"name":"block 1","blocks":[{"text":"DDDDELEGATION: <br> <br> How skilled do you feel today about your ability to delegate?","name":"q1","type":1,"group":1,"label":"Delegation"},{"text":"TEST: <br> <br> How sity to delegate?","name":"q2","type":1,"group":1,"label":"Delegation"}]}]}')}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnVpbGRlci50cy1leHBvc2VkIiwid2VicGFjazovLy8uL3NyYy9tYWluLnRzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlY3Rpb24udHMtZXhwb3NlZCIsIndlYnBhY2s6Ly8vLi9zcmMvc2VjdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svYmxvY2sudHMtZXhwb3NlZCIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svYmxvY2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2J1aWxkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Nob2ljZS50cy1leHBvc2VkIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9jaG9pY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrU2xpZGVyLnRzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrU2xpZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9ibG9ja0ZyZWV0ZXh0LnRzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrRnJlZXRleHQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrUmFkaW8udHMtZXhwb3NlZCIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svYmxvY2tSYWRpby50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svYmxvY2tDaGVja2JveC50cy1leHBvc2VkIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9ibG9ja0NoZWNrYm94LnRzIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9ibG9ja0xvbmd0ZXh0LnRzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrTG9uZ3RleHQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL0Jsb2NrVGFncy50cy1leHBvc2VkIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9CbG9ja1RhZ3MudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnIiwidGhpcyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsImRhdGEiLCJjb2xsZWN0aW9uSGFzIiwiYSIsImIiLCJsZW4iLCJsZW5ndGgiLCJmaW5kUGFyZW50QnlTZWxlY3RvciIsImVsbSIsInNlbGVjdG9yIiwiYWxsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY3VyIiwicGFyZW50Tm9kZSIsInBhcmFtcyIsInNlY3Rpb25zIiwiY3VycmVudE5vZGUiLCJkaXYiLCJtYWluTm9kZSIsImdldEVsZW1lbnRCeUlkIiwiY29uc29sZSIsImxvZyIsInNldEF0dHJpYnV0ZSIsImpzb24iLCJzaW5nbGVTZWN0aW9uIiwiZm9yRWFjaCIsInNlYyIsInNlY3Rpb25Nb2RlbCIsIlNlY3Rpb24iLCJuZXh0U2xpZGUiLCJtb3ZlU2VjdGlvbiIsInB1c2giLCJhbGVydCIsImRlYnVnIiwiYnVpbGQiLCJydW4iLCJfaWQiLCJpZCIsInMxX2lkIiwiczJfaWQiLCJ0ZW1wIiwiZGF0YVRyYW5zZmVyIiwic2V0RGF0YSIsInRhcmdldCIsInNldFRpbWVvdXQiLCJwcmV2ZW50RGVmYXVsdCIsInRoZV9wYXJlbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJnZXREYXRhIiwiZHJhZ2dhYmxlIiwiaWQxIiwiZ2V0SW5kZXhGcm9tU2VjdGlvbklkIiwiY2hpbGRyZW4iLCJpZDIiLCJzd2FwU2VjdGlvbnMiLCJhUGFyZW50IiwiYlBhcmVudCIsImFIb2xkZXIiLCJjcmVhdGVFbGVtZW50IiwiYkhvbGRlciIsInJlcGxhY2VDaGlsZCIsImNsZWFyIiwiZGVsQnRuIiwiQnVpbGRlciIsImlubmVySFRNTCIsIm9uY2xpY2siLCJldiIsInJlbW92ZUNoaWxkIiwiY29udGVudFdyYXBwZXIiLCJmaWx0ZXIiLCJlbCIsImFwcGVuZENoaWxkIiwib25kcmFnc3RhcnQiLCJkcmFnU3RhcnQiLCJib3giLCJhZGRFdmVudExpc3RlbmVyIiwiZHJhZ0VudGVyIiwiZHJhZ092ZXIiLCJkcmFnTGVhdmUiLCJkcm9wIiwiYWRkQnV0dG9uIiwiaW5uZXJUZXh0IiwiYnRuU2VjQWRkIiwic3dpdGNoQnV0dG9uIiwiYnRuU2VjRGVsIiwibm9kZSIsInNhdmVCdG4iLCJpc0NvbXBsZXRlZCIsImNvbXBpbGVKc29uIiwic3R5bGUiLCJkaXNwbGF5IiwiYWZ0ZXIiLCJzYXZlQnV0dG9uIiwic2hvdyIsImFyciIsImZpbmFsT3V0cHV0IiwiSlNPTiIsInN0cmluZ2lmeSIsImhpZGUiLCJfcGFyZW50IiwiX2pzb24iLCJfY2FsbGJhY2siLCJwYXJlbnQiLCJibG9ja3MiLCJjYWxsYmFjayIsInRpdGxlIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiYmxvY2tNb2RlbCIsIkJsb2NrIiwibm9kZUhlYWRlciIsImFkZEJ1aWxkZXJJbnB1dFRleHQiLCJ2YWwiLCJibGsiLCJidG5CbGtBZGQiLCJidG5CbGtEZWwiLCJoZWFkZXIiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwibmFtZU5vZGUiLCJock5hbWUiLCJwcmV2QnV0dG9uIiwibmV4dEJ1dHRvbiIsImFuc3dlciIsInR5cGUiLCJCbG9ja1R5cGUiLCJOT0FOU1dFUiIsInRleHQiLCJtaW4iLCJtYXgiLCJzdGVwIiwiY2hvaWNlcyIsIlJBRElPIiwiQ0hFQ0tCT1giLCJjaG9pY2VKc29uIiwiY2hvaWNlIiwiQ2hvaWNlIiwiY2xhc3NlcyIsIm5vZGVDb250ZW50IiwiYWRkQm94SGVhZGVyIiwiZW51bUFycmF5Iiwia2V5cyIsIm1hdGNoIiwibWFwIiwiYWRkQnVpbGRlcklucHV0RHJvcGRvd24iLCJOdW1iZXIiLCJ0cmlnZ2VyU3ViRWxlbWVudEJsb2NrIiwiYmxrQ2hvaWNlc1N0eWxlIiwibm9kZUNob2ljZXMiLCJsYWJUaXRsZSIsImNoIiwiYWRkQ2hvaWNlQnV0dG9uIiwiYnRuQ2hBZGQiLCJidG5DaERlbCIsImJsa1NsaWRlclN0eWxlIiwiU0xJREVSIiwibm9kZVNsaWRlciIsInRpdGxlTm9kZSIsIkJsb2NrUmFkaW8iLCJCbG9ja0NoZWNrYm94IiwiRlJFRVRFWFQiLCJCbG9ja0ZyZWV0ZXh0IiwiTE9OR1RFWFQiLCJCbG9ja0xvbmd0ZXh0IiwiQmxvY2tTbGlkZXIiLCJUQUdTIiwiQmxvY2tUYWdzIiwiaHIiLCJzbGlkZXJCbG9jayIsImNob2ljZUJsb2NrIiwiX3BhcmFtcyIsImVsZW0iLCJsYWJlbCIsImlucHV0Iiwib25ibHVyIiwic3ViRWxlbWVudCIsImNsYXNzTmFtZSIsImV5ZTEiLCJleWUyIiwidG9nZ2xlIiwib3B0aW9ucyIsImxhYiIsIm9uY2hhbmdlIiwiZWxlbWVudCIsIm9wdCIsInNldEF0dHJpYnV0ZXMiLCJsYWJWYWx1ZSIsImlucHV0VmFsdWUiLCJsYWJMYWJlbCIsImlucHV0TGFiZWwiLCJibG9jayIsImhvbGRlciIsImZpZWxkIiwicGFyc2VGbG9hdCIsImlucHV0RGl2Iiwib3V0cHV0IiwiZiIsIl9kaXYiLCJjaGVja2VkQm94ZXMiLCJpZHMiLCJ0YWdzIiwidGFnIiwib3V0ZXJIVE1MIiwiZXZlbnQiLCJwcm9jZXNzTmV3S2V5d29yZCIsImZvcmNlUHJvY2VzcyIsImtleUNv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SSxFQUFLbkksWUFBWW9JLE1BNUZqQyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi4vZGlzdC9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIpO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJMaWJyYXJ5XCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3JlbWl0YWNoZS9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9idWlsZGVyLnRzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiTGlicmFyeVwiXSA9IHJlcXVpcmUoXCItIS9Vc2Vycy9yZW1pdGFjaGUvV29ya3NwYWNlL2Zvcm0tYnVpbGRlci9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzIS4vbWFpbi50c1wiKTsiLCJcbmltcG9ydCB7U2VjdGlvbn0gZnJvbSAnLi9zZWN0aW9uJztcbmltcG9ydCB7QnVpbGRlcn0gZnJvbSAnLi9idWlsZGVyJztcbi8vIGltcG9ydCAqIGFzIGRhdGEgZnJvbSAnLi9kYXRhLmpzb24nO1xuLy8gaW1wb3J0IENoYXJ0IGZyb20gJ2NoYXJ0anMnO1xuLy8gaW1wb3J0IGZvbnRhd2Vzb21lIGZyb20gJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlJztcblxuY29uc3QgZGF0YSA9IHJlcXVpcmUoJy4vZGF0YS5qc29uJyk7XG4vLyBjb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcblxuXG5mdW5jdGlvbiBjb2xsZWN0aW9uSGFzKGEsIGIpIHsgLy9oZWxwZXIgZnVuY3Rpb24gKHNlZSBiZWxvdylcbiAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSBhLmxlbmd0aDsgaSA8IGxlbjsgaSArKykge1xuICAgICAgICBpZihhW2ldID09IGIpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBmaW5kUGFyZW50QnlTZWxlY3RvcihlbG0sIHNlbGVjdG9yKSB7XG4gICAgdmFyIGFsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIHZhciBjdXIgPSBlbG0ucGFyZW50Tm9kZTtcbiAgICB3aGlsZShjdXIgJiYgIWNvbGxlY3Rpb25IYXMoYWxsLCBjdXIpKSB7IC8va2VlcCBnb2luZyB1cCB1bnRpbCB5b3UgZmluZCBhIG1hdGNoXG4gICAgICAgIGN1ciA9IGN1ci5wYXJlbnROb2RlOyAvL2dvIHVwXG4gICAgfVxuICAgIHJldHVybiBjdXI7IC8vd2lsbCByZXR1cm4gbnVsbCBpZiBub3QgZm91bmRcbn1cbmZ1bmN0aW9uIHN3YXBEb20oYSxiKSBcbiAgICB7XG4gICAgICAgIHZhciBhUGFyZW50ID0gYS5wYXJlbnROb2RlO1xuICAgICAgICB2YXIgYlBhcmVudCA9IGIucGFyZW50Tm9kZTtcblxuICAgICAgICB2YXIgYUhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHZhciBiSG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICBhUGFyZW50LnJlcGxhY2VDaGlsZChhSG9sZGVyLGEpO1xuICAgICAgICBiUGFyZW50LnJlcGxhY2VDaGlsZChiSG9sZGVyLGIpO1xuXG4gICAgICAgIGFQYXJlbnQucmVwbGFjZUNoaWxkKGIsYUhvbGRlcik7XG4gICAgICAgIGJQYXJlbnQucmVwbGFjZUNoaWxkKGEsYkhvbGRlcik7ICAgIFxuICAgIH1cblxuXG5cblxuZXhwb3J0IGNsYXNzIFBpeGl1bUZvcm0ge1xuICAgIGpzb246Rm9ybURhdGE7XG4gICAgZGl2OnN0cmluZztcbiAgICBzZWN0aW9uczpTZWN0aW9uW107XG4gICAgb3V0cHV0OiBzdHJpbmc7XG4gICAgbWFpbk5vZGU6IEhUTUxFbGVtZW50O1xuICAgIHRpdGxlTm9kZTogSFRNTEVsZW1lbnQ7XG4gICAgY3VycmVudE5vZGU6IG51bWJlcjtcbiAgICBtb2RlOnN0cmluZztcbiAgICBkZWJ1Zzpib29sZWFuO1xuICAgIHNpbmdsZVNlY3Rpb246Ym9vbGVhbjtcbiAgICBzYXZlQnRuOiBIVE1MRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKHBhcmFtczpGb3JtRGF0YSkge1xuICAgICAgICB0aGlzLnNlY3Rpb25zID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSAwO1xuXG4gICAgICAgIGlmKCFwYXJhbXNbXCJkaXZcIl0pe1xuICAgICAgICAgICAgYWxlcnQoJ0RpdiBub3QgZm91bmQuIENhbm5vdCBkaXNwbGF5IHRoZSBmb3JtJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXYgPSBwYXJhbXNbXCJkaXZcIl07XG4gICAgICAgIHRoaXMubWFpbk5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmRpdik7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMubWFpbk5vZGUpO1xuICAgICAgICB0aGlzLm1haW5Ob2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiY29udGFpbmVyIGZvcm0tY29udGFpbmVyIGRyb3AtdGFyZ2V0c1wiKTtcblxuICAgICAgICBpZihwYXJhbXNbXCJkYXRhXCJdKXtcbiAgICAgICAgICAgIHRoaXMuanNvbiA9IHBhcmFtc1tcImRhdGFcIl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmpzb24gPSBkYXRhOy8vSlNPTi5wYXJzZSggZGF0YSApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gIC0tLS0tLS0tLS0tLSAgICBPTkxZIEFMTE9XIE9ORSBTRUNUSU9OIEZPUk1cbiAgICAgICAgaWYocGFyYW1zW1wic2luZ2xlU2VjdGlvblwiXSl7XG4gICAgICAgICAgICB0aGlzLnNpbmdsZVNlY3Rpb24gPSBwYXJhbXNbXCJzaW5nbGVTZWN0aW9uXCJdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaW5nbGVTZWN0aW9uID0gZmFsc2U7XG4gICAgICAgIH0gXG5cbiAgICAgICAgLy8gQlVJTEQgdGhlIHNlY3Rpb24gc3ViIGVsZW1lbnQgKG5vIGdlbmVyYXRlZCBIVE1MIGF0IHRoaXMgc3RhZ2UgeWV0KVxuICAgICAgICBpZih0aGlzLmpzb24gJiYgdGhpcy5qc29uW1wic2VjdGlvbnNcIl0pe1xuICAgICAgICAgICAgbGV0IHNlY3MgPSB0aGlzLmpzb25bXCJzZWN0aW9uc1wiXTtcbiAgICAgICAgICAgIHNlY3MuZm9yRWFjaCggKHNlYykgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBzZWN0aW9uTW9kZWwgPSBuZXcgU2VjdGlvbih0aGlzLm1haW5Ob2RlLCBzZWMsICgoIXRoaXMuc2luZ2xlU2VjdGlvbikgPyAobmV4dFNsaWRlOmJvb2xlYW4pID0+dGhpcy5tb3ZlU2VjdGlvbihuZXh0U2xpZGUpIDogbnVsbCApKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25zLnB1c2goc2VjdGlvbk1vZGVsKTtcblxuICAgICAgICAgICAgICAgIC8vIGxldCBpdGVtID0gc2VjdGlvbk1vZGVsLm5vZGU7XG4gICAgICAgICAgICAgICAgLy8gaXRlbS5vbmRyYWdzdGFydCA9IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gICAgIHRoaXMuZHJhZ1N0YXJ0KGUpO1xuICAgICAgICAgICAgICAgIC8vIH07XG4gICAgICAgICAgICAgICAgLy9pdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIHRoaXMuZHJhZ1N0YXJ0KTtcbiAgICAgICAgICAgIH0pOyBcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgYWxlcnQoXCJDb3VsZCBub3QgaW5pdCB0aGUgbW9kdWxlLlwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuanNvbik7XG4gICAgICAgIH0gICAgIFxuICAgICAgICBcbiAgICAgICAgXG5cbiAgICAgICAgLy8gIC0tLS0tLS0tLS0tLSAgICBTVEFSVCBUSEUgQVBQTElDQVRJT04gSU4gZGVidWdcbiAgICAgICAgIGlmKHBhcmFtc1tcImRlYnVnXCJdKXtcbiAgICAgICAgICAgIHRoaXMuZGVidWcgPSBwYXJhbXNbXCJkZWJ1Z1wiXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWcgPSBmYWxzZTtcbiAgICAgICAgfSAgICAgICBcblxuICAgICAgICAvLyAgLS0tLS0tLS0tLS0tICAgIFNUQVJUIFRIRSBBUFBMSUNBVElPTiBJTiBidWlsZCBPUiBydW4gTU9ERVxuICAgICAgICBpZihwYXJhbXNbXCJtb2RlXCJdKXtcbiAgICAgICAgICAgIHRoaXMubW9kZSA9IHBhcmFtc1tcIm1vZGVcIl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1vZGUgPSAncnVuJztcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLm1vZGUgPT09ICdidWlsZCcpe1xuICAgICAgICAgICAgdGhpcy5idWlsZCgpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRoaXMucnVuKCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEdldCBJbmRleCBmcm9tIElEIFxuICAgICAqL1xuICAgIGdldEluZGV4RnJvbVNlY3Rpb25JZChfaWQ6c3RyaW5nKXtcbiAgICAgICAgZm9yKGxldCBpPTAgOyBpPHRoaXMuc2VjdGlvbnMubGVuZ3RoIDsgaSsrKXtcbiAgICAgICAgICAgIGlmKHRoaXMuc2VjdGlvbnNbaV0uaWQgPT0gX2lkKSByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTd2FwIHRvIHNlY3Rpb24gZWxlbWVudCBmcm9tIHRoZSB0YWJsZVxuICAgICAqIEBwYXJhbSBzMSBcbiAgICAgKiBAcGFyYW0gczIgXG4gICAgICovXG4gICAgc3dhcFNlY3Rpb25zKHMxX2lkOm51bWJlciwgczJfaWQ6bnVtYmVyKXtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5zZWN0aW9ucyk7XG4gICAgICAgIGxldCB0ZW1wID0gdGhpcy5zZWN0aW9uc1tzMV9pZF07XG4gICAgICAgIHRoaXMuc2VjdGlvbnNbczFfaWRdID0gdGhpcy5zZWN0aW9uc1tzMl9pZF07XG4gICAgICAgIHRoaXMuc2VjdGlvbnNbczJfaWRdID0gdGVtcDtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5zZWN0aW9ucyk7XG4gICAgfVxuXG4gICAgXG5cblxuICAgIGRyYWdTdGFydChlKXtcbiAgICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIGUudGFyZ2V0LmlkKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIGxldCB0aGVfcGFyZW50ID0gZmluZFBhcmVudEJ5U2VsZWN0b3IoZS50YXJnZXQsIFwiLmRyb3AtdGFyZ2V0XCIpO1xuICAgICAgICAgICAgaWYodGhlX3BhcmVudCl7IFxuICAgICAgICAgICAgICAgIC8vIHRoZV9wYXJlbnQuY2hpbGRyZW5bMF0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBhbGVydChcIm5vdCBmb3VuZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgfVxuICAgIGRyYWdFbnRlcihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGV0IHRoZV9wYXJlbnQgPSBmaW5kUGFyZW50QnlTZWxlY3RvcihlLnRhcmdldCwgXCIuZHJvcC10YXJnZXRcIik7XG4gICAgICAgIGlmKHRoZV9wYXJlbnQpIHtcbiAgICAgICAgICAgIHRoZV9wYXJlbnQuY2xhc3NMaXN0LmFkZCgnZHJhZy1vdmVyJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgZHJhZ092ZXIoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCB0aGVfcGFyZW50ID0gZmluZFBhcmVudEJ5U2VsZWN0b3IoZS50YXJnZXQsIFwiLmRyb3AtdGFyZ2V0XCIpO1xuICAgICAgICBpZih0aGVfcGFyZW50KSB7XG4gICAgICAgICAgICB0aGVfcGFyZW50LmNsYXNzTGlzdC5hZGQoJ2RyYWctb3ZlcicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGRyYWdMZWF2ZShlKSB7XG4gICAgICAgIGxldCB0aGVfcGFyZW50ID0gZmluZFBhcmVudEJ5U2VsZWN0b3IoZS50YXJnZXQsIFwiLmRyb3AtdGFyZ2V0XCIpO1xuICAgICAgICBpZih0aGVfcGFyZW50KSB7XG4gICAgICAgICAgICB0aGVfcGFyZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWctb3ZlcicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGRyb3AoZSkge1xuICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnLW92ZXInKTtcblxuICAgICAgICAvLyBnZXQgdGhlIGRyYWdnYWJsZSBlbGVtZW50XG4gICAgICAgIGNvbnN0IGlkID0gZS5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgndGV4dC9wbGFpbicpO1xuICAgICAgICBsZXQgZHJhZ2dhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXG4gICAgICAgIGxldCB0aGVfcGFyZW50ID0gZmluZFBhcmVudEJ5U2VsZWN0b3IoZS50YXJnZXQsIFwiLmRyb3AtdGFyZ2V0XCIpO1xuICAgICAgICBcbiAgICAgICAgdGhlX3BhcmVudC5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnLW92ZXInKTtcbiAgICAgICAgZHJhZ2dhYmxlLmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWctb3ZlcicpO1xuXG4gICAgICAgIGlmKCF0aGVfcGFyZW50KXtcbiAgICAgICAgICAgIGFsZXJ0KFwibm90IHBhcmVudCBmb3VuZFwiKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBsZXQgaWQxID0gdGhpcy5nZXRJbmRleEZyb21TZWN0aW9uSWQodGhlX3BhcmVudC5jaGlsZHJlblswXS5pZCk7XG4gICAgICAgICAgICBsZXQgaWQyID0gdGhpcy5nZXRJbmRleEZyb21TZWN0aW9uSWQoZHJhZ2dhYmxlLmlkKTtcbiAgICBcbiAgICAgICAgICAgIGlmKGlkMSAhPSBpZDIpe1xuICAgICAgICAgICAgICAgIHRoaXMuc3dhcFNlY3Rpb25zKGlkMSwgaWQyKTtcbiAgICAgICAgICAgICAgICBzd2FwRG9tKHRoZV9wYXJlbnQuY2hpbGRyZW5bMF0sIGRyYWdnYWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIFxuXG4gICAgICAgIC8vIHN3aXRjaCB0aGUgMiBlbGVtZW50IGluIHRoZSBTRUNUSU9OIExJU1RcbiAgICAgICAgLy8gdGhpcy5zZWN0aW9uc1xuICAgIFxuICAgICAgICAvLyBsZXQgdGFyZ2V0RWxlbSA9IGUudGFyZ2V0LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgLy8gbGV0IGRlc3RFbGVtID0gZHJhZ2dhYmxlLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAvLyBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGRlc3RFbGVtLCBlLnRhcmdldC5wYXJlbnROb2RlKTsgIC8vIHJlbW92ZSBjaGlsZHJlblxuICAgICAgICAvLyBkcmFnZ2FibGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0YXJnZXRFbGVtLCBkcmFnZ2FibGUucGFyZW50Tm9kZSk7XG4gICAgXG4gICAgICAgIC8vIC8vIGRpc3BsYXkgdGhlIGRyYWdnYWJsZSBlbGVtZW50XG4gICAgICAgIC8vIGRyYWdnYWJsZS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICB9XG4gICAgXG5cblxuICAgIC8qKlxuICAgICAqIEVudGVyIEJVSUxEIE1PREUgZm9yIHVzZXIgdG8gZWRpdCB0aGUgZm9ybVxuICAgICAqL1xuICAgIGJ1aWxkKCl7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcblxuICAgICAgICB0aGlzLnNlY3Rpb25zLmZvckVhY2goIChzZWMpID0+IHtcbiAgICAgICAgICAgIHNlYy5idWlsZCh0aGlzLm1haW5Ob2RlKTtcbiAgICAgICAgICAgIGlmKCF0aGlzLnNpbmdsZVNlY3Rpb24pe1xuICAgICAgICAgICAgICAgIC8vIEJVSUxEIERFTEVURSBTRUNUSU9OIEJUTlxuICAgICAgICAgICAgICAgIGxldCBkZWxCdG4gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1wiY2xhc3NcIjpcImJ0biBidG4tZGFuZ2VyIGZvcm0tYnVpbGRlci1idG5cIiwgXCJ0eXBlXCI6XCJidXR0b25cIiwgXCJpZFwiOlwiYnRuLWRlbGV0ZS1zZWN0aW9uLVwiK3NlYy5pZH0pO1xuICAgICAgICAgICAgICAgIGRlbEJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYSBmYS10cmFzaFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nOyAgXG4gICAgICAgICAgICAgICAgZGVsQnRuLm9uY2xpY2sgPSAoZXYgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1haW5Ob2RlLnJlbW92ZUNoaWxkKHNlYy5jb250ZW50V3JhcHBlcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvbnMgPSB0aGlzLnNlY3Rpb25zLmZpbHRlcihmdW5jdGlvbihlbCkgeyByZXR1cm4gZWwuaWQgIT0gc2VjLmlkOyB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzZWMuY29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQoZGVsQnRuKTtcbiAgICAgICAgICAgIH0gICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGl0ZW0gPSBzZWMuY29udGVudFdyYXBwZXI7XG4gICAgICAgICAgICBpdGVtLm9uZHJhZ3N0YXJ0ID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdTdGFydChlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgLy8gZ2V0IGFsbCB0aGUgRElWIHRhZ2dlcyBwaXhpdW0tYm94IGFuZCBjb25uZWN0IGxpc3RlbmVyIGZvciBkcmFnIC8gZHJvcCBldmVudHNcbiAgICAgICAgbGV0IGJveGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5waXhpdW0tYm94XCIpO1xuICAgICAgICBib3hlcy5mb3JFYWNoKGJveCA9PiB7XG4gICAgICAgICAgICBib3guYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgdGhpcy5kcmFnRW50ZXIpXG4gICAgICAgICAgICBib3guYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCB0aGlzLmRyYWdPdmVyKTtcbiAgICAgICAgICAgIGJveC5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCB0aGlzLmRyYWdMZWF2ZSk7XG4gICAgICAgICAgICBib3guYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIChlKSA9PiB0aGlzLmRyb3AoZSkpO1xuICAgICAgICB9KTtcblxuXG5cbiAgICAgICAgaWYoIXRoaXMuc2luZ2xlU2VjdGlvbil7XG4gICAgICAgICAgICAvLyBCVUlMRCBBREQgU0VDVElPTiBCVE5cbiAgICAgICAgICAgIGxldCBhZGRCdXR0b24gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcImNsYXNzXCI6XCJidG4gYnRuLXN1Y2Nlc3MgZm9ybS1idWlsZGVyLWJ0blwiLCBcInR5cGVcIjpcImJ1dHRvblwifSk7ICBcbiAgICAgICAgICAgIGFkZEJ1dHRvbi5pbm5lclRleHQgPSAnKyc7ICBcbiAgICAgICAgICAgIGFkZEJ1dHRvbi5vbmNsaWNrID0gKGV2KSA9PiBcbiAgICAgICAgICAgIHsgICBcbiAgICAgICAgICAgICAgICBsZXQgYnRuU2VjQWRkID0gPEhUTUxFbGVtZW50PmV2LnRhcmdldDtcbiAgICAgICAgICAgICAgICBsZXQgc2VjID0gbmV3IFNlY3Rpb24odGhpcy5tYWluTm9kZSwgbnVsbCwgKCAobmV4dFNsaWRlOmJvb2xlYW4pID0+dGhpcy5tb3ZlU2VjdGlvbihuZXh0U2xpZGUpICkpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvbnMucHVzaChzZWMpO1xuICAgICAgICAgICAgICAgIHRoaXMubWFpbk5vZGUucmVtb3ZlQ2hpbGQoYnRuU2VjQWRkKTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmRlYnVnKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYWluTm9kZS5yZW1vdmVDaGlsZChzd2l0Y2hCdXR0b24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWMuYnVpbGQodGhpcy5tYWluTm9kZSk7XG4gICAgICAgICAgICAgICAgLy8gQlVJTEQgREVMRVRFIFNFQ1RJT04gQlROXG4gICAgICAgICAgICAgICAgbGV0IGJ0blNlY0RlbCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XCJjbGFzc1wiOlwiYnRuIGJ0bi1kYW5nZXIgZm9ybS1idWlsZGVyLWJ0blwiLCBcInR5cGVcIjpcImJ1dHRvblwiLCBcImlkXCI6XCJidG4tZGVsZXRlLXNlY3Rpb24tXCIrc2VjLmlkfSk7XG4gICAgICAgICAgICAgICAgYnRuU2VjRGVsLmlubmVySFRNTCA9IGA8aSBjbGFzcz1cImZhIGZhLXRyYXNoXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPmA7ICBcbiAgICAgICAgICAgICAgICBidG5TZWNEZWwub25jbGljayA9IChldiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbk5vZGUucmVtb3ZlQ2hpbGQoc2VjLm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25zID0gdGhpcy5zZWN0aW9ucy5maWx0ZXIoZnVuY3Rpb24oZWwpIHsgcmV0dXJuIGVsLmlkICE9IHNlYy5pZDsgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2VjLmNvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKGJ0blNlY0RlbCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm1haW5Ob2RlLmFwcGVuZENoaWxkKGJ0blNlY0FkZCk7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5kZWJ1Zyl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbk5vZGUuYXBwZW5kQ2hpbGQoc3dpdGNoQnV0dG9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9OyAgXG4gICAgICAgICAgICB0aGlzLm1haW5Ob2RlLmFwcGVuZENoaWxkKGFkZEJ1dHRvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCVUlMRCBUSEUgU1dJVENIIFVJIEJVVFRPTiBUTyBETyBUTyBSVU4gTU9ERSBJRiBERUJVRy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGxldCBzd2l0Y2hCdXR0b24gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcImNsYXNzXCI6XCJidG4gYnRuLXByaW1hcnkgZm9ybS1idWlsZGVyLWJ0blwiLCBcInR5cGVcIjpcImJ1dHRvblwifSk7ICBcbiAgICAgICAgc3dpdGNoQnV0dG9uLmlubmVyVGV4dCA9IFwiR08gVE8gUlVOXCI7ICBcbiAgICAgICAgc3dpdGNoQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiBcbiAgICAgICAgeyAgIFxuICAgICAgICAgICAgdGhpcy5ydW4oKTtcbiAgICAgICAgfTsgIFxuICAgICAgICBpZih0aGlzLmRlYnVnKXtcbiAgICAgICAgICAgIHRoaXMubWFpbk5vZGUuYXBwZW5kQ2hpbGQoc3dpdGNoQnV0dG9uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLm5vZGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIH1cblxuXG5cblxuICAgIC8qKlxuICAgICAqIFJ1biBmb3IgdXNlciB0byBhbnN3ZXIgdGhlIHF1ZXN0aW9uc1xuICAgICAqL1xuICAgIHJ1bigpe1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgdGhpcy5zZWN0aW9ucy5mb3JFYWNoKCAoc2VjKSA9PiB7XG4gICAgICAgICAgICBzZWMucnVuKHRoaXMubWFpbk5vZGUpO1xuICAgICAgICB9KTsgXG5cbiAgICAgICAgLy9DcmVhdGUgU2F2ZSBidG5cbiAgICAgICAgdGhpcy5zYXZlQnRuID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XCJjbGFzc1wiOlwiYnRuIGJ0bi1zdWNjZXNzIGZvcm0tYnVpbGRlci1idG5cIiwgXCJ0eXBlXCI6XCJzdWJtaXRcIiwgXCJpZFwiOlwiZm9ybS1idWlsZGVyLXNhdmUtZmluYWwtYnRuXCJ9KTsgIFxuICAgICAgICB0aGlzLnNhdmVCdG4uaW5uZXJUZXh0ID0gXCJTYXZlXCI7ICBcbiAgICAgICAgdGhpcy5zYXZlQnRuLm9uY2xpY2sgPSAoZSkgPT4gXG4gICAgICAgIHsgICBcbiAgICAgICAgICAgIGlmKHRoaXMuc2VjdGlvbnNbdGhpcy5jdXJyZW50Tm9kZV0uaXNDb21wbGV0ZWQoKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21waWxlSnNvbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgYWxlcnQoXCJQbGVhc2UgY29tcGxldGUgdGhlIGZvcm1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07ICBcbiAgICAgICAgaWYoKHRoaXMuY3VycmVudE5vZGUgPT0gdGhpcy5zZWN0aW9ucy5sZW5ndGgtMSkgJiYgIXRoaXMuc2luZ2xlU2VjdGlvbil7XG4gICAgICAgICAgICAvL1JlbW92ZSBOZXh0IGJ0blxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1uZXh0LXNlY3Rpb24tJyt0aGlzLnNlY3Rpb25zW3RoaXMuY3VycmVudE5vZGVdLmlkKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1uZXh0LXNlY3Rpb24tJyt0aGlzLnNlY3Rpb25zW3RoaXMuY3VycmVudE5vZGVdLmlkKS5hZnRlcih0aGlzLnNhdmVCdG4pO1xuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMuc2luZ2xlU2VjdGlvbil7XG4gICAgICAgICAgICAvL0Rpc3BsYXkgc2F2ZUJ0blxuICAgICAgICAgICAgdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5ub2RlLmFwcGVuZENoaWxkKHRoaXMuc2F2ZUJ0bik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0gREVCVUcgU0FWRSBCVVRUT04gLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgbGV0IHNhdmVCdXR0b24gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcImNsYXNzXCI6XCJidG4gYnRuLXN1Y2Nlc3MgZm9ybS1idWlsZGVyLWJ0blwiLCBcInR5cGVcIjpcImJ1dHRvblwiLCBcImlkXCI6XCJmb3JtLWJ1aWxkZXItc2F2ZS1idG5cIn0pOyAgXG4gICAgICAgIHNhdmVCdXR0b24uaW5uZXJUZXh0ID0gXCJTQVZFXCI7ICBcbiAgICAgICAgc2F2ZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gXG4gICAgICAgIHsgICBcbiAgICAgICAgICAgIHRoaXMuY29tcGlsZUpzb24oKTtcbiAgICAgICAgfTsgIFxuICAgICAgICBpZih0aGlzLmRlYnVnKXtcbiAgICAgICAgICAgIHRoaXMubWFpbk5vZGUuYXBwZW5kQ2hpbGQoc2F2ZUJ1dHRvbik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEJVSUxEIFRIRSBTV0lUQ0ggVUkgQlVUVE9OIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGxldCBzd2l0Y2hCdXR0b24gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcImNsYXNzXCI6XCJidG4gYnRuLXByaW1hcnkgZm9ybS1idWlsZGVyLWJ0blwiLCBcInR5cGVcIjpcImJ1dHRvblwifSk7ICBcbiAgICAgICAgc3dpdGNoQnV0dG9uLmlubmVyVGV4dCA9IFwiR08gVE8gQlVJTEQgTU9ERVwiOyAgIFxuICAgICAgICBzd2l0Y2hCdXR0b24ub25jbGljayA9ICgpID0+IFxuICAgICAgICB7ICAgXG4gICAgICAgICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgICAgIH07ICBcbiAgICAgICAgaWYodGhpcy5kZWJ1Zyl7XG4gICAgICAgICAgICB0aGlzLm1haW5Ob2RlLmFwcGVuZENoaWxkKHN3aXRjaEJ1dHRvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAgICAgdGhpcy5tYWluTm9kZS5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz1cImxpc3RcIj48IS0tIFNvcnRhYmxlIC0tPlxuICAgICAgICAvLyAgICAgPGRpdiBjbGFzcz1cIml0ZW1cIj4gSXRlbSAxXG4gICAgICAgIC8vICAgICAgIDxkaXYgY2xhc3M9XCJzdWJsaXN0XCI+PCEtLSBOZXN0ZWQgU29ydGFibGU7IFdyYXBwaW5nIGNvbnRhaW5lciBuZWVkZWQgLS0+XG4gICAgICAgIC8vICAgICAgICAgPGRpdiBjbGFzcz1cInN1Yml0ZW1cIj5TdWJpdGVtIDE8L2Rpdj5cbiAgICAgICAgLy8gICAgICAgICA8ZGl2IGNsYXNzPVwic3ViaXRlbVwiPlN1Yml0ZW0gMjwvZGl2PlxuICAgICAgICAvLyAgICAgICA8L2Rpdj5cbiAgICAgICAgLy8gICAgIDwvZGl2PlxuICAgICAgICAvLyAgICAgPGRpdiBjbGFzcz1cIml0ZW1cIj4gSXRlbSAyIDwvZGl2PlxuICAgICAgICAvLyAgIDwvZGl2PmA7XG5cbiAgICAgICAgLy8gbGV0IHRlbXAgPSBzb3J0YWJsZSh0aGlzLm1haW5Ob2RlLCB7XG4gICAgICAgIC8vICAgICBjb3B5OnRydWUgLy8gZGVmYXVsdCB0byBmYWxzZVxuICAgICAgICAvLyB9KTtcbiAgICAgICAgLy8gdGhpcy5tYWluTm9kZS5hcHBlbmRDaGlsZCh0ZW1wKTtcblxuICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICB9XG5cbiAgICByZXN1bHQoKXtcbiAgICAgICAgLy8gPGNhbnZhcyBpZD1cIm15Q2hhcnRcIiB3aWR0aD1cIjQwMFwiIGhlaWdodD1cIjQwMFwiPjwvY2FudmFcbiAgICAgICAgLy8gbGV0IGNoYXJ0SG9sZGVyID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIsIHtcbiAgICAgICAgLy8gICAgIFwiaWRcIjpcImNoYXJ0ZGl2XCIsXG4gICAgICAgIC8vICAgICBcIndpZHRoXCI6IDQwMCxcbiAgICAgICAgLy8gICAgIFwiaGVpZ2h0XCI6IDQwMFxuICAgICAgICAvLyB9KTtcbiAgICAgICAgLy8gdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAvLyB0aGlzLm1haW5Ob2RlLmFwcGVuZENoaWxkKGNhbnZhcyk7XG5cbiAgICAgICAgLy8gO1xuXG4gICAgICAgIC8vIHZhciBteUxpbmVDaGFydCA9IG5ldyBDaGFydChjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLCB7XG4gICAgICAgIC8vICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgIC8vICAgICBkYXRhOiB7XG4gICAgICAgIC8vICAgICAgICAgZGF0YXNldHM6IFt7XG4gICAgICAgIC8vICAgICAgICAgICAgIGxhYmVsOiAnVGVzdCBEYXRhc2V0JyxcbiAgICAgICAgLy8gICAgICAgICAgICAgZGF0YTogW3tcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHg6IC0xMCxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHk6IDBcbiAgICAgICAgLy8gICAgICAgICAgICAgfSwge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHk6IDEwXG4gICAgICAgIC8vICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHg6IDEwLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgeTogNVxuICAgICAgICAvLyAgICAgICAgICAgICB9XVxuICAgICAgICAvLyAgICAgICAgIH1dXG4gICAgICAgIC8vICAgICB9LFxuICAgICAgICAvLyAgICAgLy9vcHRpb25zOiBvcHRpb25zXG4gICAgICAgIC8vIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgQUxMIHRoZSBub2Rlc1xuICAgICAqL1xuICAgIGNsZWFyKCl7XG4gICAgICAgIGlmKHRoaXMubWFpbk5vZGUpe1xuICAgICAgICAgICAgdGhpcy5tYWluTm9kZS5pbm5lckhUTUwgPSAnJzsgIC8vIGNsZWFyIGFsbCB0aGUgc3ViIG5vZGVzXG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25zLmZvckVhY2goIChzZWMpID0+IHtcbiAgICAgICAgICAgICAgICBzZWMuY2xlYXIoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuXG5cblxuICAgIGRpc3BsYXkoKXtcbiAgICAgICAgLy8gdGhpcy5vdXRwdXQgPSBcIlwiO1xuICAgICAgICAvLyB0aGlzLnNlY3Rpb25zLmZvckVhY2goIChzZWN0aW9uKSA9PiB7XG4gICAgICAgIC8vICAgICB0aGlzLm91dHB1dCArPSBzZWN0aW9uLmRpc3BsYXkoKTtcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vIHRoaXMubWFpbk5vZGUuaW5uZXJIVE1MID0gdGhpcy5vdXRwdXQ7XG4gICAgICAgIGlmKHRoaXMuY3VycmVudE5vZGU+PTAgJiYgdGhpcy5jdXJyZW50Tm9kZTx0aGlzLnNlY3Rpb25zLmxlbmd0aCl7XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25zW3RoaXMuY3VycmVudE5vZGVdLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICBjb21waWxlSnNvbigpe1xuICAgICAgICBsZXQgYXJyOiBhbnlbXTtcbiAgICAgICAgYXJyID0gW107XG4gICAgICAgIHRoaXMuc2VjdGlvbnMuZm9yRWFjaCggKHNlYzpTZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBhcnIucHVzaChzZWMuY29tcGlsZUpzb24oKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgZmluYWxPdXRwdXQgPSBKU09OLnN0cmluZ2lmeSgge1wic2VjdGlvbnNcIjphcnJ9ICk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdmaW5hbE91dHB1dCcpO1xuICAgICAgICBjb25zb2xlLmxvZyhmaW5hbE91dHB1dCk7XG4gICAgICAgIHJldHVybiBmaW5hbE91dHB1dDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIE1vdmUgdGhlIHNsaWRlciBvciBkaXNwbGF5IHRvIHRoZSBuZXh0IHNlY3Rpb25cbiAgICAgKi9cbiAgICBtb3ZlU2VjdGlvbihuZXh0U2xpZGU6Ym9vbGVhbil7XG4gICAgICAgIC8vIGlmIG1vdmUgZm9yd2FyZFxuICAgICAgICBpZihuZXh0U2xpZGUpe1xuICAgICAgICAgICAgLy8gbWFraW5nIHN1cmUgSSBhbSBhbGxvd2VkIHRvIG1vdmUgdG8gdGhlIG5leHQgc2xpZGUgaWYgdGhlcmUgaXMgb25lXG4gICAgICAgICAgICBpZih0aGlzLmN1cnJlbnROb2RlPj0wICYmIHRoaXMuY3VycmVudE5vZGU8dGhpcy5zZWN0aW9ucy5sZW5ndGgtMSl7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSsrO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvbnNbdGhpcy5jdXJyZW50Tm9kZV0uc2hvdygpO1xuICAgICAgICAgICAgICAgIC8vRGlzcGxheSBQcmV2aW91cyBidG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuLXByZXZpb3VzLXNlY3Rpb24tJyt0aGlzLnNlY3Rpb25zW3RoaXMuY3VycmVudE5vZGVdLmlkKS5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5jdXJyZW50Tm9kZSA9PSB0aGlzLnNlY3Rpb25zLmxlbmd0aC0xKXtcbiAgICAgICAgICAgICAgICAgICAgLy9SZW1vdmUgTmV4dCBidG5cbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1uZXh0LXNlY3Rpb24tJyt0aGlzLnNlY3Rpb25zW3RoaXMuY3VycmVudE5vZGVdLmlkKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tbmV4dC1zZWN0aW9uLScrdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5pZCkuYWZ0ZXIodGhpcy5zYXZlQnRuKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL0Rpc3BsYXkgTmV4dCBidG5cbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1uZXh0LXNlY3Rpb24tJyt0aGlzLnNlY3Rpb25zW3RoaXMuY3VycmVudE5vZGVdLmlkKS5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiWW91IGFscmVhZHkgYXJlIG9uIHRoZSBuZXh0IHNsaWRlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIC8vIG1ha2luZyBzdXJlIEkgYW0gYWxsb3dlZCB0byBtb3ZlIHRvIHRoZSBwcmV2aW91cyBzbGlkZSBpZiB0aGVyZSBpcyBvbmVcbiAgICAgICAgICAgIGlmKHRoaXMuY3VycmVudE5vZGU+PTEgJiYgdGhpcy5jdXJyZW50Tm9kZTx0aGlzLnNlY3Rpb25zLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZS0tO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvbnNbdGhpcy5jdXJyZW50Tm9kZV0uc2hvdygpO1xuICAgICAgICAgICAgICAgIC8vRGlzcGxheSBOZXh0IGJ0blxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tbmV4dC1zZWN0aW9uLScrdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5pZCkuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuY3VycmVudE5vZGU9PTApIHtcbiAgICAgICAgICAgICAgICAgICAgLy9SZW1vdmUgUHJldmlvdXMgYnRuXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tcHJldmlvdXMtc2VjdGlvbi0nK3RoaXMuc2VjdGlvbnNbdGhpcy5jdXJyZW50Tm9kZV0uaWQpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiWW91IGFscmVhZHkgYXJlIG9uIHRoZSBmaXJzdCBzbGlkZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJMaWJyYXJ5XCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3JlbWl0YWNoZS9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9zZWN0aW9uLnRzXCIpOyIsImltcG9ydCB7QmxvY2ssIEJsb2NrVHlwZX0gZnJvbSBcIi4vYmxvY2svYmxvY2tcIjtcbmltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4vYnVpbGRlclwiO1xuXG4vKipcbiAqIFNFQ1RJT04gY2xhc3MgY29udGFpbnMgYSBwb3RlbnRpYWwgbGlzdCBvZiBxdWVzdGlvbiB0aGF0IGlzIGRpc3BsYXllZCBvbiB0aGUgc2FtZSBwYWdlIFxuICovXG5leHBvcnQgY2xhc3MgU2VjdGlvbntcbiAgICBibG9ja3M6QmxvY2tbXTsgXG4gICAgdGl0bGU6IHN0cmluZzsgICBcbiAgICAvLyBuYW1lOiBzdHJpbmc7XG4gICAgb3V0cHV0OiBzdHJpbmc7XG4gICAgaWQ6c3RyaW5nO1xuICAgIHBhcmVudDogSFRNTEVsZW1lbnQ7XG4gICAgbm9kZTogSFRNTEVsZW1lbnQ7XG4gICAgY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIGNvbnRlbnRXcmFwcGVyOiBIVE1MRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKF9wYXJlbnQ6SFRNTEVsZW1lbnQsIF9qc29uOkZvcm1EYXRhLCBfY2FsbGJhY2s6RnVuY3Rpb24pe1xuICAgICAgICB0aGlzLnBhcmVudCA9IF9wYXJlbnQ7XG4gICAgICAgIHRoaXMuYmxvY2tzID0gW107XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMudGl0bGUgPSAnJztcbiAgICAgICAgLy8gdGhpcy5uYW1lID0gXCJkZWZhdWx0X25hbWVcIjtcbiAgICAgICAgdGhpcy5pZCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KTtcblxuICAgICAgICBpZihfanNvbil7XG4gICAgICAgICAgICBpZihfanNvbltcInRpdGxlXCJdKXtcbiAgICAgICAgICAgICAgICB0aGlzLnRpdGxlID0gX2pzb25bXCJ0aXRsZVwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmKF9qc29uW1wibmFtZVwiXSl7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5uYW1lID0gX2pzb25bXCJuYW1lXCJdO1xuICAgICAgICAgICAgLy8gfVxuICAgIFxuICAgICAgICAgICAgaWYoX2pzb25bXCJibG9ja3NcIl0pe1xuICAgICAgICAgICAgICAgIF9qc29uW1wiYmxvY2tzXCJdLmZvckVhY2goIChiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBibG9ja01vZGVsID0gbmV3IEJsb2NrKGIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJsb2Nrcy5wdXNoKGJsb2NrTW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICAvL2Jsb2NrTW9kZWwucnVuKHRoaXMubm9kZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIERpc3BsYXkgdGhlIGZvcm0gaW4gQlVJTERFUiBNT0RFIGZvciB0aGUgdXNlciB0byBlZGl0IHRoZSBmb3JtIGl0c2VsZlxuICAgICAqIEBwYXJhbSBub2RlIFxuICAgICAqL1xuICAgIGJ1aWxkKG5vZGUpe1xuICAgICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwaXhpdW0tYm94LWNvbnRlbnRcIixcbiAgICAgICAgICAgIFwiZHJhZ2dhYmxlXCI6IHRydWUsXG4gICAgICAgICAgICBcImlkXCI6IHRoaXMuaWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5ub2RlID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJyb3cgcGl4aXVtLWJveCBkcm9wLXRhcmdldFwiLFxuICAgICAgICAgICAgXCJpZFwiOlwiaG9sZGVyLVwiK3RoaXMuaWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdGhpcy5ub2RlLm9uZHJhZ3N0YXJ0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcImRyYWcgc3RhcnRcIik7XG4gICAgICAgIC8vICAgICAoSFRNTEVsZW1lbnQoZXZlbnQudGFyZ2V0KSkuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIC8vIH07XG5cbiAgICAgICAgLy8gQ3JlYXRlIHNlY3Rpb24gaGVhZGVyIGRpdiB3aXRoIHRpdGxlIGFuZCBuYW1lIGlucHV0XG4gICAgICAgIGxldCBub2RlSGVhZGVyID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcImNsYXNzXCI6IFwicm93IHBpeGl1bS1ibG9jay1idWlsZCBwaXhpdW0tYmxvY2stYnVpbGQtaGVhZGVyXCJ9KTtcbiAgICAgICAgQnVpbGRlci5hZGRCdWlsZGVySW5wdXRUZXh0KG5vZGVIZWFkZXIsIHRoaXMuaWQsIHRoaXMudGl0bGUsIFwiVGl0bGUgU2VjdGlvblwiLCAodmFsKSA9PiB7dGhpcy50aXRsZT12YWw7fSwgXCJjb2wtbWQtNFwiICk7XG4gICAgICAgIHRoaXMuY29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQobm9kZUhlYWRlcik7XG5cbiAgICAgICAgdGhpcy5ibG9ja3MuZm9yRWFjaCggKGJsazpCbG9jaykgPT4ge1xuICAgICAgICAgICAgbGV0IGRlbEJ0biA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XCJjbGFzc1wiOlwiZm9ybS1idWlsZGVyLWJ0biBidXR0b24tZGVsZXRlXCIsIFwidHlwZVwiOlwiYnV0dG9uXCIsIFwic3R5bGVcIjpcImRpc3BsYXk6YmxvY2tcIn0pO1xuICAgICAgICAgICAgZGVsQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhIGZhLXRyYXNoXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPic7IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBibGsubm9kZS5hcHBlbmRDaGlsZChkZWxCdG4pO1xuXG4gICAgICAgICAgICBibGsuYnVpbGQodGhpcy5jb250ZW50V3JhcHBlciwgZGVsQnRuKTtcblxuICAgICAgICAgICAgLy8gQlVJTEQgREVMRVRFIEJPTENLIEJUTiBBQ1RJT05cbiAgICAgICAgICAgIGRlbEJ0bi5vbmNsaWNrID0gKGV2ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyLnJlbW92ZUNoaWxkKGJsay5ub2RlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJsb2NrcyA9IHRoaXMuYmxvY2tzLmZpbHRlcihmdW5jdGlvbihlbCkgeyByZXR1cm4gZWwuaWQgIT0gYmxrLmlkOyB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgLy8gQlVJTEQgQUREIEJPTENLIEJUTlxuICAgICAgICBsZXQgYWRkQnV0dG9uID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XCJjbGFzc1wiOlwiYnRuIGJ0bi1zdWNjZXNzIGZvcm0tYnVpbGRlci1idG5cIiwgXCJ0eXBlXCI6XCJidXR0b25cIn0pOyAgXG4gICAgICAgIGFkZEJ1dHRvbi5pbm5lckhUTUwgPSAnKyc7ICBcbiAgICAgICAgYWRkQnV0dG9uLm9uY2xpY2sgPSAoZXYpID0+IFxuICAgICAgICB7ICAgXG4gICAgICAgICAgICBsZXQgYnRuQmxrQWRkID0gPEhUTUxFbGVtZW50PmV2LnRhcmdldDtcbiAgICAgICAgICAgIC8vIEFERCBORVcgQk9MQ0tcbiAgICAgICAgICAgIGxldCBibGsgPSBuZXcgQmxvY2sobnVsbCk7XG4gICAgICAgICAgICB0aGlzLmJsb2Nrcy5wdXNoKGJsayk7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyLnJlbW92ZUNoaWxkKGJ0bkJsa0FkZCk7XG4gICAgICAgICAgICBsZXQgYnRuU2VjRGVsO1xuICAgICAgICAgICAgaWYodGhpcy5jYWxsYmFjayl7XG4gICAgICAgICAgICAgICAgYnRuU2VjRGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG4tZGVsZXRlLXNlY3Rpb24tXCIrdGhpcy5pZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50V3JhcHBlci5yZW1vdmVDaGlsZChidG5TZWNEZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxrLmJ1aWxkKHRoaXMuY29udGVudFdyYXBwZXIsIGZhbHNlLCBcIlwiKTtcbiAgICAgICAgICAgIC8vIEJVSUxEIERFTEVURSBCT0xDSyBCVE5cbiAgICAgICAgICAgIGxldCBidG5CbGtEZWwgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1wiY2xhc3NcIjpcImZvcm0tYnVpbGRlci1idG4gYnV0dG9uLWRlbGV0ZSBmbG9hdC1yaWdodFwiLCBcInR5cGVcIjpcImJ1dHRvblwiLCBcInN0eWxlXCI6XCJkaXNwbGF5OmJsb2NrXCJ9KTtcbiAgICAgICAgICAgIGJ0bkJsa0RlbC5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYSBmYS10cmFzaFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nOyAgXG4gICAgICAgICAgICBidG5CbGtEZWwub25jbGljayA9IChldiA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50V3JhcHBlci5yZW1vdmVDaGlsZChibGsubm9kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5ibG9ja3MgPSB0aGlzLmJsb2Nrcy5maWx0ZXIoZnVuY3Rpb24oZWwpIHsgcmV0dXJuIGVsLmlkICE9IGJsay5pZDsgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJsay5oZWFkZXIuaW5zZXJ0QmVmb3JlKGJ0bkJsa0RlbCwgYmxrLmhlYWRlci5maXJzdENoaWxkKTtcblxuICAgICAgICAgICAgdGhpcy5jb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZChidG5CbGtBZGQpO1xuICAgICAgICAgICAgaWYodGhpcy5jYWxsYmFjayl7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZChidG5TZWNEZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9OyAgXG4gICAgICAgIHRoaXMuY29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQoYWRkQnV0dG9uKTtcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKHRoaXMuY29udGVudFdyYXBwZXIpO1xuXG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKTtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogUnVuIHRoZSBmb3JtIGZvciB1c2VyIHRvIGFuc3dlclxuICAgICAqIEBwYXJhbSBub2RlIFxuICAgICAqL1xuICAgIHJ1bihub2RlKXtcblxuICAgICAgICB0aGlzLm5vZGUgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInJvdyBwaXhpdW0tYm94XCJcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBuYW1lTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcbiAgICAgICAgbmFtZU5vZGUuaW5uZXJIVE1MID0gdGhpcy50aXRsZTtcbiAgICAgICAgbGV0IGhyTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoclwiKTtcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKG5hbWVOb2RlKTtcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGhyTmFtZSk7XG5cbiAgICAgICAgdGhpcy5ibG9ja3MuZm9yRWFjaCggKGIpID0+IHtcbiAgICAgICAgICAgIGIucnVuKHRoaXMubm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdub2RlLnNpbmdsZVNlY3Rpb24nKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5jYWxsYmFjayk7XG4gICAgICAgIGlmKHRoaXMuY2FsbGJhY2spe1xuICAgICAgICAgICAgLy8gQlVJTEQgVEhFIEJVVFRPTi4gUFJFVklPVVMgQlVUVE9OIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICBsZXQgcHJldkJ1dHRvbiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1wiY2xhc3NcIjpcImJ0biBidG4taW5mbyBmb3JtLWJ1aWxkZXItYnRuXCIsIFwiaWRcIjogXCJidG4tcHJldmlvdXMtc2VjdGlvbi1cIit0aGlzLmlkLCBcInR5cGVcIjpcImJ1dHRvblwifSk7ICBcbiAgICAgICAgICAgIHByZXZCdXR0b24uaW5uZXJUZXh0ID0gXCJQcmV2aW91c1wiO1xuICAgICAgICAgICAgcHJldkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyAgXG4gICAgICAgICAgICBwcmV2QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiBcbiAgICAgICAgICAgIHsgICBcbiAgICAgICAgICAgICAgICBpZih0aGlzLmNhbGxiYWNrKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gVFJVRSBGT1IgTkVYVCBTTElERVxuICAgICAgICAgICAgICAgICAgICAvLyBGQUxTRSBGT1IgUFJFViBTTElERVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9OyAgXG4gICAgICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQocHJldkJ1dHRvbik7XG5cbiAgICAgICAgICAgIC8vIEJVSUxEIFRIRSBCVVRUT04uIE5FWFQgQlVUVE9OIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICBsZXQgbmV4dEJ1dHRvbiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1wiY2xhc3NcIjpcImJ0biBidG4taW5mbyBmb3JtLWJ1aWxkZXItYnRuXCIsIFwiaWRcIjogXCJidG4tbmV4dC1zZWN0aW9uLVwiK3RoaXMuaWQsIFwidHlwZVwiOlwiYnV0dG9uXCJ9KTsgIFxuICAgICAgICAgICAgbmV4dEJ1dHRvbi5pbm5lclRleHQgPSBcIk5leHRcIjsgIFxuICAgICAgICAgICAgbmV4dEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gXG4gICAgICAgICAgICB7ICAgXG4gICAgICAgICAgICAgICAgaWYodGhpcy5pc0NvbXBsZXRlZCgpKXtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5jYWxsYmFjayl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUUlVFIEZPUiBORVhUIFNMSURFXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGQUxTRSBGT1IgUFJFViBTTElERVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBhbGVydChcIlBsZWFzZSBjb21wbGV0ZSB0aGUgZm9ybS4uLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9OyAgXG4gICAgICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQobmV4dEJ1dHRvbik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm5vZGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKTtcbiAgICB9XG5cblxuICAgIGNsZWFyKCl7XG4gICAgICAgIGlmKHRoaXMubm9kZSl7XG4gICAgICAgICAgICB0aGlzLm5vZGUuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ibG9ja3MuZm9yRWFjaCggKGJsaykgPT4ge1xuICAgICAgICAgICAgYmxrLmNsZWFyKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldE5vZGUoKXtcbiAgICAgICAgYWxlcnQodGhpcy5ub2RlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlIHRoZSBjdXJyZW50IHNlY3Rpb25cbiAgICAgKi9cbiAgICBzaG93KCl7XG4gICAgICAgIHRoaXMubm9kZS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc3BsYXkgdGhlIGN1cnJlbnQgc2VjdGlvbiBvbiBzY3JlZW5cbiAgICAgKi9cbiAgICBoaWRlKCl7XG4gICAgICAgIHRoaXMubm9kZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciB0aGUgRk9STSBoYXMgYmVlbiBmdWxseSBjb21wbGV0ZWQgLSBBbGwgYmxvY2tzIGhhdmUgYSB2YWxpZCBhbnN3ZXJcbiAgICAgKi9cbiAgICBpc0NvbXBsZXRlZCgpe1xuICAgICAgICBsZXQgaXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmJsb2Nrcy5mb3JFYWNoKCAoYmxrOkJsb2NrKT0+e1xuICAgICAgICAgICAgY29uc29sZS5sb2coYmxrLmFuc3dlcik7XG4gICAgICAgICAgICBpZihibGsgJiYgKGJsay5hbnN3ZXIubGVuZ3RoPT0wKSAmJiAoYmxrLnR5cGUgIT09IEJsb2NrVHlwZS5OT0FOU1dFUikpe1xuICAgICAgICAgICAgICAgIGlzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaXNDb21wbGV0ZWQ7XG4gICAgfVxuXG5cbiAgICBjb21waWxlSnNvbigpe1xuICAgICAgICBsZXQgYXJyOmFueVtdO1xuICAgICAgICBhcnIgPSBbXTtcbiAgICAgICAgdGhpcy5ibG9ja3MuZm9yRWFjaCggKGJsazpCbG9jaykgPT4ge1xuICAgICAgICAgICAgYXJyLnB1c2goYmxrLmNvbXBpbGVKc29uKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHNlYyA9IHtcbiAgICAgICAgICAgIFwidGl0bGVcIjogdGhpcy50aXRsZSxcbiAgICAgICAgICAgIFwiYmxvY2tzXCI6YXJyXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlYztcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJMaWJyYXJ5XCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3JlbWl0YWNoZS9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9ibG9jay50c1wiKTsiLCJpbXBvcnQge0J1aWxkZXJ9IGZyb20gXCIuLi9idWlsZGVyXCI7XG5pbXBvcnQge0Nob2ljZX0gZnJvbSBcIi4vY2hvaWNlXCI7XG5cbmltcG9ydCB7QmxvY2tTbGlkZXJ9IGZyb20gXCIuL2Jsb2NrU2xpZGVyXCI7XG5pbXBvcnQge0Jsb2NrRnJlZXRleHR9IGZyb20gXCIuL2Jsb2NrRnJlZXRleHRcIjtcbmltcG9ydCB7QmxvY2tSYWRpb30gZnJvbSBcIi4vYmxvY2tSYWRpb1wiO1xuaW1wb3J0IHsgQmxvY2tDaGVja2JveCB9IGZyb20gXCIuL2Jsb2NrQ2hlY2tib3hcIjtcbmltcG9ydCB7QmxvY2tMb25ndGV4dH0gZnJvbSBcIi4vYmxvY2tMb25ndGV4dFwiO1xuaW1wb3J0IHtCbG9ja1RhZ3N9IGZyb20gXCIuL0Jsb2NrVGFnc1wiO1xuLy8gaW1wb3J0IHtCbG9ja05vYW5zd2VyfSBmcm9tIFwiLi9ibG9ja05vYW5zd2VyXCI7XG5cbmV4cG9ydCBlbnVtIEJsb2NrVHlwZSB7XG4gICAgRlJFRVRFWFQgPSAxLFxuICAgIFJBRElPID0gMixcbiAgICBTTElERVIgPSAzLFxuICAgIENIRUNLQk9YID0gNCxcbiAgICBMT05HVEVYVCA9IDUsXG4gICAgTk9BTlNXRVIgPSA2LFxuICAgIFRBR1MgPSA3XG59XG5cblxuLyoqXG4gKiBBIEJsb2NrIGlzIGEgbGlzdCBcbiAqL1xuZXhwb3J0IGNsYXNzIEJsb2Nre1xuICAgIHR5cGU6bnVtYmVyO1xuICAgIHRleHQ6c3RyaW5nO1xuICAgIGFuc3dlcjphbnk7XG4gICAgbWluOnN0cmluZztcbiAgICBtYXg6c3RyaW5nO1xuICAgIHN0ZXA6c3RyaW5nO1xuICAgIGNob2ljZXM6Q2hvaWNlW107XG5cbiAgICBoZWFkZXI6SFRNTEVsZW1lbnQ7XG5cbiAgICBvdXRwdXQ6c3RyaW5nO1xuICAgIGlkOnN0cmluZztcbiAgICBqc29uOmFueTtcblxuICAgIG5vZGU6IEhUTUxFbGVtZW50O1xuXG4gICAgLypcbiAgICBcInRpdGxlXCI6IFwiREVMRUdBVElPTjogPGJyPiA8YnI+IEhvdyBza2lsbGVkIGRvIHlvdSBmZWVsIHRvZGF5IGFib3V0IHlvdXIgYWJpbGl0eSB0byBkZWxlZ2F0ZT9cIixcbiAgICBcInR5cGVcIjogNCxcbiAgICBcImdyb3VwXCI6IDEsXG4gICAgXCJsYWJlbFwiOiBcbiAgICAqL1xuXG4gICAgY29uc3RydWN0b3IoX2pzb246Rm9ybURhdGEgPSBudWxsKXtcbiAgICAgICAgdGhpcy5qc29uID0gX2pzb247XG4gICAgICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gICAgICAgIHRoaXMudHlwZSA9IDE7XG4gICAgICAgIHRoaXMubWluID0gXCJcIjtcbiAgICAgICAgdGhpcy5tYXggPSBcIlwiO1xuICAgICAgICB0aGlzLnN0ZXAgPSBcIlwiO1xuICAgICAgICB0aGlzLmFuc3dlciA9IFwiXCI7XG4gICAgICAgIHRoaXMuY2hvaWNlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNyk7XG5cbiAgICAgICAgaWYoX2pzb24pe1xuICAgICAgICAgICAgaWYoX2pzb25bXCJ0ZXh0XCJdKXtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBfanNvbltcInRleHRcIl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKF9qc29uW1widHlwZVwiXSl7XG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gX2pzb25bXCJ0eXBlXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFuc3dlciA9IFwiXCI7XG4gICAgICAgICAgICBpZihfanNvbltcImFuc3dlclwiXSl7XG4gICAgICAgICAgICAgICAgdGhpcy5hbnN3ZXIgPSBfanNvbltcImFuc3dlclwiXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoX2pzb25bXCJtaW5cIl0pe1xuICAgICAgICAgICAgICAgIHRoaXMubWluID0gX2pzb25bXCJtaW5cIl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihfanNvbltcIm1heFwiXSl7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXggPSBfanNvbltcIm1heFwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKF9qc29uW1wic3RlcFwiXSl7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGVwID0gX2pzb25bXCJzdGVwXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZih0aGlzLnR5cGUgPT09IEJsb2NrVHlwZS5SQURJTyB8fCB0aGlzLnR5cGUgPT09IEJsb2NrVHlwZS5DSEVDS0JPWCl7XG4gICAgICAgICAgICAgICAgLy8gbG9hZCBhZGRpdGlvbmFsIGRhdGFcbiAgICAgICAgICAgICAgICBpZihfanNvbltcImNob2ljZXNcIl0pe1xuICAgICAgICAgICAgICAgICAgICBfanNvbltcImNob2ljZXNcIl0uZm9yRWFjaChjaG9pY2VKc29uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaG9pY2UgPSBuZXcgQ2hvaWNlKGNob2ljZUpzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaG9pY2VzLnB1c2goY2hvaWNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vdGhpcy5jaG9pY2VzID0gX2pzb25bXCJjaG9pY2VzXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBhbmQgcmVtb3ZlIGFsbCB0aGUgSFRNTCBOb2RlXG4gICAgICovXG4gICAgY2xlYXIoKXtcbiAgICAgICAgaWYodGhpcy5ub2RlKXtcbiAgICAgICAgICAgIHRoaXMubm9kZS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gYnVpbGQgdGhlIGZvcm1cbiAgICAgKi9cbiAgICBidWlsZChub2RlLCBkZWxCdG4gPSBudWxsLCBjbGFzc2VzOnN0cmluZyA9IFwiY29sbGFwc2VcIil7XG4gICAgICAgIHRoaXMubm9kZSA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCIgOiBcInJvdyBwaXhpdW0tYmxvY2stYnVpbGRcIlxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBsZXQgaHIgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJoclwiLCB7XG4gICAgICAgIC8vICAgICBcImNsYXNzXCI6IFwicGl4aXVtLWhyIGNvbC1tZC0xMlwiXG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIC8vIGxldCBoZWFkZXJCb3ggPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAvLyAgICAgXCJpZFwiOiBcImhlYWRlcl9ib3hcIit0aGlzLmlkLFxuICAgICAgICAvLyAgICAgXCJjbGFzc1wiOiBcImNvbGxhcHNlXCJcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgbGV0IG5vZGVDb250ZW50ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICdjbGFzcyc6ICdjb2wtbWQtMTIgJytjbGFzc2VzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaGVhZGVyID0gQnVpbGRlci5hZGRCb3hIZWFkZXIodGhpcy5ub2RlLCB0aGlzLmlkLCBub2RlQ29udGVudCwgZGVsQnRuKTtcbiAgICAgICAgQnVpbGRlci5hZGRCdWlsZGVySW5wdXRUZXh0KHRoaXMuaGVhZGVyLCB0aGlzLmlkLCB0aGlzLnRleHQsIFwiVGV4dFwiLCAodmFsKSA9PiB7dGhpcy50ZXh0PXZhbDt9LCBcImNvbC1tZC02XCIgKTtcblxuICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQobm9kZUNvbnRlbnQpO1xuXG4gICAgXG4gICAgICAgIGxldCBlbnVtQXJyYXkgPSBPYmplY3Qua2V5cyhCbG9ja1R5cGUpLmZpbHRlcihhPT5hLm1hdGNoKC9eXFxELykpLm1hcChuYW1lPT4oe25hbWUsIHZhbHVlOiBCbG9ja1R5cGVbbmFtZV0gYXMgbnVtYmVyfSkpO1xuICAgICAgICBCdWlsZGVyLmFkZEJ1aWxkZXJJbnB1dERyb3Bkb3duKG5vZGVDb250ZW50LCB0aGlzLmlkLCB0aGlzLnR5cGUsIFwiVHlwZVwiLCAodmFsKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnR5cGU9TnVtYmVyKHZhbCk7XG4gICAgICAgICAgICB0aGlzLmFuc3dlcj0nJztcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlclN1YkVsZW1lbnRCbG9jaygpO1xuICAgICAgICAgICAgXG4gICAgICAgIH0sIGVudW1BcnJheSwgXCJjb2wtbWQtNFwiICk7XG5cbiAgICAgICAgLy8gLS0tLSBGaWVsZCBmb3IgQ2hvaWNlcyBibG9ja1xuICAgICAgICBsZXQgYmxrQ2hvaWNlc1N0eWxlID0gXCJcIjtcbiAgICAgICAgaWYoKHRoaXMudHlwZSAhPT0gQmxvY2tUeXBlLlJBRElPKSAmJiAodGhpcy50eXBlICE9PSBCbG9ja1R5cGUuQ0hFQ0tCT1gpKXtcbiAgICAgICAgICAgIGJsa0Nob2ljZXNTdHlsZSA9IFwiZGlzcGxheTpub25lO1wiXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5vZGVDaG9pY2VzID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJjaG9pY2VzX2Jsb2NrX1wiK3RoaXMuaWQsXG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicm93IGNvbC1tZC0xMlwiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBibGtDaG9pY2VzU3R5bGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGxhYlRpdGxlID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIGxhYlRpdGxlLmlubmVySFRNTCA9IFwiQ2hvaWNlcyA6IFwiO1xuICAgICAgICBub2RlQ2hvaWNlcy5hcHBlbmRDaGlsZChsYWJUaXRsZSk7XG4gICAgICAgIGlmKHRoaXMuY2hvaWNlcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgIHRoaXMuY2hvaWNlcy5mb3JFYWNoKCAoY2g6Q2hvaWNlKSA9PiB7XG4gICAgICAgICAgICAgICAgY2guYnVpbGQobm9kZUNob2ljZXMpO1xuICAgICAgICAgICAgICAgIC8vIEJVSUxEIERFTEVURSBCT0xDSyBCVE5cbiAgICAgICAgICAgICAgICBsZXQgZGVsQnRuID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcImNsYXNzXCI6XCJidG4gYnRuLWRhbmdlciBmb3JtLWJ1aWxkZXItYnRuXCIsIFwidHlwZVwiOlwiYnV0dG9uXCJ9KTtcbiAgICAgICAgICAgICAgICBkZWxCdG4uaW5uZXJUZXh0ID0gJy0nOyAgXG4gICAgICAgICAgICAgICAgZGVsQnRuLm9uY2xpY2sgPSAoZXYgPT4ge1xuICAgICAgICAgICAgICAgICAgICBub2RlQ2hvaWNlcy5yZW1vdmVDaGlsZChjaC5ub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaG9pY2VzID0gdGhpcy5jaG9pY2VzLmZpbHRlcihmdW5jdGlvbihlbCkgeyByZXR1cm4gZWwuaWQgIT0gY2guaWQ7IH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNoLm5vZGUuYXBwZW5kQ2hpbGQoZGVsQnRuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQlVJTEQgQUREIEJPTENLIEJUTlxuICAgICAgICBsZXQgYWRkQ2hvaWNlQnV0dG9uID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XCJjbGFzc1wiOlwiYnRuIGJ0bi1zdWNjZXNzIGZvcm0tYnVpbGRlci1idG5cIiwgXCJ0eXBlXCI6XCJidXR0b25cIn0pOyAgXG4gICAgICAgIGFkZENob2ljZUJ1dHRvbi5pbm5lclRleHQgPSAnKyc7ICBcbiAgICAgICAgYWRkQ2hvaWNlQnV0dG9uLm9uY2xpY2sgPSAoZXYpID0+IFxuICAgICAgICB7ICAgXG4gICAgICAgICAgICBsZXQgYnRuQ2hBZGQgPSA8SFRNTEVsZW1lbnQ+ZXYudGFyZ2V0O1xuICAgICAgICAgICAgLy8gQUREIE5FVyBCT0xDS1xuICAgICAgICAgICAgbGV0IGNoID0gbmV3IENob2ljZShudWxsKTtcbiAgICAgICAgICAgIHRoaXMuY2hvaWNlcy5wdXNoKGNoKTtcbiAgICAgICAgICAgIG5vZGVDaG9pY2VzLnJlbW92ZUNoaWxkKGJ0bkNoQWRkKTtcbiAgICAgICAgICAgIGNoLmJ1aWxkKG5vZGVDaG9pY2VzKTtcbiAgICAgICAgICAgIC8vIEJVSUxEIERFTEVURSBCT0xDSyBCVE5cbiAgICAgICAgICAgIGxldCBidG5DaERlbCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XCJjbGFzc1wiOlwiYnRuIGJ0bi1kYW5nZXIgZm9ybS1idWlsZGVyLWJ0blwiLCBcInR5cGVcIjpcImJ1dHRvblwifSk7XG4gICAgICAgICAgICBidG5DaERlbC5pbm5lclRleHQgPSAnLSc7ICBcbiAgICAgICAgICAgIGJ0bkNoRGVsLm9uY2xpY2sgPSAoZXYgPT4ge1xuICAgICAgICAgICAgICAgIG5vZGVDaG9pY2VzLnJlbW92ZUNoaWxkKGNoLm5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hvaWNlcyA9IHRoaXMuY2hvaWNlcy5maWx0ZXIoZnVuY3Rpb24oZWwpIHsgcmV0dXJuIGVsLmlkICE9IGNoLmlkOyB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2gubm9kZS5hcHBlbmRDaGlsZChidG5DaERlbCk7XG5cbiAgICAgICAgICAgIG5vZGVDaG9pY2VzLmFwcGVuZENoaWxkKGJ0bkNoQWRkKTtcbiAgICAgICAgfTsgIFxuICAgICAgICBub2RlQ2hvaWNlcy5hcHBlbmRDaGlsZChhZGRDaG9pY2VCdXR0b24pO1xuXG4gICAgICAgIG5vZGVDb250ZW50LmFwcGVuZENoaWxkKG5vZGVDaG9pY2VzKTtcbiAgICAgICAgLy8gLS0tLSBcblxuICAgICAgICAvLyAtLS0tIEZpZWxkIGZvciBTbGlkZXIgYmxvY2tcbiAgICAgICAgbGV0IGJsa1NsaWRlclN0eWxlID0gXCJcIjtcbiAgICAgICAgaWYodGhpcy50eXBlICE9PSBCbG9ja1R5cGUuU0xJREVSKXtcbiAgICAgICAgICAgIGJsa1NsaWRlclN0eWxlID0gXCJkaXNwbGF5Om5vbmU7XCJcbiAgICAgICAgfVxuICAgICAgICBsZXQgbm9kZVNsaWRlciA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBcImlkXCI6IFwic2xpZGVyX2Jsb2NrX1wiK3RoaXMuaWQsXG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicm93IGNvbC1tZC0xMlwiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBibGtTbGlkZXJTdHlsZVxuICAgICAgICB9KTtcbiAgICAgICAgQnVpbGRlci5hZGRCdWlsZGVySW5wdXRUZXh0KG5vZGVTbGlkZXIsIHRoaXMuaWQsIHRoaXMubWluLCBcIk1pblwiLCAodmFsKSA9PiB7dGhpcy5taW49dmFsO30sIFwiY29sLW1kLTRcIiApO1xuICAgICAgICBCdWlsZGVyLmFkZEJ1aWxkZXJJbnB1dFRleHQobm9kZVNsaWRlciwgdGhpcy5pZCwgdGhpcy5tYXgsIFwiTWF4XCIsICh2YWwpID0+IHt0aGlzLm1heD12YWw7fSwgXCJjb2wtbWQtNFwiICk7XG4gICAgICAgIEJ1aWxkZXIuYWRkQnVpbGRlcklucHV0VGV4dChub2RlU2xpZGVyLCB0aGlzLmlkLCB0aGlzLnN0ZXAsIFwiU3RlcFwiLCAodmFsKSA9PiB7dGhpcy5zdGVwPXZhbDt9LCBcImNvbC1tZC00XCIgKTtcbiAgICAgICAgbm9kZUNvbnRlbnQuYXBwZW5kQ2hpbGQobm9kZVNsaWRlcik7XG4gICAgICAgIC8vIC0tLS1cblxuICAgICAgICAvLyB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoaHIpO1xuICAgICAgICBub2RlLmFwcGVuZENoaWxkKHRoaXMubm9kZSk7XG4gICAgfVxuXG4gICAgXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIFJ1biB0aGUgZm9ybVxuICAgICAqL1xuICAgIHJ1bihub2RlKXtcbiAgICAgICAgLy8gYWxlcnQoXCJDXCIpO1xuICAgICAgICBsZXQgdGl0bGVOb2RlID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwicFwiKTsgLy9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgdGl0bGVOb2RlLmlubmVySFRNTCA9IHRoaXMudGV4dDtcbiAgICAgICAgdGhpcy5ub2RlID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQodGl0bGVOb2RlKTtcblxuICAgICAgICBzd2l0Y2godGhpcy50eXBlKXtcbiAgICAgICAgICAgIGNhc2UgQmxvY2tUeXBlLlJBRElPOlxuICAgICAgICAgICAgICAgIEJsb2NrUmFkaW8ucnVuKHRoaXMubm9kZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgQmxvY2tUeXBlLkNIRUNLQk9YOlxuICAgICAgICAgICAgICAgIEJsb2NrQ2hlY2tib3gucnVuKHRoaXMubm9kZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgQmxvY2tUeXBlLkZSRUVURVhUOlxuICAgICAgICAgICAgICAgIEJsb2NrRnJlZXRleHQucnVuKHRoaXMubm9kZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlIEJsb2NrVHlwZS5MT05HVEVYVDpcbiAgICAgICAgICAgICAgICBCbG9ja0xvbmd0ZXh0LnJ1bih0aGlzLm5vZGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEJsb2NrVHlwZS5OT0FOU1dFUjpcbiAgICAgICAgICAgICAgICAvLyBCbG9ja05vYW5zd2VyLnJ1bih0aGlzLm5vZGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEJsb2NrVHlwZS5TTElERVI6XG4gICAgICAgICAgICAgICAgQmxvY2tTbGlkZXIucnVuKHRoaXMubm9kZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgQmxvY2tUeXBlLlRBR1M6XG4gICAgICAgICAgICAgICAgQmxvY2tUYWdzLnJ1bih0aGlzLm5vZGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgaHIgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJoclwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicGl4aXVtLWhyXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChocik7XG5cbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpO1xuICAgIH1cblxuXG4gICAgZGlzcGxheSgpe1xuICAgIH1cblxuXG5cbiAgICB0cmlnZ2VyU3ViRWxlbWVudEJsb2NrKCl7XG4gICAgICAgIGxldCBzbGlkZXJCbG9jayA9IG51bGw7XG4gICAgICAgIGlmKHNsaWRlckJsb2NrID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzbGlkZXJfYmxvY2tfXCIrdGhpcy5pZCkpe1xuICAgICAgICAgICAgaWYodGhpcy50eXBlID09PSBCbG9ja1R5cGUuU0xJREVSKXtcbiAgICAgICAgICAgICAgICBzbGlkZXJCbG9jay5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgc2xpZGVyQmxvY2suc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGFsZXJ0KFwiTm9kZSBTaWxkZXIgbm90IGZvdW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNob2ljZUJsb2NrID0gbnVsbDtcbiAgICAgICAgaWYoY2hvaWNlQmxvY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNob2ljZXNfYmxvY2tfXCIrdGhpcy5pZCkpe1xuICAgICAgICAgICAgaWYoKHRoaXMudHlwZSA9PT0gQmxvY2tUeXBlLlJBRElPKSB8fCAodGhpcy50eXBlID09PSBCbG9ja1R5cGUuQ0hFQ0tCT1gpKXtcbiAgICAgICAgICAgICAgICBjaG9pY2VCbG9jay5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgY2hvaWNlQmxvY2suc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGFsZXJ0KFwiTm9kZSBDaG9pY2Ugbm90IGZvdW5kXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBjb21waWxlSnNvbigpe1xuICAgICAgICBsZXQgYXJyOmFueVtdO1xuICAgICAgICBhcnIgPSBbXTtcbiAgICAgICAgdGhpcy5jaG9pY2VzLmZvckVhY2goIChjaDpDaG9pY2UpID0+IHtcbiAgICAgICAgICAgIGFyci5wdXNoKGNoLmNvbXBpbGVKc29uKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5qc29uID0ge1xuICAgICAgICAgICAgXCJ0eXBlXCI6dGhpcy50eXBlLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6dGhpcy50ZXh0LFxuICAgICAgICAgICAgXCJhbnN3ZXJcIjp0aGlzLmFuc3dlcixcbiAgICAgICAgICAgIFwibWluXCI6dGhpcy5taW4sXG4gICAgICAgICAgICBcIm1heFwiOnRoaXMubWF4LFxuICAgICAgICAgICAgXCJzdGVwXCI6dGhpcy5zdGVwLFxuICAgICAgICAgICAgXCJjaG9pY2VzXCI6IGFyclxuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVybiB0aGlzLmpzb247XG4gICAgfVxufSIsIlxuZXhwb3J0IGNsYXNzIEJ1aWxkZXJ7XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBhbmQgc2V0IGFsbCB0aGUgYXR0cmlidXRlIG9mIGEgSFRNTCBFbGVtZW50IG5vZGVcbiAgICAgKiBAcGFyYW0gdHlwZSBUaGUgdHlwZSBvZiB0aGUgaW5wdXQgdG8gY3JlYXRlXG4gICAgICogQHBhcmFtIF9wYXJhbXMgVGhlIGF0dHJpYnV0ZXMgbGlzdCB0byBzZXRcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlRWxlbWVudCh0eXBlOnN0cmluZywgX3BhcmFtczphbnkgPSBudWxsKXtcbiAgICAgICAgaWYoIXR5cGUpe1xuICAgICAgICAgICAgYWxlcnQoXCJDb3VsZCBub3QgYnVpbGQgdGhlIGVsZW1lbnRcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gICAgICAgIGlmKF9wYXJhbXMpe1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIF9wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfcGFyYW1zW2tleV07XG4gICAgICAgICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gd2lsbCBzZXQgYWxsIGF0dHJpYnV0ZSBpbnRvIGEgc3BlY2lmaWMgZWxlbWVudFxuICAgICAqIEBwYXJhbSBlbGVtIEVsZW1lbnQgdG8gc2V0IHRlIGF0dHJpYnV0ZSBvZlxuICAgICAqIEBwYXJhbSBfcGFyYW1zIFRoZSBhdHRyaWJ1dGVzIGxpc3QgdG8gc2V0XG4gICAgICovXG4gICAgc3RhdGljIHNldEF0dHJpYnV0ZXMoZWxlbTpIVE1MRWxlbWVudCwgX3BhcmFtczphbnkgPSBudWxsKXtcbiAgICAgICAgaWYoX3BhcmFtcyl7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gX3BhcmFtcykge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9wYXJhbXNba2V5XTtcbiAgICAgICAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgc3RhdGljIGFkZEJ1aWxkZXJJbnB1dFRleHQobm9kZSwgaWQsIHZhbHVlLCBsYWJlbCwgY2FsbGJhY2ssIGNsYXNzZXM9XCJjb2wtbWQtMTJcIil7XG4gICAgICAgIGxldCBkaXYgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS1yb3ctYmxvY2sgXCIrY2xhc3Nlc1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gbGV0IGxhYiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICAvLyBsYWIuaW5uZXJIVE1MID0gbGFiZWwrXCI6IFwiO1xuICAgICAgICBsZXQgaW5wdXQgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicGl4aXVtLXRleHRib3hcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogdmFsdWUsXG4gICAgICAgICAgICBcIm5hbWVcIjogbGFiZWwrXCJfXCIraWQsXG4gICAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6IGxhYmVsXG4gICAgICAgIH0pO1xuICAgICAgICBpbnB1dC5vbmJsdXIgPSAoZXYpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2LnRhcmdldCk7XG4gICAgICAgICAgICBjYWxsYmFjaygoPEhUTUxJbnB1dEVsZW1lbnQ+ZXYudGFyZ2V0KS52YWx1ZSk7XG4gICAgICAgIH07IFxuICAgICAgICAvL2Rpdi5hcHBlbmRDaGlsZChsYWIpO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICBub2RlLmFwcGVuZENoaWxkKGRpdik7XG4gICAgfVxuXG5cbiAgICBzdGF0aWMgYWRkQm94SGVhZGVyKG5vZGUsIGlkLCBzdWJFbGVtZW50LCBkZWxCdG4pe1xuICAgICAgICBsZXQgZGl2ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJjb2wtbWQtMTIgYmxvY2staGVhZGVyIGJsb2NrLWhlYWRlci1cIitpZCBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIHRoZSBkZWxldGUgYnV0dG9uIGluIHRoZSBoZWFkZXIgZGlyZWN0bHlcbiAgICAgICAgaWYoZGVsQnRuKXtcbiAgICAgICAgICAgIGRlbEJ0bi5jbGFzc05hbWUgKz0gXCIgZmxvYXQtcmlnaHRcIjtcbiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChkZWxCdG4pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGV5ZTEgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJpXCIsIHtcImNsYXNzXCI6XCJmYSBmYS1leWUgZmxvYXQtcmlnaHRcIiwgXCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifSk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChleWUxKTtcbiAgICAgICAgbGV0IGV5ZTIgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJpXCIsIHtcImNsYXNzXCI6XCJmYSBmYS1leWUtc2xhc2ggZmxvYXQtcmlnaHQgaGlkZGVuXCIsIFwiYXJpYS1oaWRkZW5cIjpcInRydWVcIn0pO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoZXllMik7XG5cbiAgICAgICAgXG4gICAgICAgIFxuXG5cbiAgICAgICAgZXllMS5vbmNsaWNrID0gKGV2KSA9PiB7XG4gICAgICAgICAgICBzdWJFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJjb2xsYXBzZVwiKTtcbiAgICAgICAgICAgIGV5ZTEuY2xhc3NMaXN0LnRvZ2dsZShcImhpZGRlblwiKTtcbiAgICAgICAgICAgIGV5ZTIuY2xhc3NMaXN0LnRvZ2dsZShcImhpZGRlblwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgZXllMi5vbmNsaWNrID0gKGV2KSA9PiB7XG4gICAgICAgICAgICBzdWJFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJjb2xsYXBzZVwiKTtcbiAgICAgICAgICAgIGV5ZTEuY2xhc3NMaXN0LnRvZ2dsZShcImhpZGRlblwiKTtcbiAgICAgICAgICAgIGV5ZTIuY2xhc3NMaXN0LnRvZ2dsZShcImhpZGRlblwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICBcblxuICAgICAgICAvLyBsZXQgbGFiID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIC8vIGxhYi5pbm5lckhUTUwgPSBsYWJlbDtcbiAgICAgICAgLy8gZGl2LmFwcGVuZENoaWxkKGxhYik7XG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgcmV0dXJuIGRpdjtcbiAgICB9XG5cbiAgICAvKlxuPHNlbGVjdCBuYW1lPVwiY2Fyc1wiIGlkPVwiY2Fyc1wiPlxuICA8b3B0aW9uIHZhbHVlPVwidm9sdm9cIj5Wb2x2bzwvb3B0aW9uPlxuICA8b3B0aW9uIHZhbHVlPVwic2FhYlwiPlNhYWI8L29wdGlvbj5cbiAgPG9wdGlvbiB2YWx1ZT1cIm1lcmNlZGVzXCI+TWVyY2VkZXM8L29wdGlvbj5cbiAgPG9wdGlvbiB2YWx1ZT1cImF1ZGlcIj5BdWRpPC9vcHRpb24+XG48L3NlbGVjdD5cbiAgICAqL1xuICAgIHN0YXRpYyBhZGRCdWlsZGVySW5wdXREcm9wZG93bihub2RlLCBpZCwgdmFsdWUsIGxhYmVsLCBjYWxsYmFjaywgb3B0aW9ucywgY2xhc3Nlcz1cImNvbC1tZC0xMlwiKXtcbiAgICAgICAgbGV0IGRpdiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicGl4aXVtLXJvdy1ibG9jayBcIitjbGFzc2VzXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgbGFiID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIGxhYi5pbm5lckhUTUwgPSBsYWJlbCtcIjogXCI7XG4gICAgICAgIGxldCBpbnB1dCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicGl4aXVtLWRyb3Bkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlLFxuICAgICAgICAgICAgXCJuYW1lXCI6IGxhYmVsK1wiX1wiK2lkLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcImRpc3BsYXk6YmxvY2tcIlxuICAgICAgICB9KTtcbiAgICAgICAgaW5wdXQub25jaGFuZ2UgPSAoZXYpID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCg8SFRNTElucHV0RWxlbWVudD5ldi50YXJnZXQpLnZhbHVlKTtcbiAgICAgICAgfTsgXG5cbiAgICAgICAgb3B0aW9ucy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgbGV0IG9wdCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiLCB7XG4gICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBlbGVtZW50LnZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZih2YWx1ZT09PWVsZW1lbnQudmFsdWUpe1xuICAgICAgICAgICAgICAgIEJ1aWxkZXIuc2V0QXR0cmlidXRlcyhvcHQsIHtcbiAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RlZFwiOlwic2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHQuaW5uZXJIVE1MID0gZWxlbWVudC5uYW1lO1xuICAgICAgICAgICAgaW5wdXQuYXBwZW5kQ2hpbGQob3B0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKGxhYik7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJMaWJyYXJ5XCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3JlbWl0YWNoZS9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9jaG9pY2UudHNcIik7IiwiXG5pbXBvcnQge0J1aWxkZXJ9IGZyb20gXCIuLi9idWlsZGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBDaG9pY2V7XG4gICAgbGFiZWw6c3RyaW5nO1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgaWQ6c3RyaW5nO1xuICAgIGpzb246YW55O1xuICAgIG5vZGU6IEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoX2pzb24pe1xuICAgICAgICB0aGlzLmlkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpO1xuXG4gICAgICAgIGlmKF9qc29uKXtcbiAgICAgICAgICAgIGlmKF9qc29uW1wibGFiZWxcIl0pe1xuICAgICAgICAgICAgICAgIHRoaXMubGFiZWwgPSBfanNvbltcImxhYmVsXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihfanNvbltcInZhbHVlXCJdKXtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gX2pzb25bXCJ2YWx1ZVwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gYnVpbGQgdGhlIGZvcm1cbiAgICAgKi9cbiAgICBidWlsZChub2RlKXtcbiAgICAgICAgdGhpcy5ub2RlID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwaXhpdW0tcm93LWJsb2NrIGJsb2NrLWNob2ljZXMgY29sLW1kLTEyXCIsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBDUkVBVEUgVkFMVUUgSU5QVVRcbiAgICAgICAgbGV0IGxhYlZhbHVlID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwge1wiZm9yXCI6XCJpbnB1dF9cIit0aGlzLnZhbHVlK1wiX1wiK3RoaXMuaWR9KTtcbiAgICAgICAgbGFiVmFsdWUuaW5uZXJIVE1MID0gXCJWYWx1ZSA6IFwiO1xuICAgICAgICBsZXQgaW5wdXRWYWx1ZSA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwaXhpdW0tdGV4dGJveFwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAodGhpcy52YWx1ZSkgPyB0aGlzLnZhbHVlIDogJycsXG4gICAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6ICdWYWx1ZScsXG4gICAgICAgICAgICBcImlkXCI6IFwiaW5wdXRfXCIrdGhpcy52YWx1ZStcIl9cIit0aGlzLmlkXG4gICAgICAgIH0pO1xuICAgICAgICBpbnB1dFZhbHVlLm9uYmx1ciA9IChldikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXYudGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMudmFsdWU9KDxIVE1MSW5wdXRFbGVtZW50PmV2LnRhcmdldCkudmFsdWU7XG4gICAgICAgIH07IFxuXG4gICAgICAgIC8vIENSRUFURSBMQUJFTCBJTlBVVFxuICAgICAgICBsZXQgbGFiTGFiZWwgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7XCJmb3JcIjpcImlucHV0X1wiK3RoaXMubGFiZWwrXCJfXCIrdGhpcy5pZCwgXCJzdHlsZVwiOlwibWluLXdpZHRoOiBhdXRvO1wifSk7XG4gICAgICAgIGxhYkxhYmVsLmlubmVySFRNTCA9IFwiTGFiZWwgOiBcIjtcbiAgICAgICAgbGV0IGlucHV0TGFiZWwgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicGl4aXVtLXRleHRib3hcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogKHRoaXMubGFiZWwpID8gdGhpcy5sYWJlbCA6ICcnLFxuICAgICAgICAgICAgXCJwbGFjZWhvbGRlclwiOiAnTGFiZWwnLFxuICAgICAgICAgICAgXCJpZFwiOlwiaW5wdXRfXCIrdGhpcy5sYWJlbCtcIl9cIit0aGlzLmlkXG4gICAgICAgIH0pO1xuICAgICAgICBpbnB1dExhYmVsLm9uYmx1ciA9IChldikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXYudGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMubGFiZWw9KDxIVE1MSW5wdXRFbGVtZW50PmV2LnRhcmdldCkudmFsdWU7XG4gICAgICAgIH07IFxuXG4gICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChsYWJWYWx1ZSk7XG4gICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChpbnB1dFZhbHVlKTtcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGxhYkxhYmVsKTtcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGlucHV0TGFiZWwpO1xuXG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKTtcbiAgICB9XG5cbiAgICBjb21waWxlSnNvbigpe1xuICAgICAgICB0aGlzLmpzb24gPSB7XG4gICAgICAgICAgICBcImxhYmVsXCI6dGhpcy5sYWJlbCxcbiAgICAgICAgICAgIFwidmFsdWVcIjp0aGlzLnZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuanNvbjtcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJMaWJyYXJ5XCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3JlbWl0YWNoZS9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9ibG9ja1NsaWRlci50c1wiKTsiLCJpbXBvcnQge0Jsb2NrfSBmcm9tIFwiLi9ibG9ja1wiO1xuaW1wb3J0IHtCdWlsZGVyfSBmcm9tIFwiLi4vYnVpbGRlclwiO1xuXG5leHBvcnQgY2xhc3MgQmxvY2tTbGlkZXJ7XG5cbiAgICBzdGF0aWMgcnVuKG5vZGUsIGJsb2NrOkJsb2NrKXtcbiAgICAgICAgbGV0IGhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGhvbGRlci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImVsZW1lbnQtZm9ybS1jb250YWluZXJcIik7XG4gICAgICAgIGxldCBmaWVsZCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXG4gICAgICAgIGxldCBtaW4gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjpcIl9sZWZ0XCJcbiAgICAgICAgfSk7XG4gICAgICAgIG1pbi5pbm5lckhUTUwgPSAoYmxvY2subWluKSA/IGJsb2NrLm1pbiA6ICcwJztcbiAgICAgICAgbGV0IG1heCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOlwiX3JpZ2h0XCJcbiAgICAgICAgfSk7O1xuICAgICAgICBtYXguaW5uZXJIVE1MID0gKGJsb2NrLm1heCkgPyBibG9jay5tYXggOiAnMTAwJztcblxuICAgICAgICAvLyA8b3V0cHV0IGZvcj1cImZvb1wiIG9uZm9ybWlucHV0PVwidmFsdWUgPSBmb28udmFsdWVBc051bWJlcjtcIj48L291dHB1dD5cblxuICAgICAgICAvL0Fzc2lnbiBkaWZmZXJlbnQgYXR0cmlidXRlcyB0byB0aGUgZWxlbWVudC4gXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdibG9jay5hbnN3ZXInKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYmxvY2suYW5zd2VyKTtcbiAgICAgICAgQnVpbGRlci5zZXRBdHRyaWJ1dGVzKGZpZWxkLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicGl4aXVtLXNsaWRlclwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmFuZ2VcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogKGJsb2NrLmFuc3dlcikgPyBibG9jay5hbnN3ZXIgOiAoKGJsb2NrLm1heCkgPyAoTnVtYmVyKGJsb2NrLm1heCkvMikgOiA1MCksXG4gICAgICAgICAgICBcIm1pblwiOiAoYmxvY2subWluKSA/IGJsb2NrLm1pbiA6IDAsXG4gICAgICAgICAgICBcIm1heFwiOiAoYmxvY2subWF4KSA/IGJsb2NrLm1heCA6IDEwMCxcbiAgICAgICAgICAgIFwiaWRcIjogXCJpbnB1dHJhbmdlX1wiK2Jsb2NrLmlkXG4gICAgICAgIH0pO1xuICAgICAgICBpZihibG9jay5zdGVwKXtcbiAgICAgICAgICAgIGZpZWxkLnNldEF0dHJpYnV0ZShcInN0ZXBcIiwgYmxvY2suc3RlcCk7XG4gICAgICAgIH1cbiAgICAgICAgZmllbGQub25jaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBibG9jay5hbnN3ZXIgPSBwYXJzZUZsb2F0KCg8SFRNTElucHV0RWxlbWVudD5maWVsZCkudmFsdWUpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYmxvY2suYW5zd2VyKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3V0cHV0X1wiK2Jsb2NrLmlkKS5pbm5lckhUTUwgPSBibG9jay5hbnN3ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaW5wdXREaXYgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGlucHV0RGl2LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicGl4aXVtLWJsb2NrLXNsaWRlclwiKTtcbiAgICAgICAgbGV0IG91dHB1dCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcIm91dHB1dFwiLCB7XG4gICAgICAgICAgICBcImlkXCI6IFwib3V0cHV0X1wiK2Jsb2NrLmlkXG4gICAgICAgIH0pO1xuICAgICAgICBvdXRwdXQuaW5uZXJIVE1MID0gKGJsb2NrLmFuc3dlcikgPyBibG9jay5hbnN3ZXIgOiAoKGJsb2NrLm1heCkgPyAoTnVtYmVyKGJsb2NrLm1heCkvMikgOiA1MCk7XG4gICAgICAgIGJsb2NrLmFuc3dlciA9IG91dHB1dC5pbm5lckhUTUw7XG4gICAgICAgIFxuICAgICAgICBpbnB1dERpdi5hcHBlbmRDaGlsZChvdXRwdXQpO1xuICAgICAgICBpbnB1dERpdi5hcHBlbmRDaGlsZChmaWVsZCk7XG4gICAgICAgIGlucHV0RGl2LmFwcGVuZENoaWxkKG1pbik7XG4gICAgICAgIGlucHV0RGl2LmFwcGVuZENoaWxkKG1heCk7IFxuICAgICAgICBob2xkZXIuYXBwZW5kQ2hpbGQoaW5wdXREaXYpO1xuXG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoaG9sZGVyKTtcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJMaWJyYXJ5XCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3JlbWl0YWNoZS9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9ibG9ja0ZyZWV0ZXh0LnRzXCIpOyIsImltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4uL2J1aWxkZXJcIjtcblxuZXhwb3J0IGNsYXNzIEJsb2NrRnJlZXRleHR7XG5cbiAgICBzdGF0aWMgcnVuKG5vZGUsIGJsb2NrKXtcbiAgICAgICAgXG4gICAgICAgIGxldCBob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBob2xkZXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJlbGVtZW50LWZvcm0tY29udGFpbmVyXCIpO1xuXG4gICAgICAgIGxldCBmaWVsZCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXG4gICAgICAgIC8vQXNzaWduIGRpZmZlcmVudCBhdHRyaWJ1dGVzIHRvIHRoZSBlbGVtZW50LiBcbiAgICAgICAgQnVpbGRlci5zZXRBdHRyaWJ1dGVzKGZpZWxkLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicGl4aXVtLXRleHRib3hcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogYmxvY2suYW5zd2VyLFxuICAgICAgICAgICAgXCJpZFwiOiBcImlucHV0ZnJlZXRleHRfXCIrYmxvY2suaWRcbiAgICAgICAgfSk7IFxuICAgICAgICBmaWVsZC5vbmJsdXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBibG9jay5hbnN3ZXIgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZmllbGQpLnZhbHVlO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYmxvY2suYW5zd2VyKTtcbiAgICAgICAgfTsgXG4gICAgICAgIFxuICAgICAgICBob2xkZXIuYXBwZW5kQ2hpbGQoZmllbGQpOyBcbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChob2xkZXIpO1xuICAgIH1cbn0iLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIkxpYnJhcnlcIl0gPSByZXF1aXJlKFwiLSEvVXNlcnMvcmVtaXRhY2hlL1dvcmtzcGFjZS9mb3JtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcyEuL2Jsb2NrUmFkaW8udHNcIik7IiwiaW1wb3J0IHtCdWlsZGVyfSBmcm9tIFwiLi4vYnVpbGRlclwiO1xuXG5leHBvcnQgY2xhc3MgQmxvY2tSYWRpbyB7XG5cbiAgICBzdGF0aWMgcnVuKG5vZGUsIGJsb2NrKXtcbiAgICAgICAgbGV0IGhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGhvbGRlci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImVsZW1lbnQtZm9ybS1jb250YWluZXJcIik7XG5cbiAgICAgICAgYmxvY2suY2hvaWNlcy5mb3JFYWNoKCAoY2hvaWNlKSA9PiB7XG4gICAgICAgICAgICBsZXQgZiAgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmFkaW9cIixcbiAgICAgICAgICAgICAgICBcImlkXCI6IFwiaW5wdXRyYWRpb19cIitibG9jay5pZCxcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6ICBjaG9pY2UudmFsdWUrXCJcIlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGxldCBsYWJlbCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICAgICAgbGFiZWwuaW5uZXJIVE1MID0gY2hvaWNlLmxhYmVsO1xuXG4gICAgICAgICAgICBsZXQgX2RpdiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIF9kaXYuYXBwZW5kQ2hpbGQoZik7XG4gICAgICAgICAgICBfZGl2LmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgICAgICAgIGhvbGRlci5hcHBlbmRDaGlsZChfZGl2KTtcblxuICAgICAgICAgICAgZi5vbmNsaWNrID0gKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXYudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBibG9jay5hbnN3ZXIgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZXYudGFyZ2V0KS52YWx1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhibG9jay5hbnN3ZXIpO1xuICAgICAgICAgICAgfTsgXG4gICAgICAgIH0pO1xuICAgICAgICBub2RlLmFwcGVuZENoaWxkKGhvbGRlcik7XG4gICAgfVxufSIsIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiTGlicmFyeVwiXSA9IHJlcXVpcmUoXCItIS9Vc2Vycy9yZW1pdGFjaGUvV29ya3NwYWNlL2Zvcm0tYnVpbGRlci9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzIS4vYmxvY2tDaGVja2JveC50c1wiKTsiLCJpbXBvcnQge0J1aWxkZXJ9IGZyb20gXCIuLi9idWlsZGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBCbG9ja0NoZWNrYm94IHtcblxuICAgIHN0YXRpYyBydW4obm9kZSwgYmxvY2spe1xuICAgICAgICBsZXQgaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaG9sZGVyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZWxlbWVudC1mb3JtLWNvbnRhaW5lclwiKTtcblxuICAgICAgICBibG9jay5jaG9pY2VzLmZvckVhY2goIChjaG9pY2UpID0+IHtcblxuICAgICAgICAgICAgbGV0IGYgID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6ICBibG9jay5pZCxcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6ICBjaG9pY2UudmFsdWUrXCJcIixcbiAgICAgICAgICAgICAgICBcImlkXCI6ICBjaG9pY2UudmFsdWUrXCJcIixcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvL1ByZXNlbGVjdCBhbnN3ZXJzIGlmIHNldFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9jay5hbnN3ZXIubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIGlmKChjaG9pY2UudmFsdWUrXCJcIik9PT1ibG9jay5hbnN3ZXJbaV0pe1xuICAgICAgICAgICAgICAgICAgICBCdWlsZGVyLnNldEF0dHJpYnV0ZXMoZiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjaGVja2VkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIGxldCBsYWJlbCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICAgICAgbGFiZWwuaW5uZXJIVE1MID0gY2hvaWNlLmxhYmVsO1xuXG4gICAgICAgICAgICBsZXQgX2RpdiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIF9kaXYuYXBwZW5kQ2hpbGQoZik7XG4gICAgICAgICAgICBfZGl2LmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgICAgICAgIGhvbGRlci5hcHBlbmRDaGlsZChfZGl2KTtcblxuICAgICAgICAgICAgZi5vbmNsaWNrID0gKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrZWRCb3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9Y2hlY2tib3hdW25hbWU9XCInK2Jsb2NrLmlkKydcIl06Y2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGxldCBpZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBjaGVja2VkQm94ZXMuZm9yRWFjaCggKGVsZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWRzLnB1c2goKDxIVE1MSW5wdXRFbGVtZW50PmVsZW0pLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBibG9jay5hbnN3ZXIgPSBpZHM7XG4gICAgICAgICAgICB9OyBcbiAgICAgICAgfSk7XG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoaG9sZGVyKTtcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJMaWJyYXJ5XCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3JlbWl0YWNoZS9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9ibG9ja0xvbmd0ZXh0LnRzXCIpOyIsImltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4uL2J1aWxkZXJcIjtcblxuZXhwb3J0IGNsYXNzIEJsb2NrTG9uZ3RleHR7XG5cbiAgICBzdGF0aWMgcnVuKG5vZGUsIGJsb2NrKXtcbiAgICAgICAgXG4gICAgICAgIGxldCBob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBob2xkZXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJlbGVtZW50LWZvcm0tY29udGFpbmVyXCIpO1xuICAgICAgICBsZXQgZmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XG5cbiAgICAgICAgLy9Bc3NpZ24gZGlmZmVyZW50IGF0dHJpYnV0ZXMgdG8gdGhlIGVsZW1lbnQuIFxuICAgICAgICBCdWlsZGVyLnNldEF0dHJpYnV0ZXMoZmllbGQsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwaXhpdW0tdGV4dGJveFwiLFxuICAgICAgICAgICAgXCJyb3dzXCI6IDUsXG4gICAgICAgICAgICBcInZhbHVlXCI6IGJsb2NrLmFuc3dlcixcbiAgICAgICAgICAgIFwiaWRcIjogXCJpbnB1dGxvbmd0ZXh0X1wiK2Jsb2NrLmlkXG4gICAgICAgIH0pOyBcbiAgICAgICAgLy8gZmllbGQuaW5uZXJIVE1MID0gYmxvY2suYW5zd2VyO1xuICAgICAgICBmaWVsZC5vbmJsdXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBibG9jay5hbnN3ZXIgPSAoPEhUTUxUZXh0QXJlYUVsZW1lbnQ+ZmllbGQpLnZhbHVlO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYmxvY2suYW5zd2VyKTtcbiAgICAgICAgfTsgXG4gICAgICAgIGhvbGRlci5hcHBlbmRDaGlsZChmaWVsZCk7IFxuICAgICAgICBub2RlLmFwcGVuZENoaWxkKGhvbGRlcik7XG4gICAgfVxufSIsIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiTGlicmFyeVwiXSA9IHJlcXVpcmUoXCItIS9Vc2Vycy9yZW1pdGFjaGUvV29ya3NwYWNlL2Zvcm0tYnVpbGRlci9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzIS4vQmxvY2tUYWdzLnRzXCIpOyIsImltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4uL2J1aWxkZXJcIjtcbmltcG9ydCB7IEJsb2NrVHlwZSB9IGZyb20gXCIuL2Jsb2NrXCI7XG5cbmV4cG9ydCBjbGFzcyBCbG9ja1RhZ3Mge1xuICAgIC8vIDxkaXYgaWQ9XCJob2xkZXJcIj5cbiAgICAvLyAgICAgPGRpdiBpZD1cInRhZ3NcIj5cbiAgICAvLyAgICAgICAgICA8c3Bhbj5cbiAgICAvLyAgICAgICAgICAgICAgdmFsdWVcbiAgICAvLyAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kYW5nZXJcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCI+LTwvYnV0dG9uPlxuICAgIC8vICAgICAgICAgIDwvc3Bhbj5cbiAgICAvLyAgICAgPC9kaXY+XG4gICAgLy8gICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPVwiXCIgLz5cbiAgICAvLyA8L2Rpdj5cbiAgICBcbiAgICBzdGF0aWMgcnVuKG5vZGUsIGJsb2NrKXtcbiAgICAgICAgLy8gcGFyc2UgYmxvY2suYW5zd2VyIGZvciBhcnJheSB0byBzdHJpbmdzIFxuICAgICAgICBpZihibG9jay5hbnN3ZXIubGVuZ3RoPT0wKXtcbiAgICAgICAgICAgIGJsb2NrLmFuc3dlciA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGhvbGRlci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImVsZW1lbnQtZm9ybS1jb250YWluZXJcIik7XG4gICAgICAgIGhvbGRlci5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleFwiKTtcblxuICAgICAgICAvLyBkaXYgYW5zd2VyXG4gICAgICAgIGxldCB0YWdzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaG9sZGVyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidGFnc1wiKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYmxvY2suYW5zd2VyKTtcblxuICAgICAgICBpZihibG9jay5hbnN3ZXIpe1xuICAgICAgICAgICAgYmxvY2suYW5zd2VyLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHZhbHVlICYmIHZhbHVlLmxlbmd0aD4wKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICAgICAgICAgICAgICB0YWcuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJ0YWctXCIrYmxvY2suaWQrXCItXCIrdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB0YWcuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJVSUxEIERFTEVURSBUQUdcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlbEJ0biA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XCJjbGFzc1wiOlwiYnRuIGJ0bi1kYW5nZXJcIiwgXCJ0eXBlXCI6XCJidXR0b25cIn0pO1xuICAgICAgICAgICAgICAgICAgICBkZWxCdG4uaW5uZXJUZXh0ID0gJy0nOyAgXG4gICAgICAgICAgICAgICAgICAgIGRlbEJ0bi5vbmNsaWNrID0gKGV2ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3MucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLmFuc3dlciA9IGJsb2NrLmFuc3dlci5maWx0ZXIoZnVuY3Rpb24oZWwpIHsgcmV0dXJuIGVsK2RlbEJ0bi5vdXRlckhUTUwgIT0gdGFnLmlubmVySFRNTDsgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0YWcuYXBwZW5kQ2hpbGQoZGVsQnRuKTsgXG4gICAgICAgICAgICAgICAgICAgIHRhZ3MuYXBwZW5kQ2hpbGQodGFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmaWVsZCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgICAgICAgICdjbGFzcyc6IFwiZmZmXCJcbiAgICAgICAgfSk7XG4gICAgICAgIC8vQXNzaWduIGRpZmZlcmVudCBhdHRyaWJ1dGVzIHRvIHRoZSBlbGVtZW50LiBcblxuICAgICAgICBmaWVsZC5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIEJsb2NrVGFncy5wcm9jZXNzTmV3S2V5d29yZChldmVudCwgZmllbGQsIGJsb2NrLCB0YWdzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZmllbGQub25ibHVyID0gKCkgPT4ge1xuICAgICAgICAgICAgQmxvY2tUYWdzLnByb2Nlc3NOZXdLZXl3b3JkKGV2ZW50LCBmaWVsZCwgYmxvY2ssIHRhZ3MsIHRydWUpO1xuICAgICAgICB9OyBcblxuICAgICAgICAvLyBhZGQgb25ibHVyIHNhdmVcbiAgICAgICAgLy8gZmllbGQub25ibHVyID0gKCkgPT4ge1xuICAgICAgICAvLyAgICAgYmxvY2suYW5zd2VyLnB1c2goKDxIVE1MSW5wdXRFbGVtZW50PmZpZWxkKS52YWx1ZSk7XG4gICAgICAgIC8vICAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZmllbGQpLnZhbHVlID0gbnVsbDtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKGJsb2NrLmFuc3dlcik7XG4gICAgICAgIC8vIH07IFxuXG4gICAgICAgIGhvbGRlci5hcHBlbmRDaGlsZCh0YWdzKTsgXG4gICAgICAgIGhvbGRlci5hcHBlbmRDaGlsZChmaWVsZCk7IFxuICAgICAgICBub2RlLmFwcGVuZENoaWxkKGhvbGRlcik7XG4gICAgfVxuXG5cbiAgICBzdGF0aWMgcHJvY2Vzc05ld0tleXdvcmQoZXZlbnQsIGZpZWxkLCBibG9jaywgdGFncywgZm9yY2VQcm9jZXNzOmJvb2xlYW4gPSBmYWxzZSl7XG4gICAgICAgIC8vIFwiRW50ZXJcIiBrZXkgb24gdGhlIGtleWJvYXJkXG4gICAgICAgIGlmIChmb3JjZVByb2Nlc3MgfHwgZXZlbnQua2V5ID09PSAnRW50ZXInIHx8IGV2ZW50LmtleSA9PT0gJywnIHx8IGV2ZW50LmtleUNvZGUgPT0gMTg4KSB7IC8vIHx8IGV2ZW50LmtleSA9PT0gJyAnIHx8IGV2ZW50LmNvZGUgPT09ICdTcGFjZScgfHwgZXZlbnQua2V5ID09PSAnU3BhY2ViYXInXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gKDxIVE1MSW5wdXRFbGVtZW50PmZpZWxkKS52YWx1ZS50cmltKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICAgICAgICBpZih2YWx1ZSAmJiB2YWx1ZS5sZW5ndGg+MCl7XG4gICAgICAgICAgICAgICAgKDxIVE1MSW5wdXRFbGVtZW50PmZpZWxkKS52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgLy9hZGQgdG8gYW5zd2VyXG4gICAgICAgICAgICAgICAgYmxvY2suYW5zd2VyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIC8vYWRkIHRvIGRpc3BsYXlcbiAgICAgICAgICAgICAgICBsZXQgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICAgICAgdGFnLmlubmVySFRNTCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIC8vIEJVSUxEIERFTEVURSBUQUdcbiAgICAgICAgICAgICAgICBsZXQgZGVsQnRuID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcImNsYXNzXCI6XCJidG5cIiwgXCJ0eXBlXCI6XCJidXR0b25cIn0pO1xuICAgICAgICAgICAgICAgIGRlbEJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYSBmYS10aW1lc1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nOyAgXG4gICAgICAgICAgICAgICAgZGVsQnRuLm9uY2xpY2sgPSAoZXYgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0YWdzLnJlbW92ZUNoaWxkKHRhZyk7XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLmFuc3dlciA9IGJsb2NrLmFuc3dlci5maWx0ZXIoZnVuY3Rpb24oZWwpIHsgcmV0dXJuIGVsK2RlbEJ0bi5vdXRlckhUTUwgIT0gdGFnLmlubmVySFRNTDsgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGFnLmFwcGVuZENoaWxkKGRlbEJ0bik7IFxuICAgICAgICAgICAgICAgIHRhZ3MuYXBwZW5kQ2hpbGQodGFnKTsgXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==