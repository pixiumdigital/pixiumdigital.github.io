!function(e){var t={};function i(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(n,s,function(t){return e[t]}.bind(null,s));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="./dist/",i(i.s=2)}([
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(e){"object"==typeof window&&(i=window)}e.exports=i},
/*!********************************!*\
  !*** ./src/builder.ts-exposed ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./builder.ts */8)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!*****************************!*\
  !*** ./src/main.ts-exposed ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./main.ts */3)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!**********************************************!*\
  !*** ./node_modules/ts-loader!./src/main.ts ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PixiumForm=t.Params=void 0;const n=i(/*! ./section */4),s=i(/*! ./builder */1),l=i(/*! ./data.json */23);function o(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]==t)return!0;return!1}function r(e,t){for(var i=document.querySelectorAll(t),n=e.parentNode;n&&!o(i,n);)n=n.parentNode;return n}class a{}t.Params=a;t.PixiumForm=class{constructor(e){if(this.sections=[],this.currentNode=0,this.params=new a,e.div){if(this.div=e.div,this.mainNode=document.getElementById(this.div),console.log(this.mainNode),this.mainNode.setAttribute("class","container form-container drop-targets"),e.data?this.json=e.data:this.json=l,e.singleSection?this.params.singleSection=e.singleSection:this.params.singleSection=!1,e.editQuestion?this.params.editQuestion=e.editQuestion:this.params.editQuestion=!1,this.params.hideQuestionType=e.hideQuestionType,this.params.hideQuestionTypeSelection=e.hideQuestionTypeSelection,this.json&&this.json.sections){this.json.sections.forEach(e=>{let t=new n.Section(this.mainNode,e,this.params.singleSection?null:e=>this.moveSection(e));this.sections.push(t)})}else alert("Could not init the module."),console.log(this.json);e.debug?this.debug=e.debug:this.debug=!1,e.mode?this.mode=e.mode:this.mode="run","build"===this.mode?this.build():this.run()}else alert("Div not found. Cannot display the form")}getIndexFromSectionId(e){for(let t=0;t<this.sections.length;t++)if(this.sections[t].id==e)return t;return null}swapSections(e,t){console.log(this.sections);let i=this.sections[e];this.sections[e]=this.sections[t],this.sections[t]=i,console.log(this.sections)}dragStart(e){let t=r(e.target,".drop-target");e.dataTransfer.setData("text/plain",t.id),setTimeout(()=>{t||console.log(t)},0)}dragEnter(e){e.preventDefault();let t=r(e.target,".drop-target");t&&t.classList.add("drag-over")}dragOver(e){e.preventDefault();let t=r(e.target,".drop-target");t&&t.classList.add("drag-over")}dragLeave(e){let t=r(e.target,".drop-target");t&&t.classList.remove("drag-over")}dragEnd(e){let t=r(e.target,".drop-target");t&&t.children[0].classList.remove("hidden")}drop(e){e.target.classList.remove("drag-over");const t=e.dataTransfer.getData("text/plain");let i=document.getElementById(t),n=r(e.target,".drop-target");if(i&&i.classList.remove("hidden"),n.classList.remove("drag-over"),i.classList.remove("drag-over"),n){let e=this.getIndexFromSectionId(n.id),t=this.getIndexFromSectionId(i.id);e!=t&&(this.swapSections(e,t),l=i,o=(s=n).parentNode,a=l.parentNode,d=document.createElement("div"),c=document.createElement("div"),o.replaceChild(d,s),a.replaceChild(c,l),o.replaceChild(l,d),a.replaceChild(s,c))}else alert("not parent found");var s,l,o,a,d,c}build(){if(this.clear(),this.sections.forEach(e=>{if(e.build(this.mainNode,this.params),!this.params.singleSection&&this.params.editQuestion){let t=s.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button",id:"btn-delete-section-"+e.id});t.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',e.contentWrapper.appendChild(t),t.onclick=t=>{this.mainNode.removeChild(e.node),this.sections=this.sections.filter((function(t){return t.id!=e.id}))}}e.dragNode.ondragstart=e=>{this.dragStart(e)}}),document.querySelectorAll(".pixium-box").forEach(e=>{e.addEventListener("dragenter",this.dragEnter),e.addEventListener("dragover",this.dragOver),e.addEventListener("dragleave",this.dragLeave),e.addEventListener("dragend",this.dragEnd),e.addEventListener("drop",e=>this.drop(e))}),!this.params.singleSection&&this.params.editQuestion){let t=s.Builder.createElement("button",{class:"btn btn-success form-builder-btn fullwidth",type:"button"});t.innerText="ADD SECTION",t.onclick=t=>{let i=t.target,l=new n.Section(this.mainNode,null,e=>this.moveSection(e));this.sections.push(l),this.mainNode.removeChild(i),this.debug&&this.mainNode.removeChild(e),l.build(this.mainNode,this.params);let o=s.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button",id:"btn-delete-section-"+l.id});o.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',o.onclick=e=>{this.mainNode.removeChild(l.node),this.sections=this.sections.filter((function(e){return e.id!=l.id}))},l.contentWrapper.appendChild(o),this.mainNode.appendChild(i),this.debug&&this.mainNode.appendChild(e)},this.mainNode.appendChild(t)}let e=s.Builder.createElement("button",{class:"btn btn-primary form-builder-btn",type:"button"});e.innerText="GO TO RUN",e.onclick=()=>{this.run()},this.debug&&this.mainNode.appendChild(e)}run(){this.clear(),this.sections.forEach(e=>{e.run(this.mainNode)}),this.saveBtn=s.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"submit",id:"form-builder-save-final-btn"}),this.saveBtn.innerText="Save",this.saveBtn.onclick=e=>{this.sections[this.currentNode].isCompleted()?this.compileJson():(e.preventDefault(),alert("Please complete the form"))},this.currentNode!=this.sections.length-1||this.params.singleSection||(document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="none",document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).after(this.saveBtn)),this.params.singleSection&&this.sections[this.currentNode].node.appendChild(this.saveBtn);let e=s.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button",id:"form-builder-save-btn"});e.innerText="SAVE",e.onclick=()=>{this.compileJson()},this.debug&&this.mainNode.appendChild(e);let t=s.Builder.createElement("button",{class:"btn btn-primary form-builder-btn",type:"button"});t.innerText="GO TO BUILD MODE",t.onclick=()=>{this.build()},this.debug&&this.mainNode.appendChild(t),this.display()}result(){}clear(){this.mainNode&&(this.mainNode.innerHTML="",this.sections.forEach(e=>{e&&e.clear()}),this.currentNode=0)}display(){this.currentNode>=0&&this.currentNode<this.sections.length&&this.sections[this.currentNode].show()}compileJson(){let e;e=[],this.sections.forEach(t=>{e.push(t.compileJson())});let t=JSON.stringify({sections:e});return console.log("finalOutput"),console.log(t),t}moveSection(e){e?this.currentNode>=0&&this.currentNode<this.sections.length-1?(this.sections[this.currentNode].hide(),this.currentNode++,this.sections[this.currentNode].show(),document.getElementById("btn-previous-section-"+this.sections[this.currentNode].id).style.display="inline-block",this.currentNode==this.sections.length-1?(document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="none",document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).after(this.saveBtn)):document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="inline-block"):alert("You already are on the next slide"):this.currentNode>=1&&this.currentNode<this.sections.length?(this.sections[this.currentNode].hide(),this.currentNode--,this.sections[this.currentNode].show(),document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="inline-block",0==this.currentNode&&(document.getElementById("btn-previous-section-"+this.sections[this.currentNode].id).style.display="none")):alert("You already are on the first slide")}}},
/*!********************************!*\
  !*** ./src/section.ts-exposed ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./section.ts */5)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************!*\
  !*** ./node_modules/ts-loader!./src/section.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Section=void 0;const n=i(/*! ./block/block */6),s=i(/*! ./builder */1);t.Section=class{constructor(e,t,i){this.parent=e,this.blocks=[],this.callback=i,this.title="",this.id=Math.random().toString(36).substring(7),t&&(t.title&&(this.title=t.title),t.blocks&&t.blocks.forEach(e=>{let t=new n.Block(e);this.blocks.push(t)}))}build(e,t){this.contentWrapper=s.Builder.createElement("div",{class:"pixium-box-content drop-target",id:this.id}),this.node=s.Builder.createElement("div",{class:"row pixium-box",id:"holder-"+this.id}),this.dragNode=s.Builder.createElement("i",{class:"fa fa-th drag-cursor",draggable:!0,id:"dragNod-"+this.id});let i=s.Builder.createElement("div",{class:"row pixium-block-build pixium-block-build-header"});if(s.Builder.addBuilderInputText(i,this.id,this.title,"Title Section",e=>{this.title=e},"col-md-12"),this.contentWrapper.appendChild(i),i.children[0].appendChild(this.dragNode),this.blocks.forEach(e=>{let i=s.Builder.createElement("button",{class:"form-builder-btn button-delete",type:"button",style:"display:block"});i.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',t.editQuestion?i.onclick=t=>{this.contentWrapper.removeChild(e.node),this.blocks=this.blocks.filter((function(t){return t.id!=e.id}))}:i=s.Builder.createElement("span"),e.build(this.contentWrapper,t,i)}),t.editQuestion){let e=s.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button"});e.innerHTML="+",e.onclick=e=>{let i,l=e.target,o=new n.Block(null);this.blocks.push(o),this.contentWrapper.removeChild(l),this.callback&&(i=document.getElementById("btn-delete-section-"+this.id),this.contentWrapper.removeChild(i)),o.build(this.contentWrapper,t,!1,"");let r=s.Builder.createElement("button",{class:"form-builder-btn button-delete float-right",type:"button",style:"display:block"});r.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',r.onclick=e=>{this.contentWrapper.removeChild(o.node),this.blocks=this.blocks.filter((function(e){return e.id!=o.id}))},o.header.insertBefore(r,o.header.firstChild),this.contentWrapper.appendChild(l),this.callback&&this.contentWrapper.appendChild(i)},this.contentWrapper.appendChild(e)}this.node.appendChild(this.contentWrapper),e.appendChild(this.node)}run(e){this.node=s.Builder.createElement("div",{class:"row pixium-box"});let t=document.createElement("h1");if(t.innerHTML=this.title,this.node.appendChild(t),this.blocks.forEach(e=>{e.run(this.node)}),console.log("node.singleSection"),console.log(this.callback),this.callback){let e=s.Builder.createElement("button",{class:"btn btn-primary form-builder-btn",id:"btn-previous-section-"+this.id,type:"button"});e.innerText="Previous",e.style.display="none",e.onclick=()=>{this.callback&&this.callback(!1)},this.node.appendChild(e);let t=s.Builder.createElement("button",{class:"btn btn-primary form-builder-btn",id:"btn-next-section-"+this.id,type:"button"});t.innerText="Next",t.onclick=()=>{this.isCompleted()?this.callback&&this.callback(!0):alert("Please complete the form...")},this.node.appendChild(t)}this.node.style.display="none",e.appendChild(this.node)}clear(){this.node&&(this.node.innerHTML=""),this.blocks.forEach(e=>{e.clear()})}getNode(){return alert(this.node),this.node}show(){this.node.style.display="block"}hide(){this.node.style.display="none"}isCompleted(){let e=!0;return this.blocks.forEach(t=>{console.log(t.answer),t&&0==t.answer.length&&t.type!==n.BlockType.NOANSWER&&(e=!1)}),e}compileJson(){let e;return e=[],this.blocks.forEach(t=>{e.push(t.compileJson())}),{title:this.title,blocks:e}}}},
/*!************************************!*\
  !*** ./src/block/block.ts-exposed ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./block.ts */7)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*****************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/block.ts ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Block=t.BlockType=void 0;const n=i(/*! ../builder */1),s=i(/*! ./choice */9),l=i(/*! ./blockSlider */11),o=i(/*! ./blockFreetext */13),r=i(/*! ./blockRadio */15),a=i(/*! ./blockCheckbox */17),d=i(/*! ./blockLongtext */19),c=i(/*! ./BlockTags */21);var u;!function(e){e[e.FREETEXT=1]="FREETEXT",e[e.RADIO=2]="RADIO",e[e.SLIDER=3]="SLIDER",e[e.CHECKBOX=4]="CHECKBOX",e[e.LONGTEXT=5]="LONGTEXT",e[e.NOANSWER=6]="NOANSWER",e[e.TAGS=7]="TAGS"}(u=t.BlockType||(t.BlockType={}));t.Block=class{constructor(e=null){this.json=e,this.text="",this.type=1,this.min="",this.max="",this.step="",this.answer="",this.choices=[],this.id=Math.random().toString(36).substring(7),e&&(e.text&&(this.text=e.text),e.type&&(this.type=e.type),this.answer="",e.answer&&(this.answer=e.answer),e.min&&(this.min=e.min),e.max&&(this.max=e.max),e.step&&(this.step=e.step),this.type!==u.RADIO&&this.type!==u.CHECKBOX||e.choices&&e.choices.forEach(e=>{let t=new s.Choice(e);this.choices.push(t)}))}clear(){this.node&&(this.node.innerHTML="")}build(e,t,i=null,l="collapse"){this.node=n.Builder.createElement("div",{class:"row pixium-block-build"});let o=n.Builder.createElement("div",{class:"col-md-12 "+l});this.header=n.Builder.addBoxHeader(this.node,this.id,o,i),n.Builder.addBuilderInputText(this.header,this.id,this.text,"Text",e=>{this.text=e},"col-md-10"),this.node.appendChild(o);let r=Object.keys(u).filter(e=>e.match(/^\D/)).map(e=>({name:e,value:u[e]})),a=[];if(t.hideQuestionType)for(var d=0;d<r.length;d++){let e=r[d].name;e&&(t.hideQuestionType[e]||a.push(r[d]))}console.log(a);let c="";t.hideQuestionType&&(c="hidden"),n.Builder.addBuilderInputDropdown(o,this.id,this.type,"Type",e=>{this.type=Number(e),this.answer="",this.triggerSubElementBlock()},a,"col-md-4 "+c);let h="";this.type!==u.RADIO&&this.type!==u.CHECKBOX&&(h="display:none;");let p=n.Builder.createElement("div",{id:"choices_block_"+this.id,class:"col-md-12 custom_block_type",style:h}),m=n.Builder.createElement("label");m.innerHTML="Choices : ",p.appendChild(m),this.choices.length>0&&this.choices.forEach(e=>{e.build(p);let t=n.Builder.createElement("button",{class:"form-builder-btn button-delete form-builder-btn",type:"button"});t.innerHTML='<i class="fa fa-times" aria-hidden="true"></i>',t.onclick=t=>{p.removeChild(e.node),this.choices=this.choices.filter((function(t){return t.id!=e.id}))},e.node.appendChild(t)});let b=n.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button"});b.innerHTML="+",b.onclick=e=>{let t=e.target,i=new s.Choice(null);this.choices.push(i),p.removeChild(t),i.build(p);let l=n.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button"});l.innerText="-",l.onclick=e=>{p.removeChild(i.node),this.choices=this.choices.filter((function(e){return e.id!=i.id}))},i.node.appendChild(l),p.appendChild(t)},p.appendChild(b),o.appendChild(p);let f="";this.type!==u.SLIDER&&(f="display:none;");let g=n.Builder.createElement("div",{id:"slider_block_"+this.id,class:"col-md-12 custom_block_type",style:f});n.Builder.addBuilderInputText(g,this.id,this.min,"Min",e=>{this.min=e},"col-md-4",!0),n.Builder.addBuilderInputText(g,this.id,this.max,"Max",e=>{this.max=e},"col-md-4",!0),n.Builder.addBuilderInputText(g,this.id,this.step,"Step",e=>{this.step=e},"col-md-4",!0),o.appendChild(g),e.appendChild(this.node)}run(e){let t=n.Builder.createElement("p");switch(t.innerHTML=this.text,this.node=n.Builder.createElement("div",{class:"pixium-block-run-question"}),this.node.appendChild(t),this.type){case u.RADIO:r.BlockRadio.run(this.node,this);break;case u.CHECKBOX:a.BlockCheckbox.run(this.node,this);break;case u.FREETEXT:o.BlockFreetext.run(this.node,this);break;case u.LONGTEXT:d.BlockLongtext.run(this.node,this);break;case u.NOANSWER:break;case u.SLIDER:l.BlockSlider.run(this.node,this);break;case u.TAGS:c.BlockTags.run(this.node,this)}e.appendChild(this.node)}display(){}triggerSubElementBlock(){let e=null;(e=document.getElementById("slider_block_"+this.id))?this.type===u.SLIDER?e.style.display="block":e.style.display="none":alert("Node Silder not found");let t=null;(t=document.getElementById("choices_block_"+this.id))?this.type===u.RADIO||this.type===u.CHECKBOX?t.style.display="block":t.style.display="none":alert("Node Choice not found")}compileJson(){let e;return e=[],this.choices.forEach(t=>{e.push(t.compileJson())}),this.json={type:this.type,text:this.text,answer:this.answer,min:this.min,max:this.max,step:this.step,choices:e},this.json}}},
/*!*************************************************!*\
  !*** ./node_modules/ts-loader!./src/builder.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Builder=void 0;class n{static createElement(e,t=null){if(!e)return void alert("Could not build the element");let i=document.createElement(e);if(t)for(var n in t){var s=t[n];i.setAttribute(n,s)}return i}static setAttributes(e,t=null){if(t)for(var i in t){var n=t[i];e.setAttribute(i,n)}}static addBuilderInputText(e,t,i,s,l,o="col-md-12",r=!1){let a=n.createElement("div",{class:"pixium-row-block "+o}),d=n.createElement("input",{class:"pixium-textbox",type:"text",value:i,name:s+"_"+t,placeholder:s});if(d.onblur=e=>{console.log(e.target),l(e.target.value)},r){let e=n.createElement("label",{style:"float:left"});e.innerHTML=s+": ",a.appendChild(e)}a.appendChild(d),e.appendChild(a)}static addBoxHeader(e,t,i,s){let l=n.createElement("div",{class:"col-md-12 block-header block-header-"+t});s&&(s.className+=" float-right",l.appendChild(s));let o=n.createElement("i",{class:"fa fa-caret-left float-right","aria-hidden":"true"});l.appendChild(o);let r=n.createElement("i",{class:"fa fa-caret-down float-right hidden","aria-hidden":"true"});return l.appendChild(r),o.onclick=e=>{i.classList.toggle("collapse"),o.classList.toggle("hidden"),r.classList.toggle("hidden")},r.onclick=e=>{i.classList.toggle("collapse"),o.classList.toggle("hidden"),r.classList.toggle("hidden")},e.appendChild(l),l}static addBuilderInputDropdown(e,t,i,s,l,o,r="col-md-12"){let a=n.createElement("div",{class:"pixium-row-block "+r}),d=n.createElement("label");d.innerHTML=s+": ";let c=n.createElement("select",{class:"pixium-dropdown",value:i,name:s+"_"+t,style:"display:block"});c.onchange=e=>{l(e.target.value)},o.forEach(e=>{let t=n.createElement("option",{value:e.value});i===e.value&&n.setAttributes(t,{selected:"selected"}),t.innerHTML=e.name,c.appendChild(t)}),a.appendChild(d),a.appendChild(c),e.appendChild(a)}}t.Builder=n},
/*!*************************************!*\
  !*** ./src/block/choice.ts-exposed ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./choice.ts */10)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!******************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/choice.ts ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Choice=void 0;const n=i(/*! ../builder */1);t.Choice=class{constructor(e){this.id=Math.random().toString(36).substring(7),e&&(e.label&&(this.label=e.label),e.value&&(this.value=e.value))}build(e){this.node=n.Builder.createElement("div",{class:"pixium-row-block block-choices col-md-12"});let t=n.Builder.createElement("label",{for:"input_"+this.value+"_"+this.id});t.innerHTML="Value : ";let i=n.Builder.createElement("input",{class:"pixium-textbox",type:"text",value:this.value?this.value:"",placeholder:"Value",id:"input_"+this.value+"_"+this.id});i.onblur=e=>{console.log(e.target),this.value=e.target.value};let s=n.Builder.createElement("label",{for:"input_"+this.label+"_"+this.id,style:"min-width: auto;"});s.innerHTML="Label : ";let l=n.Builder.createElement("input",{class:"pixium-textbox",type:"text",value:this.label?this.label:"",placeholder:"Label",id:"input_"+this.label+"_"+this.id});l.onblur=e=>{console.log(e.target),this.label=e.target.value},this.node.appendChild(t),this.node.appendChild(i),this.node.appendChild(s),this.node.appendChild(l),e.appendChild(this.node)}compileJson(){return this.json={label:this.label,value:this.value},this.json}}},
/*!******************************************!*\
  !*** ./src/block/blockSlider.ts-exposed ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockSlider.ts */12)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!***********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockSlider.ts ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockSlider=void 0;const n=i(/*! ../builder */1);t.BlockSlider=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let s=n.Builder.createElement("input"),l=n.Builder.createElement("span",{class:"_left"});l.innerHTML=t.min?t.min:"0";let o=n.Builder.createElement("span",{class:"_right"});o.innerHTML=t.max?t.max:"100";let r=t.answer?t.answer:t.max&&t.min?Math.round((Number(t.max)+Number(t.min))/2):50;n.Builder.setAttributes(s,{class:"pixium-slider",type:"range",value:r,min:t.min?t.min:0,max:t.max?t.max:100,id:"inputrange_"+t.id}),t.step&&s.setAttribute("step",t.step),s.onchange=()=>{t.answer=parseFloat(s.value),console.log(t.answer),document.getElementById("output_"+t.id).innerHTML=t.answer};let a=n.Builder.createElement("div");a.setAttribute("class","pixium-block-slider");let d=n.Builder.createElement("output",{id:"output_"+t.id});d.innerHTML=r,t.answer=d.innerHTML,a.appendChild(d),a.appendChild(s),a.appendChild(l),a.appendChild(o),i.appendChild(a),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockFreetext.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockFreetext.ts */14)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockFreetext.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockFreetext=void 0;const n=i(/*! ../builder */1);t.BlockFreetext=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let s=n.Builder.createElement("input");n.Builder.setAttributes(s,{class:"pixium-textbox",type:"text",value:t.answer,id:"inputfreetext_"+t.id}),s.onblur=()=>{t.answer=s.value,console.log(t.answer)},i.appendChild(s),e.appendChild(i)}}},
/*!*****************************************!*\
  !*** ./src/block/blockRadio.ts-exposed ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockRadio.ts */16)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!**********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockRadio.ts ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockRadio=void 0;const n=i(/*! ../builder */1);t.BlockRadio=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container"),t.choices.forEach(e=>{let s=n.Builder.createElement("input",{type:"radio",id:"inputradio_"+t.id,value:e.value+"",name:"name_"+t.id}),l=n.Builder.createElement("label");l.innerHTML=e.label;let o=n.Builder.createElement("div");o.appendChild(s),o.appendChild(l),i.appendChild(o),s.onclick=e=>{console.log(e.target),t.answer=e.target.value,console.log(t.answer)}}),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockCheckbox.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockCheckbox.ts */18)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockCheckbox.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockCheckbox=void 0;const n=i(/*! ../builder */1);t.BlockCheckbox=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container"),t.choices.forEach(e=>{let s=n.Builder.createElement("input",{type:"checkbox",name:t.id,value:e.value+"",id:e.value+""});for(var l=0;l<t.answer.length;l++)e.value+""===t.answer[l]&&n.Builder.setAttributes(s,{checked:!0});let o=n.Builder.createElement("label");o.innerHTML=e.label;let r=n.Builder.createElement("div");r.appendChild(s),r.appendChild(o),i.appendChild(r),s.onclick=e=>{let i=document.querySelectorAll('input[type=checkbox][name="'+t.id+'"]:checked'),n=[];i.forEach(e=>{n.push(e.value)}),t.answer=n}}),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockLongtext.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockLongtext.ts */20)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockLongtext.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockLongtext=void 0;const n=i(/*! ../builder */1);t.BlockLongtext=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let s=document.createElement("textarea");n.Builder.setAttributes(s,{class:"pixium-textbox",rows:5,value:t.answer,id:"inputlongtext_"+t.id}),s.onblur=()=>{t.answer=s.value,console.log(t.answer)},i.appendChild(s),e.appendChild(i)}}},
/*!****************************************!*\
  !*** ./src/block/BlockTags.ts-exposed ***!
  \****************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./BlockTags.ts */22)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/BlockTags.ts ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockTags=void 0;const n=i(/*! ../builder */1);class s{static run(e,t){0==t.answer.length&&(t.answer=[]);let i=document.createElement("div");i.setAttribute("class","element-form-container"),i.setAttribute("style","display:flex");let l=document.createElement("div");i.setAttribute("class","tags"),t.answer&&t.answer.forEach(e=>{if(e&&e.length>0){let i=document.createElement("span");i.setAttribute("id","tag-"+t.id+"-"+e),i.innerHTML=e;let s=n.Builder.createElement("button",{class:"btn btn-danger",type:"button"});s.innerText="-",s.onclick=e=>{l.removeChild(i),t.answer=t.answer.filter((function(e){return e+s.outerHTML!=i.innerHTML}))},i.appendChild(s),l.appendChild(i)}});let o=n.Builder.createElement("input",{class:"fff"});o.addEventListener("keypress",(function(e){s.processNewKeyword(e,o,t,l)})),o.onblur=()=>{s.processNewKeyword(event,o,t,l,!0)},i.appendChild(l),i.appendChild(o),e.appendChild(i)}static processNewKeyword(e,t,i,s,l=!1){if(l||"Enter"===e.key||","===e.key||188==e.keyCode){e.preventDefault();let l=t.value.trim();if(console.log(l),l&&l.length>0){t.value=null,i.answer.push(l);let e=document.createElement("span");e.innerHTML=l;let o=n.Builder.createElement("button",{class:"btn",type:"button"});o.innerHTML='<i class="fa fa-times" aria-hidden="true"></i>',o.onclick=t=>{s.removeChild(e),i.answer=i.answer.filter((function(t){return t+o.outerHTML!=e.innerHTML}))},e.appendChild(o),s.appendChild(e)}}}}t.BlockTags=s},
/*!***********************!*\
  !*** ./src/data.json ***!
  \***********************/
/*! exports provided: sections, default */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e){e.exports=JSON.parse('{"sections":[{"title":"Section 1","blocks":[{"text":"BLABLA: <br> <br> How BLALBAty to delegate?","name":"q3","type":7},{"text":"Test Ludo?","name":"q3bis","type":3,"min":"1","max":"10","step":"1","label":"Delegation"}]},{"title":"Block Test Checkbox","blocks":[{"type":2,"name":"q2","text":"How do you feel about meeting new people?","choices":[{"value":1,"label":"Extraverted"},{"value":2,"label":"Introverted"}]},{"type":4,"name":"q22","text":"How do you feel about meeting new people?","choices":[{"value":1,"label":"I love meeting new people!"},{"value":2,"label":"Sometimes I like to meet new people, if I\'m in the right mood."}]}]},{"name":"block 1","blocks":[{"text":"DDDDELEGATION: <br> <br> How skilled do you feel today about your ability to delegate?","name":"q1","type":1,"group":1,"label":"Delegation"},{"text":"TEST: <br> <br> How sity to delegate?","name":"q2","type":1,"group":1,"label":"Delegation"}]}]}')}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnVpbGRlci50cy1leHBvc2VkIiwid2VicGFjazovLy8uL3NyYy9tYWluLnRzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlY3Rpb24udHMtZXhwb3NlZCIsIndlYnBhY2s6Ly8vLi9zcmMvc2VjdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svYmxvY2sudHMtZXhwb3NlZCIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svYmxvY2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2J1aWxkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Nob2ljZS50cy1leHBvc2VkIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9jaG9pY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrU2xpZGVyLnRzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrU2xpZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9ibG9ja0ZyZWV0ZXh0LnRzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrRnJlZXRleHQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrUmFkaW8udHMtZXhwb3NlZCIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svYmxvY2tSYWRpby50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svYmxvY2tDaGVja2JveC50cy1leHBvc2VkIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9ibG9ja0NoZWNrYm94LnRzIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9ibG9ja0xvbmd0ZXh0LnRzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrTG9uZ3RleHQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL0Jsb2NrVGFncy50cy1leHBvc2VkIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9CbG9ja1RhZ3MudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnIiwidGhpcyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsImRhdGEiLCJjb2xsZWN0aW9uSGFzIiwiYSIsImIiLCJsZW4iLCJsZW5ndGgiLCJmaW5kUGFyZW50QnlTZWxlY3RvciIsImVsbSIsInNlbGVjdG9yIiwiYWxsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY3VyIiwicGFyZW50Tm9kZSIsIlBhcmFtcyIsInBhcmFtcyIsInNlY3Rpb25zIiwiY3VycmVudE5vZGUiLCJkaXYiLCJtYWluTm9kZSIsImdldEVsZW1lbnRCeUlkIiwiY29uc29sZSIsImxvZyIsInNldEF0dHJpYnV0ZSIsImpzb24iLCJzaW5nbGVTZWN0aW9uIiwiZWRpdFF1ZXN0aW9uIiwiaGlkZVF1ZXN0aW9uVHlwZSIsImhpZGVRdWVzdGlvblR5cGVTZWxlY3Rpb24iLCJmb3JFYWNoIiwic2VjIiwic2VjdGlvbk1vZGVsIiwiU2VjdGlvbiIsIm5leHRTbGlkZSIsIm1vdmVTZWN0aW9uIiwicHVzaCIsImFsZXJ0IiwiZGVidWciLCJidWlsZCIsInJ1biIsIl9pZCIsImlkIiwiczFfaWQiLCJzMl9pZCIsInRlbXAiLCJ0aGVfcGFyZW50IiwidGFyZ2V0IiwiZGF0YVRyYW5zZmVyIiwic2V0RGF0YSIsInNldFRpbWVvdXQiLCJwcmV2ZW50RGVmYXVsdCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImNoaWxkcmVuIiwiZ2V0RGF0YSIsImRyYWdnYWJsZSIsImlkMSIsImdldEluZGV4RnJvbVNlY3Rpb25JZCIsImlkMiIsInN3YXBTZWN0aW9ucyIsImFQYXJlbnQiLCJiUGFyZW50IiwiYUhvbGRlciIsImNyZWF0ZUVsZW1lbnQiLCJiSG9sZGVyIiwicmVwbGFjZUNoaWxkIiwiY2xlYXIiLCJkZWxCdG4iLCJCdWlsZGVyIiwiaW5uZXJIVE1MIiwiY29udGVudFdyYXBwZXIiLCJhcHBlbmRDaGlsZCIsIm9uY2xpY2siLCJldiIsInJlbW92ZUNoaWxkIiwibm9kZSIsImZpbHRlciIsImVsIiwiZHJhZ05vZGUiLCJvbmRyYWdzdGFydCIsImRyYWdTdGFydCIsImJveCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkcmFnRW50ZXIiLCJkcmFnT3ZlciIsImRyYWdMZWF2ZSIsImRyYWdFbmQiLCJkcm9wIiwiYWRkQnV0dG9uIiwiaW5uZXJUZXh0IiwiYnRuU2VjQWRkIiwic3dpdGNoQnV0dG9uIiwiYnRuU2VjRGVsIiwic2F2ZUJ0biIsImlzQ29tcGxldGVkIiwiY29tcGlsZUpzb24iLCJzdHlsZSIsImRpc3BsYXkiLCJhZnRlciIsInNhdmVCdXR0b24iLCJzaG93IiwiYXJyIiwiZmluYWxPdXRwdXQiLCJKU09OIiwic3RyaW5naWZ5IiwiaGlkZSIsIl9wYXJlbnQiLCJfanNvbiIsIl9jYWxsYmFjayIsInBhcmVudCIsImJsb2NrcyIsImNhbGxiYWNrIiwidGl0bGUiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJibG9ja01vZGVsIiwiQmxvY2siLCJfbm9kZSIsIl9wYXJhbXMiLCJub2RlSGVhZGVyIiwiYWRkQnVpbGRlcklucHV0VGV4dCIsInZhbCIsImJsayIsImJ0bkJsa0FkZCIsImJ0bkJsa0RlbCIsImhlYWRlciIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJuYW1lTm9kZSIsInByZXZCdXR0b24iLCJuZXh0QnV0dG9uIiwiYW5zd2VyIiwidHlwZSIsIkJsb2NrVHlwZSIsIk5PQU5TV0VSIiwidGV4dCIsIm1pbiIsIm1heCIsInN0ZXAiLCJjaG9pY2VzIiwiUkFESU8iLCJDSEVDS0JPWCIsImNob2ljZUpzb24iLCJjaG9pY2UiLCJDaG9pY2UiLCJjbGFzc2VzIiwibm9kZUNvbnRlbnQiLCJhZGRCb3hIZWFkZXIiLCJlbnVtQXJyYXkiLCJrZXlzIiwibWF0Y2giLCJtYXAiLCJuZXdBcnJheSIsImsiLCJjc3NDbGFzcyIsImFkZEJ1aWxkZXJJbnB1dERyb3Bkb3duIiwiTnVtYmVyIiwidHJpZ2dlclN1YkVsZW1lbnRCbG9jayIsImJsa0Nob2ljZXNTdHlsZSIsIm5vZGVDaG9pY2VzIiwibGFiVGl0bGUiLCJjaCIsImFkZENob2ljZUJ1dHRvbiIsImJ0bkNoQWRkIiwiYnRuQ2hEZWwiLCJibGtTbGlkZXJTdHlsZSIsIlNMSURFUiIsIm5vZGVTbGlkZXIiLCJ0aXRsZU5vZGUiLCJCbG9ja1JhZGlvIiwiQmxvY2tDaGVja2JveCIsIkZSRUVURVhUIiwiQmxvY2tGcmVldGV4dCIsIkxPTkdURVhUIiwiQmxvY2tMb25ndGV4dCIsIkJsb2NrU2xpZGVyIiwiVEFHUyIsIkJsb2NrVGFncyIsInNsaWRlckJsb2NrIiwiY2hvaWNlQmxvY2siLCJlbGVtIiwibGFiZWwiLCJzaG93TGFiZWwiLCJpbnB1dCIsIm9uYmx1ciIsImxhYiIsInN1YkVsZW1lbnQiLCJjbGFzc05hbWUiLCJleWUxIiwiZXllMiIsInRvZ2dsZSIsIm9wdGlvbnMiLCJvbmNoYW5nZSIsImVsZW1lbnQiLCJvcHQiLCJzZXRBdHRyaWJ1dGVzIiwibGFiVmFsdWUiLCJpbnB1dFZhbHVlIiwibGFiTGFiZWwiLCJpbnB1dExhYmVsIiwiYmxvY2siLCJob2xkZXIiLCJmaWVsZCIsImRlZmF1bHRWYWx1ZSIsInJvdW5kIiwicGFyc2VGbG9hdCIsImlucHV0RGl2Iiwib3V0cHV0IiwiZiIsIl9kaXYiLCJjaGVja2VkQm94ZXMiLCJpZHMiLCJ0YWdzIiwidGFnIiwib3V0ZXJIVE1MIiwiZXZlbnQiLCJwcm9jZXNzTmV3S2V5d29yZCIsImZvcmNlUHJvY2VzcyIsImtleUNvZGUiLCJ0cmltIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVB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RUFBQUMsUUFBUUwsY0FBYyxTQUFVLENBQUMsTUFBUSxNQUFPLEtBQU8sV0FDcEVJLEVBQU9FLFVBQVksaURBQ25CRixFQUFPSyxRQUFXQyxJQUNkNkksRUFBSzVJLFlBQVk2SSxHQUNqQmIsRUFBTXJFLE9BQVNxRSxFQUFNckUsT0FBT3pELFFBQU8sU0FBU0MsR0FBTSxPQUFPQSxFQUFHVixFQUFPcUosV0FBYUQsRUFBSWxKLGNBRXhGa0osRUFBSWhKLFlBQVlKLEdBQ2hCbUosRUFBSy9JLFlBQVlnSixNQTVGakMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIuL2Rpc3QvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiTGlicmFyeVwiXSA9IHJlcXVpcmUoXCItIS9Vc2Vycy9yZW1pdGFjaGUvV29ya3NwYWNlL2Zvcm0tYnVpbGRlci9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzIS4vYnVpbGRlci50c1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIkxpYnJhcnlcIl0gPSByZXF1aXJlKFwiLSEvVXNlcnMvcmVtaXRhY2hlL1dvcmtzcGFjZS9mb3JtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcyEuL21haW4udHNcIik7IiwiXG5pbXBvcnQge1NlY3Rpb259IGZyb20gJy4vc2VjdGlvbic7XG5pbXBvcnQge0J1aWxkZXJ9IGZyb20gJy4vYnVpbGRlcic7XG4vLyBpbXBvcnQgKiBhcyBkYXRhIGZyb20gJy4vZGF0YS5qc29uJztcbi8vIGltcG9ydCBDaGFydCBmcm9tICdjaGFydGpzJztcbi8vIGltcG9ydCBmb250YXdlc29tZSBmcm9tICdAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtZnJlZSc7XG5cbmNvbnN0IGRhdGEgPSByZXF1aXJlKCcuL2RhdGEuanNvbicpO1xuLy8gY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5cblxuZnVuY3Rpb24gY29sbGVjdGlvbkhhcyhhLCBiKSB7IC8vaGVscGVyIGZ1bmN0aW9uIChzZWUgYmVsb3cpXG4gICAgZm9yKHZhciBpID0gMCwgbGVuID0gYS5sZW5ndGg7IGkgPCBsZW47IGkgKyspIHtcbiAgICAgICAgaWYoYVtpXSA9PSBiKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gZmluZFBhcmVudEJ5U2VsZWN0b3IoZWxtLCBzZWxlY3Rvcikge1xuICAgIHZhciBhbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICB2YXIgY3VyID0gZWxtLnBhcmVudE5vZGU7XG4gICAgd2hpbGUoY3VyICYmICFjb2xsZWN0aW9uSGFzKGFsbCwgY3VyKSkgeyAvL2tlZXAgZ29pbmcgdXAgdW50aWwgeW91IGZpbmQgYSBtYXRjaFxuICAgICAgICBjdXIgPSBjdXIucGFyZW50Tm9kZTsgLy9nbyB1cFxuICAgIH1cbiAgICByZXR1cm4gY3VyOyAvL3dpbGwgcmV0dXJuIG51bGwgaWYgbm90IGZvdW5kXG59XG5mdW5jdGlvbiBzd2FwRG9tKGEsYikgXG57XG4gICAgdmFyIGFQYXJlbnQgPSBhLnBhcmVudE5vZGU7XG4gICAgdmFyIGJQYXJlbnQgPSBiLnBhcmVudE5vZGU7XG5cbiAgICB2YXIgYUhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdmFyIGJIb2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgYVBhcmVudC5yZXBsYWNlQ2hpbGQoYUhvbGRlcixhKTtcbiAgICBiUGFyZW50LnJlcGxhY2VDaGlsZChiSG9sZGVyLGIpO1xuXG4gICAgYVBhcmVudC5yZXBsYWNlQ2hpbGQoYixhSG9sZGVyKTtcbiAgICBiUGFyZW50LnJlcGxhY2VDaGlsZChhLGJIb2xkZXIpOyAgICBcbn1cblxuXG5leHBvcnQgY2xhc3MgUGFyYW1ze1xuICAgIHNpbmdsZVNlY3Rpb246Ym9vbGVhbjtcbiAgICBlZGl0UXVlc3Rpb246Ym9vbGVhbjtcbiAgICBoaWRlUXVlc3Rpb25UeXBlOnt9O1xuICAgIGhpZGVRdWVzdGlvblR5cGVTZWxlY3Rpb246Ym9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFBpeGl1bUZvcm0ge1xuICAgIGpzb246Rm9ybURhdGE7XG4gICAgZGl2OnN0cmluZztcbiAgICBzZWN0aW9uczpTZWN0aW9uW107XG4gICAgb3V0cHV0OiBzdHJpbmc7XG4gICAgbWFpbk5vZGU6IEhUTUxFbGVtZW50O1xuICAgIHRpdGxlTm9kZTogSFRNTEVsZW1lbnQ7XG4gICAgY3VycmVudE5vZGU6IG51bWJlcjtcbiAgICBtb2RlOnN0cmluZztcbiAgICBkZWJ1Zzpib29sZWFuO1xuICAgIHBhcmFtczogUGFyYW1zO1xuICAgIHNhdmVCdG46IEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IocGFyYW1zOkZvcm1EYXRhKSB7XG4gICAgICAgIHRoaXMuc2VjdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IDA7XG4gICAgICAgIHRoaXMucGFyYW1zID0gbmV3IFBhcmFtcygpO1xuXG4gICAgICAgIGlmKCFwYXJhbXNbXCJkaXZcIl0pe1xuICAgICAgICAgICAgYWxlcnQoJ0RpdiBub3QgZm91bmQuIENhbm5vdCBkaXNwbGF5IHRoZSBmb3JtJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXYgPSBwYXJhbXNbXCJkaXZcIl07XG4gICAgICAgIHRoaXMubWFpbk5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmRpdik7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMubWFpbk5vZGUpO1xuICAgICAgICB0aGlzLm1haW5Ob2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiY29udGFpbmVyIGZvcm0tY29udGFpbmVyIGRyb3AtdGFyZ2V0c1wiKTtcblxuICAgICAgICBpZihwYXJhbXNbXCJkYXRhXCJdKXtcbiAgICAgICAgICAgIHRoaXMuanNvbiA9IHBhcmFtc1tcImRhdGFcIl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmpzb24gPSBkYXRhOy8vSlNPTi5wYXJzZSggZGF0YSApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gIC0tLS0tLS0tLS0tLSAgICBPTkxZIEFMTE9XIE9ORSBTRUNUSU9OIEZPUk1cbiAgICAgICAgaWYocGFyYW1zW1wic2luZ2xlU2VjdGlvblwiXSl7XG4gICAgICAgICAgICB0aGlzLnBhcmFtcy5zaW5nbGVTZWN0aW9uID0gcGFyYW1zW1wic2luZ2xlU2VjdGlvblwiXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGFyYW1zLnNpbmdsZVNlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgfSBcblxuICAgICAgICBpZihwYXJhbXNbXCJlZGl0UXVlc3Rpb25cIl0pe1xuICAgICAgICAgICAgdGhpcy5wYXJhbXMuZWRpdFF1ZXN0aW9uID0gcGFyYW1zW1wiZWRpdFF1ZXN0aW9uXCJdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYXJhbXMuZWRpdFF1ZXN0aW9uID0gZmFsc2U7XG4gICAgICAgIH0gXG5cbiAgICAgICAgdGhpcy5wYXJhbXMuaGlkZVF1ZXN0aW9uVHlwZSA9IHBhcmFtc1snaGlkZVF1ZXN0aW9uVHlwZSddO1xuICAgICAgICB0aGlzLnBhcmFtcy5oaWRlUXVlc3Rpb25UeXBlU2VsZWN0aW9uID0gcGFyYW1zWydoaWRlUXVlc3Rpb25UeXBlU2VsZWN0aW9uJ107XG5cblxuXG4gICAgICAgIC8vIEJVSUxEIHRoZSBzZWN0aW9uIHN1YiBlbGVtZW50IChubyBnZW5lcmF0ZWQgSFRNTCBhdCB0aGlzIHN0YWdlIHlldClcbiAgICAgICAgaWYodGhpcy5qc29uICYmIHRoaXMuanNvbltcInNlY3Rpb25zXCJdKXtcbiAgICAgICAgICAgIGxldCBzZWNzID0gdGhpcy5qc29uW1wic2VjdGlvbnNcIl07XG4gICAgICAgICAgICBzZWNzLmZvckVhY2goIChzZWMpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc2VjdGlvbk1vZGVsID0gbmV3IFNlY3Rpb24odGhpcy5tYWluTm9kZSwgc2VjLCAoKCF0aGlzLnBhcmFtcy5zaW5nbGVTZWN0aW9uKSA/IChuZXh0U2xpZGU6Ym9vbGVhbikgPT50aGlzLm1vdmVTZWN0aW9uKG5leHRTbGlkZSkgOiBudWxsICkpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvbnMucHVzaChzZWN0aW9uTW9kZWwpO1xuXG4gICAgICAgICAgICAgICAgLy8gbGV0IGl0ZW0gPSBzZWN0aW9uTW9kZWwubm9kZTtcbiAgICAgICAgICAgICAgICAvLyBpdGVtLm9uZHJhZ3N0YXJ0ID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAvLyAgICAgdGhpcy5kcmFnU3RhcnQoZSk7XG4gICAgICAgICAgICAgICAgLy8gfTtcbiAgICAgICAgICAgICAgICAvL2l0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgdGhpcy5kcmFnU3RhcnQpO1xuICAgICAgICAgICAgfSk7IFxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICBhbGVydChcIkNvdWxkIG5vdCBpbml0IHRoZSBtb2R1bGUuXCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5qc29uKTtcbiAgICAgICAgfSAgICAgXG4gICAgICAgIFxuICAgICAgICBcblxuICAgICAgICAvLyAgLS0tLS0tLS0tLS0tICAgIFNUQVJUIFRIRSBBUFBMSUNBVElPTiBJTiBkZWJ1Z1xuICAgICAgICAgaWYocGFyYW1zW1wiZGVidWdcIl0pe1xuICAgICAgICAgICAgdGhpcy5kZWJ1ZyA9IHBhcmFtc1tcImRlYnVnXCJdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZWJ1ZyA9IGZhbHNlO1xuICAgICAgICB9ICAgICAgIFxuXG4gICAgICAgIC8vICAtLS0tLS0tLS0tLS0gICAgU1RBUlQgVEhFIEFQUExJQ0FUSU9OIElOIGJ1aWxkIE9SIHJ1biBNT0RFXG4gICAgICAgIGlmKHBhcmFtc1tcIm1vZGVcIl0pe1xuICAgICAgICAgICAgdGhpcy5tb2RlID0gcGFyYW1zW1wibW9kZVwiXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubW9kZSA9ICdydW4nO1xuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMubW9kZSA9PT0gJ2J1aWxkJyl7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5ydW4oKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0IEluZGV4IGZyb20gSUQgXG4gICAgICovXG4gICAgZ2V0SW5kZXhGcm9tU2VjdGlvbklkKF9pZDpzdHJpbmcpe1xuICAgICAgICBmb3IobGV0IGk9MCA7IGk8dGhpcy5zZWN0aW9ucy5sZW5ndGggOyBpKyspe1xuICAgICAgICAgICAgaWYodGhpcy5zZWN0aW9uc1tpXS5pZCA9PSBfaWQpIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN3YXAgdG8gc2VjdGlvbiBlbGVtZW50IGZyb20gdGhlIHRhYmxlXG4gICAgICogQHBhcmFtIHMxIFxuICAgICAqIEBwYXJhbSBzMiBcbiAgICAgKi9cbiAgICBzd2FwU2VjdGlvbnMoczFfaWQ6bnVtYmVyLCBzMl9pZDpudW1iZXIpe1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnNlY3Rpb25zKTtcbiAgICAgICAgbGV0IHRlbXAgPSB0aGlzLnNlY3Rpb25zW3MxX2lkXTtcbiAgICAgICAgdGhpcy5zZWN0aW9uc1tzMV9pZF0gPSB0aGlzLnNlY3Rpb25zW3MyX2lkXTtcbiAgICAgICAgdGhpcy5zZWN0aW9uc1tzMl9pZF0gPSB0ZW1wO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnNlY3Rpb25zKTtcbiAgICB9XG5cbiAgICBcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8qKlxuICAgICAqIFdoZW4gYSBlbGVtZW50IGlzIHNlbGVjdGVkIHRvIGJlIGRyYWdnZWRcbiAgICAgKi9cbiAgICBkcmFnU3RhcnQoZSl7XG4gICAgICAgIGxldCB0aGVfcGFyZW50ID0gZmluZFBhcmVudEJ5U2VsZWN0b3IoZS50YXJnZXQsIFwiLmRyb3AtdGFyZ2V0XCIpO1xuICAgICAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3BsYWluJywgdGhlX3BhcmVudC5pZCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgLy8gZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgICBpZih0aGVfcGFyZW50KXsgXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJwYXJlbnQgZm91bmRcIik7XG4gICAgICAgICAgICAgICAgLy8gdGhlX3BhcmVudC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIC8vIGFsZXJ0KFwibm90IGZvdW5kXCIpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoZV9wYXJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAwKTtcbiAgICB9XG4gICAgZHJhZ0VudGVyKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgdGhlX3BhcmVudCA9IGZpbmRQYXJlbnRCeVNlbGVjdG9yKGUudGFyZ2V0LCBcIi5kcm9wLXRhcmdldFwiKTtcbiAgICAgICAgaWYodGhlX3BhcmVudCkge1xuICAgICAgICAgICAgdGhlX3BhcmVudC5jbGFzc0xpc3QuYWRkKCdkcmFnLW92ZXInKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBkcmFnT3ZlcihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGV0IHRoZV9wYXJlbnQgPSBmaW5kUGFyZW50QnlTZWxlY3RvcihlLnRhcmdldCwgXCIuZHJvcC10YXJnZXRcIik7XG4gICAgICAgIGlmKHRoZV9wYXJlbnQpIHtcbiAgICAgICAgICAgIHRoZV9wYXJlbnQuY2xhc3NMaXN0LmFkZCgnZHJhZy1vdmVyJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgZHJhZ0xlYXZlKGUpIHtcbiAgICAgICAgbGV0IHRoZV9wYXJlbnQgPSBmaW5kUGFyZW50QnlTZWxlY3RvcihlLnRhcmdldCwgXCIuZHJvcC10YXJnZXRcIik7XG4gICAgICAgIGlmKHRoZV9wYXJlbnQpIHtcbiAgICAgICAgICAgIHRoZV9wYXJlbnQuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZy1vdmVyJyk7XG4gICAgICAgICAgICAvLyB0aGVfcGFyZW50LmNoaWxkcmVuWzBdLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZHJhZ0VuZChlKSB7XG4gICAgICAgIGxldCB0aGVfcGFyZW50ID0gZmluZFBhcmVudEJ5U2VsZWN0b3IoZS50YXJnZXQsIFwiLmRyb3AtdGFyZ2V0XCIpO1xuICAgICAgICBpZih0aGVfcGFyZW50KSB7XG4gICAgICAgICAgICB0aGVfcGFyZW50LmNoaWxkcmVuWzBdLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFdoZW4gYW4gZWxlbWVudCBpcyBkcmFnZ2VkIG92ZXJcbiAgICAgKi9cbiAgICBkcm9wKGUpIHtcbiAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZy1vdmVyJyk7XG5cbiAgICAgICAgLy8gZ2V0IHRoZSBkcmFnZ2FibGUgZWxlbWVudFxuICAgICAgICBjb25zdCBpZCA9IGUuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQvcGxhaW4nKTtcbiAgICAgICAgbGV0IGRyYWdnYWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblxuICAgICAgICBsZXQgdGhlX3BhcmVudCA9IGZpbmRQYXJlbnRCeVNlbGVjdG9yKGUudGFyZ2V0LCBcIi5kcm9wLXRhcmdldFwiKTtcbiAgICAgICAgXG4gICAgICAgIGlmKGRyYWdnYWJsZSl7XG4gICAgICAgICAgICBkcmFnZ2FibGUuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoZV9wYXJlbnQuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZy1vdmVyJyk7XG4gICAgICAgIGRyYWdnYWJsZS5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnLW92ZXInKTtcblxuICAgICAgICBpZighdGhlX3BhcmVudCl7XG4gICAgICAgICAgICBhbGVydChcIm5vdCBwYXJlbnQgZm91bmRcIik7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgbGV0IGlkMSA9IHRoaXMuZ2V0SW5kZXhGcm9tU2VjdGlvbklkKHRoZV9wYXJlbnQuaWQpO1xuICAgICAgICAgICAgbGV0IGlkMiA9IHRoaXMuZ2V0SW5kZXhGcm9tU2VjdGlvbklkKGRyYWdnYWJsZS5pZCk7XG4gICAgXG4gICAgICAgICAgICBpZihpZDEgIT0gaWQyKXtcbiAgICAgICAgICAgICAgICB0aGlzLnN3YXBTZWN0aW9ucyhpZDEsIGlkMik7XG4gICAgICAgICAgICAgICAgc3dhcERvbSh0aGVfcGFyZW50LCBkcmFnZ2FibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICBcblxuICAgICAgICAvLyBzd2l0Y2ggdGhlIDIgZWxlbWVudCBpbiB0aGUgU0VDVElPTiBMSVNUXG4gICAgICAgIC8vIHRoaXMuc2VjdGlvbnNcbiAgICBcbiAgICAgICAgLy8gbGV0IHRhcmdldEVsZW0gPSBlLnRhcmdldC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIC8vIGxldCBkZXN0RWxlbSA9IGRyYWdnYWJsZS5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICAgICAgLy8gZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChkZXN0RWxlbSwgZS50YXJnZXQucGFyZW50Tm9kZSk7ICAvLyByZW1vdmUgY2hpbGRyZW5cbiAgICAgICAgLy8gZHJhZ2dhYmxlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQodGFyZ2V0RWxlbSwgZHJhZ2dhYmxlLnBhcmVudE5vZGUpO1xuICAgIFxuICAgICAgICAvLyAvLyBkaXNwbGF5IHRoZSBkcmFnZ2FibGUgZWxlbWVudFxuICAgICAgICAvLyBkcmFnZ2FibGUuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFxuXG5cbiAgICAvKipcbiAgICAgKiBFbnRlciBCVUlMRCBNT0RFIGZvciB1c2VyIHRvIGVkaXQgdGhlIGZvcm1cbiAgICAgKi9cbiAgICBidWlsZCgpe1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgdGhpcy5zZWN0aW9ucy5mb3JFYWNoKCAoc2VjOlNlY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHNlYy5idWlsZCh0aGlzLm1haW5Ob2RlLCB0aGlzLnBhcmFtcyk7XG4gICAgICAgICAgICBpZighdGhpcy5wYXJhbXMuc2luZ2xlU2VjdGlvbil7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5wYXJhbXMuZWRpdFF1ZXN0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gQlVJTEQgREVMRVRFIFNFQ1RJT04gQlROXG4gICAgICAgICAgICAgICAgICAgIGxldCBkZWxCdG4gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1wiY2xhc3NcIjpcImJ0biBidG4tZGFuZ2VyIGZvcm0tYnVpbGRlci1idG5cIiwgXCJ0eXBlXCI6XCJidXR0b25cIiwgXCJpZFwiOlwiYnRuLWRlbGV0ZS1zZWN0aW9uLVwiK3NlYy5pZH0pO1xuICAgICAgICAgICAgICAgICAgICBkZWxCdG4uaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmEgZmEtdHJhc2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JzsgIFxuXG4gICAgICAgICAgICAgICAgICAgIHNlYy5jb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZChkZWxCdG4pO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlbEJ0bi5vbmNsaWNrID0gKGV2ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbk5vZGUucmVtb3ZlQ2hpbGQoc2VjLm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9ucyA9IHRoaXMuc2VjdGlvbnMuZmlsdGVyKGZ1bmN0aW9uKGVsKSB7IHJldHVybiBlbC5pZCAhPSBzZWMuaWQ7IH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9ICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBpdGVtID0gc2VjLmRyYWdOb2RlO1xuICAgICAgICAgICAgaXRlbS5vbmRyYWdzdGFydCA9IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnQoZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIGdldCBhbGwgdGhlIERJViB0YWdnZXMgcGl4aXVtLWJveCBhbmQgY29ubmVjdCBsaXN0ZW5lciBmb3IgZHJhZyAvIGRyb3AgZXZlbnRzXG4gICAgICAgIGxldCBib3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucGl4aXVtLWJveFwiKTtcbiAgICAgICAgYm94ZXMuZm9yRWFjaChib3ggPT4ge1xuICAgICAgICAgICAgYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbnRlcicsIHRoaXMuZHJhZ0VudGVyKVxuICAgICAgICAgICAgYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgdGhpcy5kcmFnT3Zlcik7XG4gICAgICAgICAgICBib3guYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2xlYXZlJywgdGhpcy5kcmFnTGVhdmUpO1xuICAgICAgICAgICAgYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCB0aGlzLmRyYWdFbmQpO1xuICAgICAgICAgICAgYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCAoZSkgPT4gdGhpcy5kcm9wKGUpKTtcbiAgICAgICAgfSk7XG5cblxuXG4gICAgICAgIGlmKCF0aGlzLnBhcmFtcy5zaW5nbGVTZWN0aW9uICYmIHRoaXMucGFyYW1zLmVkaXRRdWVzdGlvbil7XG4gICAgICAgICAgICAvLyBCVUlMRCBBREQgU0VDVElPTiBCVE5cbiAgICAgICAgICAgIGxldCBhZGRCdXR0b24gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcImNsYXNzXCI6XCJidG4gYnRuLXN1Y2Nlc3MgZm9ybS1idWlsZGVyLWJ0biBmdWxsd2lkdGhcIiwgXCJ0eXBlXCI6XCJidXR0b25cIn0pOyAgXG4gICAgICAgICAgICBhZGRCdXR0b24uaW5uZXJUZXh0ID0gJ0FERCBTRUNUSU9OJzsgIFxuICAgICAgICAgICAgYWRkQnV0dG9uLm9uY2xpY2sgPSAoZXYpID0+IFxuICAgICAgICAgICAgeyAgIFxuICAgICAgICAgICAgICAgIGxldCBidG5TZWNBZGQgPSA8SFRNTEVsZW1lbnQ+ZXYudGFyZ2V0O1xuICAgICAgICAgICAgICAgIGxldCBzZWMgPSBuZXcgU2VjdGlvbih0aGlzLm1haW5Ob2RlLCBudWxsLCAoIChuZXh0U2xpZGU6Ym9vbGVhbikgPT50aGlzLm1vdmVTZWN0aW9uKG5leHRTbGlkZSkgKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9ucy5wdXNoKHNlYyk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluTm9kZS5yZW1vdmVDaGlsZChidG5TZWNBZGQpO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuZGVidWcpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1haW5Ob2RlLnJlbW92ZUNoaWxkKHN3aXRjaEJ1dHRvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlYy5idWlsZCh0aGlzLm1haW5Ob2RlLCB0aGlzLnBhcmFtcyk7XG4gICAgICAgICAgICAgICAgLy8gQlVJTEQgREVMRVRFIFNFQ1RJT04gQlROXG4gICAgICAgICAgICAgICAgbGV0IGJ0blNlY0RlbCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XCJjbGFzc1wiOlwiYnRuIGJ0bi1kYW5nZXIgZm9ybS1idWlsZGVyLWJ0blwiLCBcInR5cGVcIjpcImJ1dHRvblwiLCBcImlkXCI6XCJidG4tZGVsZXRlLXNlY3Rpb24tXCIrc2VjLmlkfSk7XG4gICAgICAgICAgICAgICAgYnRuU2VjRGVsLmlubmVySFRNTCA9IGA8aSBjbGFzcz1cImZhIGZhLXRyYXNoXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPmA7ICBcbiAgICAgICAgICAgICAgICBidG5TZWNEZWwub25jbGljayA9IChldiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbk5vZGUucmVtb3ZlQ2hpbGQoc2VjLm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25zID0gdGhpcy5zZWN0aW9ucy5maWx0ZXIoZnVuY3Rpb24oZWwpIHsgcmV0dXJuIGVsLmlkICE9IHNlYy5pZDsgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2VjLmNvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKGJ0blNlY0RlbCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm1haW5Ob2RlLmFwcGVuZENoaWxkKGJ0blNlY0FkZCk7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5kZWJ1Zyl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFpbk5vZGUuYXBwZW5kQ2hpbGQoc3dpdGNoQnV0dG9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9OyAgXG4gICAgICAgICAgICB0aGlzLm1haW5Ob2RlLmFwcGVuZENoaWxkKGFkZEJ1dHRvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCVUlMRCBUSEUgU1dJVENIIFVJIEJVVFRPTiBUTyBETyBUTyBSVU4gTU9ERSBJRiBERUJVRy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGxldCBzd2l0Y2hCdXR0b24gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcImNsYXNzXCI6XCJidG4gYnRuLXByaW1hcnkgZm9ybS1idWlsZGVyLWJ0blwiLCBcInR5cGVcIjpcImJ1dHRvblwifSk7ICBcbiAgICAgICAgc3dpdGNoQnV0dG9uLmlubmVyVGV4dCA9IFwiR08gVE8gUlVOXCI7ICBcbiAgICAgICAgc3dpdGNoQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiBcbiAgICAgICAgeyAgIFxuICAgICAgICAgICAgdGhpcy5ydW4oKTtcbiAgICAgICAgfTsgIFxuICAgICAgICBpZih0aGlzLmRlYnVnKXtcbiAgICAgICAgICAgIHRoaXMubWFpbk5vZGUuYXBwZW5kQ2hpbGQoc3dpdGNoQnV0dG9uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLm5vZGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIH1cblxuXG5cblxuICAgIC8qKlxuICAgICAqIFJ1biBmb3IgdXNlciB0byBhbnN3ZXIgdGhlIHF1ZXN0aW9uc1xuICAgICAqL1xuICAgIHJ1bigpe1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgdGhpcy5zZWN0aW9ucy5mb3JFYWNoKCAoc2VjKSA9PiB7XG4gICAgICAgICAgICBzZWMucnVuKHRoaXMubWFpbk5vZGUpO1xuICAgICAgICB9KTsgXG5cbiAgICAgICAgLy9DcmVhdGUgU2F2ZSBidG5cbiAgICAgICAgdGhpcy5zYXZlQnRuID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XCJjbGFzc1wiOlwiYnRuIGJ0bi1zdWNjZXNzIGZvcm0tYnVpbGRlci1idG5cIiwgXCJ0eXBlXCI6XCJzdWJtaXRcIiwgXCJpZFwiOlwiZm9ybS1idWlsZGVyLXNhdmUtZmluYWwtYnRuXCJ9KTsgIFxuICAgICAgICB0aGlzLnNhdmVCdG4uaW5uZXJUZXh0ID0gXCJTYXZlXCI7ICBcbiAgICAgICAgdGhpcy5zYXZlQnRuLm9uY2xpY2sgPSAoZSkgPT4gXG4gICAgICAgIHsgICBcbiAgICAgICAgICAgIGlmKHRoaXMuc2VjdGlvbnNbdGhpcy5jdXJyZW50Tm9kZV0uaXNDb21wbGV0ZWQoKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21waWxlSnNvbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgYWxlcnQoXCJQbGVhc2UgY29tcGxldGUgdGhlIGZvcm1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07ICBcbiAgICAgICAgaWYoKHRoaXMuY3VycmVudE5vZGUgPT0gdGhpcy5zZWN0aW9ucy5sZW5ndGgtMSkgJiYgIXRoaXMucGFyYW1zLnNpbmdsZVNlY3Rpb24pe1xuICAgICAgICAgICAgLy9SZW1vdmUgTmV4dCBidG5cbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tbmV4dC1zZWN0aW9uLScrdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5pZCkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tbmV4dC1zZWN0aW9uLScrdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5pZCkuYWZ0ZXIodGhpcy5zYXZlQnRuKTtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLnBhcmFtcy5zaW5nbGVTZWN0aW9uKXtcbiAgICAgICAgICAgIC8vRGlzcGxheSBzYXZlQnRuXG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25zW3RoaXMuY3VycmVudE5vZGVdLm5vZGUuYXBwZW5kQ2hpbGQodGhpcy5zYXZlQnRuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLSBERUJVRyBTQVZFIEJVVFRPTiAtLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBsZXQgc2F2ZUJ1dHRvbiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1wiY2xhc3NcIjpcImJ0biBidG4tc3VjY2VzcyBmb3JtLWJ1aWxkZXItYnRuXCIsIFwidHlwZVwiOlwiYnV0dG9uXCIsIFwiaWRcIjpcImZvcm0tYnVpbGRlci1zYXZlLWJ0blwifSk7ICBcbiAgICAgICAgc2F2ZUJ1dHRvbi5pbm5lclRleHQgPSBcIlNBVkVcIjsgIFxuICAgICAgICBzYXZlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiBcbiAgICAgICAgeyAgIFxuICAgICAgICAgICAgdGhpcy5jb21waWxlSnNvbigpO1xuICAgICAgICB9OyAgXG4gICAgICAgIGlmKHRoaXMuZGVidWcpe1xuICAgICAgICAgICAgdGhpcy5tYWluTm9kZS5hcHBlbmRDaGlsZChzYXZlQnV0dG9uKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQlVJTEQgVEhFIFNXSVRDSCBVSSBCVVRUT04gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgbGV0IHN3aXRjaEJ1dHRvbiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1wiY2xhc3NcIjpcImJ0biBidG4tcHJpbWFyeSBmb3JtLWJ1aWxkZXItYnRuXCIsIFwidHlwZVwiOlwiYnV0dG9uXCJ9KTsgIFxuICAgICAgICBzd2l0Y2hCdXR0b24uaW5uZXJUZXh0ID0gXCJHTyBUTyBCVUlMRCBNT0RFXCI7ICAgXG4gICAgICAgIHN3aXRjaEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gXG4gICAgICAgIHsgICBcbiAgICAgICAgICAgIHRoaXMuYnVpbGQoKTtcbiAgICAgICAgfTsgIFxuICAgICAgICBpZih0aGlzLmRlYnVnKXtcbiAgICAgICAgICAgIHRoaXMubWFpbk5vZGUuYXBwZW5kQ2hpbGQoc3dpdGNoQnV0dG9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgIH1cblxuICAgIHJlc3VsdCgpe1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgQUxMIHRoZSBub2Rlc1xuICAgICAqL1xuICAgIGNsZWFyKCl7XG4gICAgICAgIGlmKHRoaXMubWFpbk5vZGUpe1xuICAgICAgICAgICAgdGhpcy5tYWluTm9kZS5pbm5lckhUTUwgPSAnJzsgIC8vIGNsZWFyIGFsbCB0aGUgc3ViIG5vZGVzXG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25zLmZvckVhY2goIChzZWMpID0+IHtcbiAgICAgICAgICAgICAgICBpZihzZWMpe1xuICAgICAgICAgICAgICAgICAgICBzZWMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBkaXNwbGF5IGFsbCB0aGUgcXVlc3Rpb25cbiAgICAgKi9cbiAgICBkaXNwbGF5KCl7XG4gICAgICAgaWYodGhpcy5jdXJyZW50Tm9kZT49MCAmJiB0aGlzLmN1cnJlbnROb2RlPHRoaXMuc2VjdGlvbnMubGVuZ3RoKXtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvbnNbdGhpcy5jdXJyZW50Tm9kZV0uc2hvdygpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBpbGUgYSBCSUcgSlNPTiB0byBzZXJpYWxpemUgdGhlIHdob2xlIGZvcm1cbiAgICAgKi9cbiAgICBjb21waWxlSnNvbigpe1xuICAgICAgICBsZXQgYXJyOiBhbnlbXTtcbiAgICAgICAgYXJyID0gW107XG4gICAgICAgIHRoaXMuc2VjdGlvbnMuZm9yRWFjaCggKHNlYzpTZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBhcnIucHVzaChzZWMuY29tcGlsZUpzb24oKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgZmluYWxPdXRwdXQgPSBKU09OLnN0cmluZ2lmeSgge1wic2VjdGlvbnNcIjphcnJ9ICk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdmaW5hbE91dHB1dCcpO1xuICAgICAgICBjb25zb2xlLmxvZyhmaW5hbE91dHB1dCk7XG4gICAgICAgIHJldHVybiBmaW5hbE91dHB1dDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIE1vdmUgdGhlIHNsaWRlciBvciBkaXNwbGF5IHRvIHRoZSBuZXh0IHNlY3Rpb25cbiAgICAgKi9cbiAgICBtb3ZlU2VjdGlvbihuZXh0U2xpZGU6Ym9vbGVhbil7XG4gICAgICAgIC8vIGlmIG1vdmUgZm9yd2FyZFxuICAgICAgICBpZihuZXh0U2xpZGUpe1xuICAgICAgICAgICAgLy8gbWFraW5nIHN1cmUgSSBhbSBhbGxvd2VkIHRvIG1vdmUgdG8gdGhlIG5leHQgc2xpZGUgaWYgdGhlcmUgaXMgb25lXG4gICAgICAgICAgICBpZih0aGlzLmN1cnJlbnROb2RlPj0wICYmIHRoaXMuY3VycmVudE5vZGU8dGhpcy5zZWN0aW9ucy5sZW5ndGgtMSl7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSsrO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvbnNbdGhpcy5jdXJyZW50Tm9kZV0uc2hvdygpO1xuICAgICAgICAgICAgICAgIC8vRGlzcGxheSBQcmV2aW91cyBidG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuLXByZXZpb3VzLXNlY3Rpb24tJyt0aGlzLnNlY3Rpb25zW3RoaXMuY3VycmVudE5vZGVdLmlkKS5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5jdXJyZW50Tm9kZSA9PSB0aGlzLnNlY3Rpb25zLmxlbmd0aC0xKXtcbiAgICAgICAgICAgICAgICAgICAgLy9SZW1vdmUgTmV4dCBidG5cbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1uZXh0LXNlY3Rpb24tJyt0aGlzLnNlY3Rpb25zW3RoaXMuY3VycmVudE5vZGVdLmlkKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tbmV4dC1zZWN0aW9uLScrdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5pZCkuYWZ0ZXIodGhpcy5zYXZlQnRuKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL0Rpc3BsYXkgTmV4dCBidG5cbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1uZXh0LXNlY3Rpb24tJyt0aGlzLnNlY3Rpb25zW3RoaXMuY3VycmVudE5vZGVdLmlkKS5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiWW91IGFscmVhZHkgYXJlIG9uIHRoZSBuZXh0IHNsaWRlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIC8vIG1ha2luZyBzdXJlIEkgYW0gYWxsb3dlZCB0byBtb3ZlIHRvIHRoZSBwcmV2aW91cyBzbGlkZSBpZiB0aGVyZSBpcyBvbmVcbiAgICAgICAgICAgIGlmKHRoaXMuY3VycmVudE5vZGU+PTEgJiYgdGhpcy5jdXJyZW50Tm9kZTx0aGlzLnNlY3Rpb25zLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZS0tO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvbnNbdGhpcy5jdXJyZW50Tm9kZV0uc2hvdygpO1xuICAgICAgICAgICAgICAgIC8vRGlzcGxheSBOZXh0IGJ0blxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tbmV4dC1zZWN0aW9uLScrdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5pZCkuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuY3VycmVudE5vZGU9PTApIHtcbiAgICAgICAgICAgICAgICAgICAgLy9SZW1vdmUgUHJldmlvdXMgYnRuXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tcHJldmlvdXMtc2VjdGlvbi0nK3RoaXMuc2VjdGlvbnNbdGhpcy5jdXJyZW50Tm9kZV0uaWQpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiWW91IGFscmVhZHkgYXJlIG9uIHRoZSBmaXJzdCBzbGlkZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJMaWJyYXJ5XCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3JlbWl0YWNoZS9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9zZWN0aW9uLnRzXCIpOyIsImltcG9ydCB7QmxvY2ssIEJsb2NrVHlwZX0gZnJvbSBcIi4vYmxvY2svYmxvY2tcIjtcbmltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4vYnVpbGRlclwiO1xuXG5pbXBvcnQge1BhcmFtc30gZnJvbSAnLi9tYWluJztcblxuLyoqXG4gKiBTRUNUSU9OIGNsYXNzIGNvbnRhaW5zIGEgcG90ZW50aWFsIGxpc3Qgb2YgcXVlc3Rpb24gdGhhdCBpcyBkaXNwbGF5ZWQgb24gdGhlIHNhbWUgcGFnZSBcbiAqL1xuZXhwb3J0IGNsYXNzIFNlY3Rpb257XG4gICAgYmxvY2tzOkJsb2NrW107IFxuICAgIHRpdGxlOiBzdHJpbmc7ICAgXG4gICAgLy8gbmFtZTogc3RyaW5nO1xuICAgIG91dHB1dDogc3RyaW5nO1xuICAgIGlkOnN0cmluZztcbiAgICBwYXJlbnQ6IEhUTUxFbGVtZW50O1xuICAgIG5vZGU6IEhUTUxFbGVtZW50O1xuICAgIGNhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBjb250ZW50V3JhcHBlcjogSFRNTEVsZW1lbnQ7XG4gICAgZHJhZ05vZGU6IEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoX3BhcmVudDpIVE1MRWxlbWVudCwgX2pzb246Rm9ybURhdGEsIF9jYWxsYmFjazpGdW5jdGlvbil7XG4gICAgICAgIHRoaXMucGFyZW50ID0gX3BhcmVudDtcbiAgICAgICAgdGhpcy5ibG9ja3MgPSBbXTtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IF9jYWxsYmFjaztcbiAgICAgICAgdGhpcy50aXRsZSA9ICcnO1xuICAgICAgICAvLyB0aGlzLm5hbWUgPSBcImRlZmF1bHRfbmFtZVwiO1xuICAgICAgICB0aGlzLmlkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpO1xuXG4gICAgICAgIGlmKF9qc29uKXtcbiAgICAgICAgICAgIGlmKF9qc29uW1widGl0bGVcIl0pe1xuICAgICAgICAgICAgICAgIHRoaXMudGl0bGUgPSBfanNvbltcInRpdGxlXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYoX2pzb25bXCJuYW1lXCJdKXtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLm5hbWUgPSBfanNvbltcIm5hbWVcIl07XG4gICAgICAgICAgICAvLyB9XG4gICAgXG4gICAgICAgICAgICBpZihfanNvbltcImJsb2Nrc1wiXSl7XG4gICAgICAgICAgICAgICAgX2pzb25bXCJibG9ja3NcIl0uZm9yRWFjaCggKGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJsb2NrTW9kZWwgPSBuZXcgQmxvY2soYik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tzLnB1c2goYmxvY2tNb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIC8vYmxvY2tNb2RlbC5ydW4odGhpcy5ub2RlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSB0aGUgZm9ybSBpbiBCVUlMREVSIE1PREUgZm9yIHRoZSB1c2VyIHRvIGVkaXQgdGhlIGZvcm0gaXRzZWxmXG4gICAgICogQHBhcmFtIG5vZGUgXG4gICAgICovXG4gICAgYnVpbGQoX25vZGUsIF9wYXJhbXM6UGFyYW1zKXtcbiAgICAgICAgdGhpcy5jb250ZW50V3JhcHBlciA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicGl4aXVtLWJveC1jb250ZW50IGRyb3AtdGFyZ2V0XCIsXG4gICAgICAgICAgICAvLyBcImRyYWdnYWJsZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJpZFwiOiB0aGlzLmlkXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBfbm9kZS5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRXcmFwcGVyKTtcblxuICAgICAgICB0aGlzLm5vZGUgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInJvdyBwaXhpdW0tYm94XCIsXG4gICAgICAgICAgICBcImlkXCI6XCJob2xkZXItXCIrdGhpcy5pZFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyB0aGlzLm5vZGUub25kcmFnc3RhcnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKFwiZHJhZyBzdGFydFwiKTtcbiAgICAgICAgLy8gICAgIChIVE1MRWxlbWVudChldmVudC50YXJnZXQpKS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgLy8gfTtcblxuICAgICAgICB0aGlzLmRyYWdOb2RlID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaVwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwiZmEgZmEtdGggZHJhZy1jdXJzb3JcIixcbiAgICAgICAgICAgIFwiZHJhZ2dhYmxlXCI6IHRydWUsXG4gICAgICAgICAgICBcImlkXCI6XCJkcmFnTm9kLVwiK3RoaXMuaWRcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHRoaXMuZHJhZ05vZGUuaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmEgZmEtYmFyc1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nO1xuICAgICAgICAvLyB0aGlzLmNvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuZHJhZ05vZGUpO1xuXG5cblxuICAgICAgICAvLyBDcmVhdGUgc2VjdGlvbiBoZWFkZXIgZGl2IHdpdGggdGl0bGUgYW5kIG5hbWUgaW5wdXRcbiAgICAgICAgbGV0IG5vZGVIZWFkZXIgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1wiY2xhc3NcIjogXCJyb3cgcGl4aXVtLWJsb2NrLWJ1aWxkIHBpeGl1bS1ibG9jay1idWlsZC1oZWFkZXJcIn0pO1xuICAgICAgICBcbiAgICAgICAgQnVpbGRlci5hZGRCdWlsZGVySW5wdXRUZXh0KG5vZGVIZWFkZXIsIHRoaXMuaWQsIHRoaXMudGl0bGUsIFwiVGl0bGUgU2VjdGlvblwiLCAodmFsKSA9PiB7dGhpcy50aXRsZT12YWw7fSwgXCJjb2wtbWQtMTJcIiApO1xuICAgICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKG5vZGVIZWFkZXIpO1xuICAgICAgICBub2RlSGVhZGVyLmNoaWxkcmVuWzBdLmFwcGVuZENoaWxkKHRoaXMuZHJhZ05vZGUpO1xuICAgICAgICAvL25vZGVIZWFkZXIuaW5zZXJ0QmVmb3JlKHRoaXMuZHJhZ05vZGUsIG5vZGVIZWFkZXIuY2hpbGRyZW5bMF0pO1xuICAgICAgICBcblxuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBHTyBUSFJPVUdIIEVBQ0ggQkxPQ0sgV0lUSElOIFRIRSBTRUNUSU9OXG4gICAgICAgIC8vIFdlIGFyZSBnb2luZyB0byBidWlsZCB0aGUgdmFyaW91cyBibG9ja3MgIVxuICAgICAgICB0aGlzLmJsb2Nrcy5mb3JFYWNoKCAoYmxrOkJsb2NrKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBkZWxCdG4gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1wiY2xhc3NcIjpcImZvcm0tYnVpbGRlci1idG4gYnV0dG9uLWRlbGV0ZVwiLCBcInR5cGVcIjpcImJ1dHRvblwiLCBcInN0eWxlXCI6XCJkaXNwbGF5OmJsb2NrXCJ9KTtcbiAgICAgICAgICAgIGRlbEJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYSBmYS10cmFzaFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nOyBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gYmxrLm5vZGUuYXBwZW5kQ2hpbGQoZGVsQnRuKTtcbiAgICAgICAgICAgIGlmKCFfcGFyYW1zLmVkaXRRdWVzdGlvbil7XG4gICAgICAgICAgICAgICAgZGVsQnRuID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAvLyBCVUlMRCBERUxFVEUgQk9MQ0sgQlROIEFDVElPTlxuICAgICAgICAgICAgICAgIGRlbEJ0bi5vbmNsaWNrID0gKGV2ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50V3JhcHBlci5yZW1vdmVDaGlsZChibGsubm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tzID0gdGhpcy5ibG9ja3MuZmlsdGVyKGZ1bmN0aW9uKGVsKSB7IHJldHVybiBlbC5pZCAhPSBibGsuaWQ7IH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxrLmJ1aWxkKHRoaXMuY29udGVudFdyYXBwZXIsIF9wYXJhbXMsIGRlbEJ0bik7ICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgICAvLyBCVUlMRCBBREQgQk9MQ0sgQlROXG4gICAgICAgIGlmKF9wYXJhbXMuZWRpdFF1ZXN0aW9uKXtcbiAgICAgICAgICAgIGxldCBhZGRCdXR0b24gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcImNsYXNzXCI6XCJidG4gYnRuLXN1Y2Nlc3MgZm9ybS1idWlsZGVyLWJ0blwiLCBcInR5cGVcIjpcImJ1dHRvblwifSk7ICBcbiAgICAgICAgICAgIGFkZEJ1dHRvbi5pbm5lckhUTUwgPSAnKyc7ICBcbiAgICAgICAgICAgIGFkZEJ1dHRvbi5vbmNsaWNrID0gKGV2KSA9PiBcbiAgICAgICAgICAgIHsgICBcbiAgICAgICAgICAgICAgICBsZXQgYnRuQmxrQWRkID0gPEhUTUxFbGVtZW50PmV2LnRhcmdldDtcbiAgICAgICAgICAgICAgICAvLyBBREQgTkVXIEJPTENLXG4gICAgICAgICAgICAgICAgbGV0IGJsayA9IG5ldyBCbG9jayhudWxsKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJsb2Nrcy5wdXNoKGJsayk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50V3JhcHBlci5yZW1vdmVDaGlsZChidG5CbGtBZGQpO1xuICAgICAgICAgICAgICAgIGxldCBidG5TZWNEZWw7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5jYWxsYmFjayl7XG4gICAgICAgICAgICAgICAgICAgIGJ0blNlY0RlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuLWRlbGV0ZS1zZWN0aW9uLVwiK3RoaXMuaWQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyLnJlbW92ZUNoaWxkKGJ0blNlY0RlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJsay5idWlsZCh0aGlzLmNvbnRlbnRXcmFwcGVyLCBfcGFyYW1zLCBmYWxzZSwgXCJcIik7XG4gICAgICAgICAgICAgICAgLy8gQlVJTEQgREVMRVRFIEJPTENLIEJUTlxuICAgICAgICAgICAgICAgIGxldCBidG5CbGtEZWwgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1wiY2xhc3NcIjpcImZvcm0tYnVpbGRlci1idG4gYnV0dG9uLWRlbGV0ZSBmbG9hdC1yaWdodFwiLCBcInR5cGVcIjpcImJ1dHRvblwiLCBcInN0eWxlXCI6XCJkaXNwbGF5OmJsb2NrXCJ9KTtcbiAgICAgICAgICAgICAgICBidG5CbGtEZWwuaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmEgZmEtdHJhc2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JzsgIFxuICAgICAgICAgICAgICAgIGJ0bkJsa0RlbC5vbmNsaWNrID0gKGV2ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50V3JhcHBlci5yZW1vdmVDaGlsZChibGsubm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tzID0gdGhpcy5ibG9ja3MuZmlsdGVyKGZ1bmN0aW9uKGVsKSB7IHJldHVybiBlbC5pZCAhPSBibGsuaWQ7IH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJsay5oZWFkZXIuaW5zZXJ0QmVmb3JlKGJ0bkJsa0RlbCwgYmxrLmhlYWRlci5maXJzdENoaWxkKTtcbiAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKGJ0bkJsa0FkZCk7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5jYWxsYmFjayl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQoYnRuU2VjRGVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9OyAgXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKGFkZEJ1dHRvbik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRXcmFwcGVyKTtcblxuICAgICAgICBfbm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpO1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBSdW4gdGhlIGZvcm0gZm9yIHVzZXIgdG8gYW5zd2VyXG4gICAgICogQHBhcmFtIG5vZGUgXG4gICAgICovXG4gICAgcnVuKG5vZGUpe1xuXG4gICAgICAgIHRoaXMubm9kZSA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicm93IHBpeGl1bS1ib3hcIlxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IG5hbWVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xuICAgICAgICBuYW1lTm9kZS5pbm5lckhUTUwgPSB0aGlzLnRpdGxlO1xuICAgICAgICAvLyBsZXQgaHJOYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImhyXCIpO1xuICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQobmFtZU5vZGUpO1xuICAgICAgICAvLyB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoaHJOYW1lKTtcblxuICAgICAgICB0aGlzLmJsb2Nrcy5mb3JFYWNoKCAoYikgPT4ge1xuICAgICAgICAgICAgYi5ydW4odGhpcy5ub2RlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ25vZGUuc2luZ2xlU2VjdGlvbicpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmNhbGxiYWNrKTtcbiAgICAgICAgaWYodGhpcy5jYWxsYmFjayl7XG4gICAgICAgICAgICAvLyBCVUlMRCBUSEUgQlVUVE9OLiBQUkVWSU9VUyBCVVRUT04gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIGxldCBwcmV2QnV0dG9uID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XCJjbGFzc1wiOlwiYnRuIGJ0bi1wcmltYXJ5IGZvcm0tYnVpbGRlci1idG5cIiwgXCJpZFwiOiBcImJ0bi1wcmV2aW91cy1zZWN0aW9uLVwiK3RoaXMuaWQsIFwidHlwZVwiOlwiYnV0dG9uXCJ9KTsgIFxuICAgICAgICAgICAgcHJldkJ1dHRvbi5pbm5lclRleHQgPSBcIlByZXZpb3VzXCI7XG4gICAgICAgICAgICBwcmV2QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7ICBcbiAgICAgICAgICAgIHByZXZCdXR0b24ub25jbGljayA9ICgpID0+IFxuICAgICAgICAgICAgeyAgIFxuICAgICAgICAgICAgICAgIGlmKHRoaXMuY2FsbGJhY2spe1xuICAgICAgICAgICAgICAgICAgICAvLyBUUlVFIEZPUiBORVhUIFNMSURFXG4gICAgICAgICAgICAgICAgICAgIC8vIEZBTFNFIEZPUiBQUkVWIFNMSURFXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07ICBcbiAgICAgICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChwcmV2QnV0dG9uKTtcblxuICAgICAgICAgICAgLy8gQlVJTEQgVEhFIEJVVFRPTi4gTkVYVCBCVVRUT04gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIGxldCBuZXh0QnV0dG9uID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XCJjbGFzc1wiOlwiYnRuIGJ0bi1wcmltYXJ5IGZvcm0tYnVpbGRlci1idG5cIiwgXCJpZFwiOiBcImJ0bi1uZXh0LXNlY3Rpb24tXCIrdGhpcy5pZCwgXCJ0eXBlXCI6XCJidXR0b25cIn0pOyAgXG4gICAgICAgICAgICBuZXh0QnV0dG9uLmlubmVyVGV4dCA9IFwiTmV4dFwiOyAgXG4gICAgICAgICAgICBuZXh0QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiBcbiAgICAgICAgICAgIHsgICBcbiAgICAgICAgICAgICAgICBpZih0aGlzLmlzQ29tcGxldGVkKCkpe1xuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmNhbGxiYWNrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRSVUUgRk9SIE5FWFQgU0xJREVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZBTFNFIEZPUiBQUkVWIFNMSURFXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiUGxlYXNlIGNvbXBsZXRlIHRoZSBmb3JtLi4uXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07ICBcbiAgICAgICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChuZXh0QnV0dG9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubm9kZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpO1xuICAgIH1cblxuXG4gICAgY2xlYXIoKXtcbiAgICAgICAgaWYodGhpcy5ub2RlKXtcbiAgICAgICAgICAgIHRoaXMubm9kZS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJsb2Nrcy5mb3JFYWNoKCAoYmxrKSA9PiB7XG4gICAgICAgICAgICBibGsuY2xlYXIoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0Tm9kZSgpe1xuICAgICAgICBhbGVydCh0aGlzLm5vZGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIGN1cnJlbnQgc2VjdGlvblxuICAgICAqL1xuICAgIHNob3coKXtcbiAgICAgICAgdGhpcy5ub2RlLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSB0aGUgY3VycmVudCBzZWN0aW9uIG9uIHNjcmVlblxuICAgICAqL1xuICAgIGhpZGUoKXtcbiAgICAgICAgdGhpcy5ub2RlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIHRoZSBGT1JNIGhhcyBiZWVuIGZ1bGx5IGNvbXBsZXRlZCAtIEFsbCBibG9ja3MgaGF2ZSBhIHZhbGlkIGFuc3dlclxuICAgICAqL1xuICAgIGlzQ29tcGxldGVkKCl7XG4gICAgICAgIGxldCBpc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuYmxvY2tzLmZvckVhY2goIChibGs6QmxvY2spPT57XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhibGsuYW5zd2VyKTtcbiAgICAgICAgICAgIGlmKGJsayAmJiAoYmxrLmFuc3dlci5sZW5ndGg9PTApICYmIChibGsudHlwZSAhPT0gQmxvY2tUeXBlLk5PQU5TV0VSKSl7XG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpc0NvbXBsZXRlZDtcbiAgICB9XG5cblxuICAgIGNvbXBpbGVKc29uKCl7XG4gICAgICAgIGxldCBhcnI6YW55W107XG4gICAgICAgIGFyciA9IFtdO1xuICAgICAgICB0aGlzLmJsb2Nrcy5mb3JFYWNoKCAoYmxrOkJsb2NrKSA9PiB7XG4gICAgICAgICAgICBhcnIucHVzaChibGsuY29tcGlsZUpzb24oKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgc2VjID0ge1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiB0aGlzLnRpdGxlLFxuICAgICAgICAgICAgXCJibG9ja3NcIjphcnJcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VjO1xuICAgIH1cbn0iLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIkxpYnJhcnlcIl0gPSByZXF1aXJlKFwiLSEvVXNlcnMvcmVtaXRhY2hlL1dvcmtzcGFjZS9mb3JtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcyEuL2Jsb2NrLnRzXCIpOyIsImltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4uL2J1aWxkZXJcIjtcbmltcG9ydCB7Q2hvaWNlfSBmcm9tIFwiLi9jaG9pY2VcIjtcblxuaW1wb3J0IHtCbG9ja1NsaWRlcn0gZnJvbSBcIi4vYmxvY2tTbGlkZXJcIjtcbmltcG9ydCB7QmxvY2tGcmVldGV4dH0gZnJvbSBcIi4vYmxvY2tGcmVldGV4dFwiO1xuaW1wb3J0IHtCbG9ja1JhZGlvfSBmcm9tIFwiLi9ibG9ja1JhZGlvXCI7XG5pbXBvcnQgeyBCbG9ja0NoZWNrYm94IH0gZnJvbSBcIi4vYmxvY2tDaGVja2JveFwiO1xuaW1wb3J0IHtCbG9ja0xvbmd0ZXh0fSBmcm9tIFwiLi9ibG9ja0xvbmd0ZXh0XCI7XG5pbXBvcnQge0Jsb2NrVGFnc30gZnJvbSBcIi4vQmxvY2tUYWdzXCI7XG5pbXBvcnQgeyBQYXJhbXMgfSBmcm9tIFwiLi4vbWFpblwiO1xuLy8gaW1wb3J0IHtCbG9ja05vYW5zd2VyfSBmcm9tIFwiLi9ibG9ja05vYW5zd2VyXCI7XG5cbmV4cG9ydCBlbnVtIEJsb2NrVHlwZSB7XG4gICAgRlJFRVRFWFQgPSAxLFxuICAgIFJBRElPID0gMixcbiAgICBTTElERVIgPSAzLFxuICAgIENIRUNLQk9YID0gNCxcbiAgICBMT05HVEVYVCA9IDUsXG4gICAgTk9BTlNXRVIgPSA2LFxuICAgIFRBR1MgPSA3XG59XG5cblxuLyoqXG4gKiBBIEJsb2NrIGlzIGEgbGlzdCBcbiAqL1xuZXhwb3J0IGNsYXNzIEJsb2Nre1xuICAgIHR5cGU6bnVtYmVyO1xuICAgIHRleHQ6c3RyaW5nO1xuICAgIGFuc3dlcjphbnk7XG4gICAgbWluOnN0cmluZztcbiAgICBtYXg6c3RyaW5nO1xuICAgIHN0ZXA6c3RyaW5nO1xuICAgIGNob2ljZXM6Q2hvaWNlW107XG5cbiAgICBoZWFkZXI6SFRNTEVsZW1lbnQ7XG5cbiAgICBvdXRwdXQ6c3RyaW5nO1xuICAgIGlkOnN0cmluZztcbiAgICBqc29uOmFueTtcblxuICAgIG5vZGU6IEhUTUxFbGVtZW50O1xuXG4gICAgLypcbiAgICBcInRpdGxlXCI6IFwiREVMRUdBVElPTjogPGJyPiA8YnI+IEhvdyBza2lsbGVkIGRvIHlvdSBmZWVsIHRvZGF5IGFib3V0IHlvdXIgYWJpbGl0eSB0byBkZWxlZ2F0ZT9cIixcbiAgICBcInR5cGVcIjogNCxcbiAgICBcImdyb3VwXCI6IDEsXG4gICAgXCJsYWJlbFwiOiBcbiAgICAqL1xuXG4gICAgY29uc3RydWN0b3IoX2pzb246Rm9ybURhdGEgPSBudWxsKXtcbiAgICAgICAgdGhpcy5qc29uID0gX2pzb247XG4gICAgICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gICAgICAgIHRoaXMudHlwZSA9IDE7XG4gICAgICAgIHRoaXMubWluID0gXCJcIjtcbiAgICAgICAgdGhpcy5tYXggPSBcIlwiO1xuICAgICAgICB0aGlzLnN0ZXAgPSBcIlwiO1xuICAgICAgICB0aGlzLmFuc3dlciA9IFwiXCI7XG4gICAgICAgIHRoaXMuY2hvaWNlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNyk7XG5cbiAgICAgICAgaWYoX2pzb24pe1xuICAgICAgICAgICAgaWYoX2pzb25bXCJ0ZXh0XCJdKXtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBfanNvbltcInRleHRcIl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKF9qc29uW1widHlwZVwiXSl7XG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gX2pzb25bXCJ0eXBlXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFuc3dlciA9IFwiXCI7XG4gICAgICAgICAgICBpZihfanNvbltcImFuc3dlclwiXSl7XG4gICAgICAgICAgICAgICAgdGhpcy5hbnN3ZXIgPSBfanNvbltcImFuc3dlclwiXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoX2pzb25bXCJtaW5cIl0pe1xuICAgICAgICAgICAgICAgIHRoaXMubWluID0gX2pzb25bXCJtaW5cIl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihfanNvbltcIm1heFwiXSl7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXggPSBfanNvbltcIm1heFwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKF9qc29uW1wic3RlcFwiXSl7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGVwID0gX2pzb25bXCJzdGVwXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZih0aGlzLnR5cGUgPT09IEJsb2NrVHlwZS5SQURJTyB8fCB0aGlzLnR5cGUgPT09IEJsb2NrVHlwZS5DSEVDS0JPWCl7XG4gICAgICAgICAgICAgICAgLy8gbG9hZCBhZGRpdGlvbmFsIGRhdGFcbiAgICAgICAgICAgICAgICBpZihfanNvbltcImNob2ljZXNcIl0pe1xuICAgICAgICAgICAgICAgICAgICBfanNvbltcImNob2ljZXNcIl0uZm9yRWFjaChjaG9pY2VKc29uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaG9pY2UgPSBuZXcgQ2hvaWNlKGNob2ljZUpzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaG9pY2VzLnB1c2goY2hvaWNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vdGhpcy5jaG9pY2VzID0gX2pzb25bXCJjaG9pY2VzXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBhbmQgcmVtb3ZlIGFsbCB0aGUgSFRNTCBOb2RlXG4gICAgICovXG4gICAgY2xlYXIoKXtcbiAgICAgICAgaWYodGhpcy5ub2RlKXtcbiAgICAgICAgICAgIHRoaXMubm9kZS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gYnVpbGQgdGhlIGZvcm1cbiAgICAgKi9cbiAgICBidWlsZChub2RlLCBwYXJhbXM6UGFyYW1zLCBkZWxCdG4gPSBudWxsLCBjbGFzc2VzOnN0cmluZyA9IFwiY29sbGFwc2VcIil7XG4gICAgICAgIHRoaXMubm9kZSA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCIgOiBcInJvdyBwaXhpdW0tYmxvY2stYnVpbGRcIlxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBsZXQgaHIgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJoclwiLCB7XG4gICAgICAgIC8vICAgICBcImNsYXNzXCI6IFwicGl4aXVtLWhyIGNvbC1tZC0xMlwiXG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIC8vIGxldCBoZWFkZXJCb3ggPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAvLyAgICAgXCJpZFwiOiBcImhlYWRlcl9ib3hcIit0aGlzLmlkLFxuICAgICAgICAvLyAgICAgXCJjbGFzc1wiOiBcImNvbGxhcHNlXCJcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgbGV0IG5vZGVDb250ZW50ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICdjbGFzcyc6ICdjb2wtbWQtMTIgJytjbGFzc2VzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaGVhZGVyID0gQnVpbGRlci5hZGRCb3hIZWFkZXIodGhpcy5ub2RlLCB0aGlzLmlkLCBub2RlQ29udGVudCwgZGVsQnRuKTtcbiAgICAgICAgQnVpbGRlci5hZGRCdWlsZGVySW5wdXRUZXh0KHRoaXMuaGVhZGVyLCB0aGlzLmlkLCB0aGlzLnRleHQsIFwiVGV4dFwiLCAodmFsKSA9PiB7dGhpcy50ZXh0PXZhbDt9LCBcImNvbC1tZC0xMFwiICk7XG5cbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKG5vZGVDb250ZW50KTtcblxuICAgICAgICAvLyBDUkVBVEUgVEhFIExJU1QgRk9SIFRIRSBfX0RST1BET1dOX19cbiAgICAgICAgbGV0IGVudW1BcnJheSA9IE9iamVjdC5rZXlzKEJsb2NrVHlwZSkuZmlsdGVyKGE9PmEubWF0Y2goL15cXEQvKSkubWFwKG5hbWU9Pih7bmFtZSwgdmFsdWU6IEJsb2NrVHlwZVtuYW1lXSBhcyBudW1iZXJ9KSk7XG5cbiAgICAgICAgbGV0IG5ld0FycmF5ID0gW107XG4gICAgICAgIGlmKHBhcmFtc1tcImhpZGVRdWVzdGlvblR5cGVcIl0pe1xuICAgICAgICAgICAgZm9yKHZhciBpPTAgOyBpPGVudW1BcnJheS5sZW5ndGggOyBpKyspe1xuICAgICAgICAgICAgICAgIGxldCBrID0gZW51bUFycmF5W2ldWyduYW1lJ107XG4gICAgICAgICAgICAgICAgaWYoayl7XG4gICAgICAgICAgICAgICAgICAgIGlmKCFwYXJhbXNbXCJoaWRlUXVlc3Rpb25UeXBlXCJdW2tdKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0FycmF5LnB1c2goZW51bUFycmF5W2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhuZXdBcnJheSlcbiAgICAgICAgXG4gICAgICAgIC8vIGVudW1BcnJheS5tYXAoKGVsZW0pID0+IChcbiAgICAgICAgLy8gICAgIGlmKHBhcmFtc1tcInF1ZXN0aW9uVHlwZVwiXSAmJiBwYXJhbXNbXCJxdWVzdGlvblR5cGVcIl1bZWxlbVsnJ11dKVxuICAgICAgICAvLyApKTtcblxuICAgICAgICBsZXQgY3NzQ2xhc3M9XCJcIjtcbiAgICAgICAgaWYocGFyYW1zW1wiaGlkZVF1ZXN0aW9uVHlwZVwiXSl7XG4gICAgICAgICAgICBjc3NDbGFzcyA9IFwiaGlkZGVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgQnVpbGRlci5hZGRCdWlsZGVySW5wdXREcm9wZG93bihub2RlQ29udGVudCwgdGhpcy5pZCwgdGhpcy50eXBlLCBcIlR5cGVcIiwgKHZhbCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50eXBlPU51bWJlcih2YWwpO1xuICAgICAgICAgICAgdGhpcy5hbnN3ZXI9Jyc7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJTdWJFbGVtZW50QmxvY2soKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9LCBuZXdBcnJheSwgXCJjb2wtbWQtNCBcIitjc3NDbGFzcyApO1xuXG4gICAgICAgIC8vIC0tLS0gRmllbGQgZm9yIENob2ljZXMgYmxvY2tcbiAgICAgICAgbGV0IGJsa0Nob2ljZXNTdHlsZSA9IFwiXCI7XG4gICAgICAgIGlmKCh0aGlzLnR5cGUgIT09IEJsb2NrVHlwZS5SQURJTykgJiYgKHRoaXMudHlwZSAhPT0gQmxvY2tUeXBlLkNIRUNLQk9YKSl7XG4gICAgICAgICAgICBibGtDaG9pY2VzU3R5bGUgPSBcImRpc3BsYXk6bm9uZTtcIlxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsZXQgbm9kZUNob2ljZXMgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJpZFwiOiBcImNob2ljZXNfYmxvY2tfXCIrdGhpcy5pZCxcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJjb2wtbWQtMTIgY3VzdG9tX2Jsb2NrX3R5cGVcIixcbiAgICAgICAgICAgIFwic3R5bGVcIjogYmxrQ2hvaWNlc1N0eWxlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBsYWJUaXRsZSA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICBsYWJUaXRsZS5pbm5lckhUTUwgPSBcIkNob2ljZXMgOiBcIjtcbiAgICAgICAgbm9kZUNob2ljZXMuYXBwZW5kQ2hpbGQobGFiVGl0bGUpO1xuICAgICAgICBpZih0aGlzLmNob2ljZXMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICB0aGlzLmNob2ljZXMuZm9yRWFjaCggKGNoOkNob2ljZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNoLmJ1aWxkKG5vZGVDaG9pY2VzKTtcbiAgICAgICAgICAgICAgICAvLyBCVUlMRCBERUxFVEUgQk9MQ0sgQlROXG4gICAgICAgICAgICAgICAgbGV0IGRlbEJ0biA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XCJjbGFzc1wiOlwiZm9ybS1idWlsZGVyLWJ0biBidXR0b24tZGVsZXRlIGZvcm0tYnVpbGRlci1idG5cIiwgXCJ0eXBlXCI6XCJidXR0b25cIn0pO1xuICAgICAgICAgICAgICAgIGRlbEJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYSBmYS10aW1lc1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nOyAgXG4gICAgICAgICAgICAgICAgZGVsQnRuLm9uY2xpY2sgPSAoZXYgPT4ge1xuICAgICAgICAgICAgICAgICAgICBub2RlQ2hvaWNlcy5yZW1vdmVDaGlsZChjaC5ub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaG9pY2VzID0gdGhpcy5jaG9pY2VzLmZpbHRlcihmdW5jdGlvbihlbCkgeyByZXR1cm4gZWwuaWQgIT0gY2guaWQ7IH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNoLm5vZGUuYXBwZW5kQ2hpbGQoZGVsQnRuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQlVJTEQgQUREIEJPTENLIEJUTlxuICAgICAgICBsZXQgYWRkQ2hvaWNlQnV0dG9uID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XCJjbGFzc1wiOlwiYnRuIGJ0bi1zdWNjZXNzIGZvcm0tYnVpbGRlci1idG5cIiwgXCJ0eXBlXCI6XCJidXR0b25cIn0pOyAgXG4gICAgICAgIGFkZENob2ljZUJ1dHRvbi5pbm5lckhUTUwgPSAnKyc7ICBcbiAgICAgICAgYWRkQ2hvaWNlQnV0dG9uLm9uY2xpY2sgPSAoZXYpID0+IFxuICAgICAgICB7ICAgXG4gICAgICAgICAgICBsZXQgYnRuQ2hBZGQgPSA8SFRNTEVsZW1lbnQ+ZXYudGFyZ2V0O1xuICAgICAgICAgICAgLy8gQUREIE5FVyBCT0xDS1xuICAgICAgICAgICAgbGV0IGNoID0gbmV3IENob2ljZShudWxsKTtcbiAgICAgICAgICAgIHRoaXMuY2hvaWNlcy5wdXNoKGNoKTtcbiAgICAgICAgICAgIG5vZGVDaG9pY2VzLnJlbW92ZUNoaWxkKGJ0bkNoQWRkKTtcbiAgICAgICAgICAgIGNoLmJ1aWxkKG5vZGVDaG9pY2VzKTtcbiAgICAgICAgICAgIC8vIEJVSUxEIERFTEVURSBCT0xDSyBCVE5cbiAgICAgICAgICAgIGxldCBidG5DaERlbCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XCJjbGFzc1wiOlwiYnRuIGJ0bi1kYW5nZXIgZm9ybS1idWlsZGVyLWJ0blwiLCBcInR5cGVcIjpcImJ1dHRvblwifSk7XG4gICAgICAgICAgICBidG5DaERlbC5pbm5lclRleHQgPSAnLSc7ICBcbiAgICAgICAgICAgIGJ0bkNoRGVsLm9uY2xpY2sgPSAoZXYgPT4ge1xuICAgICAgICAgICAgICAgIG5vZGVDaG9pY2VzLnJlbW92ZUNoaWxkKGNoLm5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hvaWNlcyA9IHRoaXMuY2hvaWNlcy5maWx0ZXIoZnVuY3Rpb24oZWwpIHsgcmV0dXJuIGVsLmlkICE9IGNoLmlkOyB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2gubm9kZS5hcHBlbmRDaGlsZChidG5DaERlbCk7XG5cbiAgICAgICAgICAgIG5vZGVDaG9pY2VzLmFwcGVuZENoaWxkKGJ0bkNoQWRkKTtcbiAgICAgICAgfTsgIFxuICAgICAgICBub2RlQ2hvaWNlcy5hcHBlbmRDaGlsZChhZGRDaG9pY2VCdXR0b24pO1xuXG4gICAgICAgIG5vZGVDb250ZW50LmFwcGVuZENoaWxkKG5vZGVDaG9pY2VzKTtcbiAgICAgICAgLy8gLS0tLSBcblxuICAgICAgICAvLyAtLS0tIEZpZWxkIGZvciBTbGlkZXIgYmxvY2tcbiAgICAgICAgbGV0IGJsa1NsaWRlclN0eWxlID0gXCJcIjtcbiAgICAgICAgaWYodGhpcy50eXBlICE9PSBCbG9ja1R5cGUuU0xJREVSKXtcbiAgICAgICAgICAgIGJsa1NsaWRlclN0eWxlID0gXCJkaXNwbGF5Om5vbmU7XCJcbiAgICAgICAgfVxuICAgICAgICBsZXQgbm9kZVNsaWRlciA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBcImlkXCI6IFwic2xpZGVyX2Jsb2NrX1wiK3RoaXMuaWQsXG4gICAgICAgICAgICBcImNsYXNzXCI6IFwiY29sLW1kLTEyIGN1c3RvbV9ibG9ja190eXBlXCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IGJsa1NsaWRlclN0eWxlXG4gICAgICAgIH0pO1xuICAgICAgICBCdWlsZGVyLmFkZEJ1aWxkZXJJbnB1dFRleHQobm9kZVNsaWRlciwgdGhpcy5pZCwgdGhpcy5taW4sIFwiTWluXCIsICh2YWwpID0+IHt0aGlzLm1pbj12YWw7fSwgXCJjb2wtbWQtNFwiLCB0cnVlICk7XG4gICAgICAgIEJ1aWxkZXIuYWRkQnVpbGRlcklucHV0VGV4dChub2RlU2xpZGVyLCB0aGlzLmlkLCB0aGlzLm1heCwgXCJNYXhcIiwgKHZhbCkgPT4ge3RoaXMubWF4PXZhbDt9LCBcImNvbC1tZC00XCIsIHRydWUgKTtcbiAgICAgICAgQnVpbGRlci5hZGRCdWlsZGVySW5wdXRUZXh0KG5vZGVTbGlkZXIsIHRoaXMuaWQsIHRoaXMuc3RlcCwgXCJTdGVwXCIsICh2YWwpID0+IHt0aGlzLnN0ZXA9dmFsO30sIFwiY29sLW1kLTRcIiwgdHJ1ZSApO1xuICAgICAgICBub2RlQ29udGVudC5hcHBlbmRDaGlsZChub2RlU2xpZGVyKTtcbiAgICAgICAgLy8gLS0tLVxuXG4gICAgICAgIC8vIHRoaXMubm9kZS5hcHBlbmRDaGlsZChocik7XG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKTtcbiAgICB9XG5cbiAgICBcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gUnVuIHRoZSBmb3JtXG4gICAgICovXG4gICAgcnVuKG5vZGUpe1xuICAgICAgICAvLyBhbGVydChcIkNcIik7XG4gICAgICAgIGxldCB0aXRsZU5vZGUgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJwXCIpOyAvL2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICB0aXRsZU5vZGUuaW5uZXJIVE1MID0gdGhpcy50ZXh0O1xuICAgICAgICB0aGlzLm5vZGUgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS1ibG9jay1ydW4tcXVlc3Rpb25cIlxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKHRpdGxlTm9kZSk7XG5cbiAgICAgICAgc3dpdGNoKHRoaXMudHlwZSl7XG4gICAgICAgICAgICBjYXNlIEJsb2NrVHlwZS5SQURJTzpcbiAgICAgICAgICAgICAgICBCbG9ja1JhZGlvLnJ1bih0aGlzLm5vZGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEJsb2NrVHlwZS5DSEVDS0JPWDpcbiAgICAgICAgICAgICAgICBCbG9ja0NoZWNrYm94LnJ1bih0aGlzLm5vZGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEJsb2NrVHlwZS5GUkVFVEVYVDpcbiAgICAgICAgICAgICAgICBCbG9ja0ZyZWV0ZXh0LnJ1bih0aGlzLm5vZGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBCbG9ja1R5cGUuTE9OR1RFWFQ6XG4gICAgICAgICAgICAgICAgQmxvY2tMb25ndGV4dC5ydW4odGhpcy5ub2RlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBCbG9ja1R5cGUuTk9BTlNXRVI6XG4gICAgICAgICAgICAgICAgLy8gQmxvY2tOb2Fuc3dlci5ydW4odGhpcy5ub2RlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBCbG9ja1R5cGUuU0xJREVSOlxuICAgICAgICAgICAgICAgIEJsb2NrU2xpZGVyLnJ1bih0aGlzLm5vZGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEJsb2NrVHlwZS5UQUdTOlxuICAgICAgICAgICAgICAgIEJsb2NrVGFncy5ydW4odGhpcy5ub2RlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gbGV0IGhyID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaHJcIiwge1xuICAgICAgICAvLyAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS1oclwiXG4gICAgICAgIC8vIH0pO1xuICAgICAgICAvLyB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoaHIpO1xuXG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKTtcbiAgICB9XG5cblxuICAgIGRpc3BsYXkoKXtcbiAgICB9XG5cblxuXG4gICAgdHJpZ2dlclN1YkVsZW1lbnRCbG9jaygpe1xuICAgICAgICBsZXQgc2xpZGVyQmxvY2sgPSBudWxsO1xuICAgICAgICBpZihzbGlkZXJCbG9jayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2xpZGVyX2Jsb2NrX1wiK3RoaXMuaWQpKXtcbiAgICAgICAgICAgIGlmKHRoaXMudHlwZSA9PT0gQmxvY2tUeXBlLlNMSURFUil7XG4gICAgICAgICAgICAgICAgc2xpZGVyQmxvY2suc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHNsaWRlckJsb2NrLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBhbGVydChcIk5vZGUgU2lsZGVyIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjaG9pY2VCbG9jayA9IG51bGw7XG4gICAgICAgIGlmKGNob2ljZUJsb2NrID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaG9pY2VzX2Jsb2NrX1wiK3RoaXMuaWQpKXtcbiAgICAgICAgICAgIGlmKCh0aGlzLnR5cGUgPT09IEJsb2NrVHlwZS5SQURJTykgfHwgKHRoaXMudHlwZSA9PT0gQmxvY2tUeXBlLkNIRUNLQk9YKSl7XG4gICAgICAgICAgICAgICAgY2hvaWNlQmxvY2suc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGNob2ljZUJsb2NrLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBhbGVydChcIk5vZGUgQ2hvaWNlIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgY29tcGlsZUpzb24oKXtcbiAgICAgICAgbGV0IGFycjphbnlbXTtcbiAgICAgICAgYXJyID0gW107XG4gICAgICAgIHRoaXMuY2hvaWNlcy5mb3JFYWNoKCAoY2g6Q2hvaWNlKSA9PiB7XG4gICAgICAgICAgICBhcnIucHVzaChjaC5jb21waWxlSnNvbigpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuanNvbiA9IHtcbiAgICAgICAgICAgIFwidHlwZVwiOnRoaXMudHlwZSxcbiAgICAgICAgICAgIFwidGV4dFwiOnRoaXMudGV4dCxcbiAgICAgICAgICAgIFwiYW5zd2VyXCI6dGhpcy5hbnN3ZXIsXG4gICAgICAgICAgICBcIm1pblwiOnRoaXMubWluLFxuICAgICAgICAgICAgXCJtYXhcIjp0aGlzLm1heCxcbiAgICAgICAgICAgIFwic3RlcFwiOnRoaXMuc3RlcCxcbiAgICAgICAgICAgIFwiY2hvaWNlc1wiOiBhcnJcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5qc29uO1xuICAgIH1cbn0iLCJcbmV4cG9ydCBjbGFzcyBCdWlsZGVye1xuXG4gICAgLyoqXG4gICAgICogQnVpbGQgYW5kIHNldCBhbGwgdGhlIGF0dHJpYnV0ZSBvZiBhIEhUTUwgRWxlbWVudCBub2RlXG4gICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgdGhlIGlucHV0IHRvIGNyZWF0ZVxuICAgICAqIEBwYXJhbSBfcGFyYW1zIFRoZSBhdHRyaWJ1dGVzIGxpc3QgdG8gc2V0XG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUVsZW1lbnQodHlwZTpzdHJpbmcsIF9wYXJhbXM6YW55ID0gbnVsbCl7XG4gICAgICAgIGlmKCF0eXBlKXtcbiAgICAgICAgICAgIGFsZXJ0KFwiQ291bGQgbm90IGJ1aWxkIHRoZSBlbGVtZW50XCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICAgICAgICBpZihfcGFyYW1zKXtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBfcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gX3BhcmFtc1trZXldO1xuICAgICAgICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHdpbGwgc2V0IGFsbCBhdHRyaWJ1dGUgaW50byBhIHNwZWNpZmljIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gZWxlbSBFbGVtZW50IHRvIHNldCB0ZSBhdHRyaWJ1dGUgb2ZcbiAgICAgKiBAcGFyYW0gX3BhcmFtcyBUaGUgYXR0cmlidXRlcyBsaXN0IHRvIHNldFxuICAgICAqL1xuICAgIHN0YXRpYyBzZXRBdHRyaWJ1dGVzKGVsZW06SFRNTEVsZW1lbnQsIF9wYXJhbXM6YW55ID0gbnVsbCl7XG4gICAgICAgIGlmKF9wYXJhbXMpe1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIF9wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfcGFyYW1zW2tleV07XG4gICAgICAgICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHN0YXRpYyBhZGRCdWlsZGVySW5wdXRUZXh0KG5vZGUsIGlkLCB2YWx1ZSwgbGFiZWwsIGNhbGxiYWNrLCBjbGFzc2VzPVwiY29sLW1kLTEyXCIsIHNob3dMYWJlbCA9IGZhbHNlKXtcbiAgICAgICAgbGV0IGRpdiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicGl4aXVtLXJvdy1ibG9jayBcIitjbGFzc2VzXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgbGV0IGlucHV0ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS10ZXh0Ym94XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlLFxuICAgICAgICAgICAgXCJuYW1lXCI6IGxhYmVsK1wiX1wiK2lkLFxuICAgICAgICAgICAgXCJwbGFjZWhvbGRlclwiOiBsYWJlbFxuICAgICAgICB9KTtcbiAgICAgICAgaW5wdXQub25ibHVyID0gKGV2KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhldi50YXJnZXQpO1xuICAgICAgICAgICAgY2FsbGJhY2soKDxIVE1MSW5wdXRFbGVtZW50PmV2LnRhcmdldCkudmFsdWUpO1xuICAgICAgICB9OyBcblxuICAgICAgICBpZihzaG93TGFiZWwpe1xuICAgICAgICAgICAgbGV0IGxhYiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHtcbiAgICAgICAgICAgICAgICAnc3R5bGUnOiAnZmxvYXQ6bGVmdCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGFiLmlubmVySFRNTCA9IGxhYmVsK1wiOiBcIjtcbiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChsYWIpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICBub2RlLmFwcGVuZENoaWxkKGRpdik7XG4gICAgfVxuXG5cbiAgICBzdGF0aWMgYWRkQm94SGVhZGVyKG5vZGUsIGlkLCBzdWJFbGVtZW50LCBkZWxCdG4pe1xuICAgICAgICBsZXQgZGl2ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJjb2wtbWQtMTIgYmxvY2staGVhZGVyIGJsb2NrLWhlYWRlci1cIitpZCBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIHRoZSBkZWxldGUgYnV0dG9uIGluIHRoZSBoZWFkZXIgZGlyZWN0bHlcbiAgICAgICAgaWYoZGVsQnRuKXtcbiAgICAgICAgICAgIGRlbEJ0bi5jbGFzc05hbWUgKz0gXCIgZmxvYXQtcmlnaHRcIjtcbiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChkZWxCdG4pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGV5ZTEgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJpXCIsIHtcImNsYXNzXCI6XCJmYSBmYS1jYXJldC1sZWZ0IGZsb2F0LXJpZ2h0XCIsIFwiYXJpYS1oaWRkZW5cIjpcInRydWVcIn0pO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoZXllMSk7XG4gICAgICAgIGxldCBleWUyID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaVwiLCB7XCJjbGFzc1wiOlwiZmEgZmEtY2FyZXQtZG93biBmbG9hdC1yaWdodCBoaWRkZW5cIiwgXCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifSk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChleWUyKTtcblxuICAgICAgICBcbiAgICAgICAgXG5cblxuICAgICAgICBleWUxLm9uY2xpY2sgPSAoZXYpID0+IHtcbiAgICAgICAgICAgIHN1YkVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImNvbGxhcHNlXCIpO1xuICAgICAgICAgICAgZXllMS5jbGFzc0xpc3QudG9nZ2xlKFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgZXllMi5jbGFzc0xpc3QudG9nZ2xlKFwiaGlkZGVuXCIpO1xuICAgICAgICB9O1xuICAgICAgICBleWUyLm9uY2xpY2sgPSAoZXYpID0+IHtcbiAgICAgICAgICAgIHN1YkVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImNvbGxhcHNlXCIpO1xuICAgICAgICAgICAgZXllMS5jbGFzc0xpc3QudG9nZ2xlKFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgZXllMi5jbGFzc0xpc3QudG9nZ2xlKFwiaGlkZGVuXCIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFxuXG4gICAgICAgIC8vIGxldCBsYWIgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgLy8gbGFiLmlubmVySFRNTCA9IGxhYmVsO1xuICAgICAgICAvLyBkaXYuYXBwZW5kQ2hpbGQobGFiKTtcbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cblxuICAgIC8qXG48c2VsZWN0IG5hbWU9XCJjYXJzXCIgaWQ9XCJjYXJzXCI+XG4gIDxvcHRpb24gdmFsdWU9XCJ2b2x2b1wiPlZvbHZvPC9vcHRpb24+XG4gIDxvcHRpb24gdmFsdWU9XCJzYWFiXCI+U2FhYjwvb3B0aW9uPlxuICA8b3B0aW9uIHZhbHVlPVwibWVyY2VkZXNcIj5NZXJjZWRlczwvb3B0aW9uPlxuICA8b3B0aW9uIHZhbHVlPVwiYXVkaVwiPkF1ZGk8L29wdGlvbj5cbjwvc2VsZWN0PlxuICAgICovXG4gICAgc3RhdGljIGFkZEJ1aWxkZXJJbnB1dERyb3Bkb3duKG5vZGUsIGlkLCB2YWx1ZSwgbGFiZWwsIGNhbGxiYWNrLCBvcHRpb25zLCBjbGFzc2VzPVwiY29sLW1kLTEyXCIpe1xuICAgICAgICBsZXQgZGl2ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwaXhpdW0tcm93LWJsb2NrIFwiK2NsYXNzZXNcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBsYWIgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgbGFiLmlubmVySFRNTCA9IGxhYmVsK1wiOiBcIjtcbiAgICAgICAgbGV0IGlucHV0ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwaXhpdW0tZHJvcGRvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogdmFsdWUsXG4gICAgICAgICAgICBcIm5hbWVcIjogbGFiZWwrXCJfXCIraWQsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwiZGlzcGxheTpibG9ja1wiXG4gICAgICAgIH0pO1xuICAgICAgICBpbnB1dC5vbmNoYW5nZSA9IChldikgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2soKDxIVE1MSW5wdXRFbGVtZW50PmV2LnRhcmdldCkudmFsdWUpO1xuICAgICAgICB9OyBcblxuICAgICAgICBvcHRpb25zLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBsZXQgb3B0ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIsIHtcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6IGVsZW1lbnQudmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmKHZhbHVlPT09ZWxlbWVudC52YWx1ZSl7XG4gICAgICAgICAgICAgICAgQnVpbGRlci5zZXRBdHRyaWJ1dGVzKG9wdCwge1xuICAgICAgICAgICAgICAgICAgICBcInNlbGVjdGVkXCI6XCJzZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdC5pbm5lckhUTUwgPSBlbGVtZW50Lm5hbWU7XG4gICAgICAgICAgICBpbnB1dC5hcHBlbmRDaGlsZChvcHQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQobGFiKTtcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChkaXYpO1xuICAgIH1cbn0iLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIkxpYnJhcnlcIl0gPSByZXF1aXJlKFwiLSEvVXNlcnMvcmVtaXRhY2hlL1dvcmtzcGFjZS9mb3JtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcyEuL2Nob2ljZS50c1wiKTsiLCJcbmltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4uL2J1aWxkZXJcIjtcblxuZXhwb3J0IGNsYXNzIENob2ljZXtcbiAgICBsYWJlbDpzdHJpbmc7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgICBpZDpzdHJpbmc7XG4gICAganNvbjphbnk7XG4gICAgbm9kZTogSFRNTEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihfanNvbil7XG4gICAgICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNyk7XG5cbiAgICAgICAgaWYoX2pzb24pe1xuICAgICAgICAgICAgaWYoX2pzb25bXCJsYWJlbFwiXSl7XG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbCA9IF9qc29uW1wibGFiZWxcIl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKF9qc29uW1widmFsdWVcIl0pe1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBfanNvbltcInZhbHVlXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBidWlsZCB0aGUgZm9ybVxuICAgICAqL1xuICAgIGJ1aWxkKG5vZGUpe1xuICAgICAgICB0aGlzLm5vZGUgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS1yb3ctYmxvY2sgYmxvY2stY2hvaWNlcyBjb2wtbWQtMTJcIixcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIENSRUFURSBWQUxVRSBJTlBVVFxuICAgICAgICBsZXQgbGFiVmFsdWUgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7XCJmb3JcIjpcImlucHV0X1wiK3RoaXMudmFsdWUrXCJfXCIrdGhpcy5pZH0pO1xuICAgICAgICBsYWJWYWx1ZS5pbm5lckhUTUwgPSBcIlZhbHVlIDogXCI7XG4gICAgICAgIGxldCBpbnB1dFZhbHVlID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS10ZXh0Ym94XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICh0aGlzLnZhbHVlKSA/IHRoaXMudmFsdWUgOiAnJyxcbiAgICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjogJ1ZhbHVlJyxcbiAgICAgICAgICAgIFwiaWRcIjogXCJpbnB1dF9cIit0aGlzLnZhbHVlK1wiX1wiK3RoaXMuaWRcbiAgICAgICAgfSk7XG4gICAgICAgIGlucHV0VmFsdWUub25ibHVyID0gKGV2KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhldi50YXJnZXQpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZT0oPEhUTUxJbnB1dEVsZW1lbnQ+ZXYudGFyZ2V0KS52YWx1ZTtcbiAgICAgICAgfTsgXG5cbiAgICAgICAgLy8gQ1JFQVRFIExBQkVMIElOUFVUXG4gICAgICAgIGxldCBsYWJMYWJlbCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHtcImZvclwiOlwiaW5wdXRfXCIrdGhpcy5sYWJlbCtcIl9cIit0aGlzLmlkLCBcInN0eWxlXCI6XCJtaW4td2lkdGg6IGF1dG87XCJ9KTtcbiAgICAgICAgbGFiTGFiZWwuaW5uZXJIVE1MID0gXCJMYWJlbCA6IFwiO1xuICAgICAgICBsZXQgaW5wdXRMYWJlbCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwaXhpdW0tdGV4dGJveFwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAodGhpcy5sYWJlbCkgPyB0aGlzLmxhYmVsIDogJycsXG4gICAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6ICdMYWJlbCcsXG4gICAgICAgICAgICBcImlkXCI6XCJpbnB1dF9cIit0aGlzLmxhYmVsK1wiX1wiK3RoaXMuaWRcbiAgICAgICAgfSk7XG4gICAgICAgIGlucHV0TGFiZWwub25ibHVyID0gKGV2KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhldi50YXJnZXQpO1xuICAgICAgICAgICAgdGhpcy5sYWJlbD0oPEhUTUxJbnB1dEVsZW1lbnQ+ZXYudGFyZ2V0KS52YWx1ZTtcbiAgICAgICAgfTsgXG5cbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGxhYlZhbHVlKTtcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGlucHV0VmFsdWUpO1xuICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQobGFiTGFiZWwpO1xuICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoaW5wdXRMYWJlbCk7XG5cbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpO1xuICAgIH1cblxuICAgIGNvbXBpbGVKc29uKCl7XG4gICAgICAgIHRoaXMuanNvbiA9IHtcbiAgICAgICAgICAgIFwibGFiZWxcIjp0aGlzLmxhYmVsLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOnRoaXMudmFsdWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5qc29uO1xuICAgIH1cbn0iLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIkxpYnJhcnlcIl0gPSByZXF1aXJlKFwiLSEvVXNlcnMvcmVtaXRhY2hlL1dvcmtzcGFjZS9mb3JtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcyEuL2Jsb2NrU2xpZGVyLnRzXCIpOyIsImltcG9ydCB7QmxvY2t9IGZyb20gXCIuL2Jsb2NrXCI7XG5pbXBvcnQge0J1aWxkZXJ9IGZyb20gXCIuLi9idWlsZGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBCbG9ja1NsaWRlcntcblxuICAgIHN0YXRpYyBydW4obm9kZSwgYmxvY2s6QmxvY2spe1xuICAgICAgICBsZXQgaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaG9sZGVyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZWxlbWVudC1mb3JtLWNvbnRhaW5lclwiKTtcbiAgICAgICAgbGV0IGZpZWxkID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cbiAgICAgICAgbGV0IG1pbiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOlwiX2xlZnRcIlxuICAgICAgICB9KTtcbiAgICAgICAgbWluLmlubmVySFRNTCA9IChibG9jay5taW4pID8gYmxvY2subWluIDogJzAnO1xuXG4gICAgICAgIGxldCBtYXggPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjpcIl9yaWdodFwiXG4gICAgICAgIH0pOztcbiAgICAgICAgbWF4LmlubmVySFRNTCA9IChibG9jay5tYXgpID8gYmxvY2subWF4IDogJzEwMCc7XG4gICAgICAgIFxuICAgICAgICBsZXQgZGVmYXVsdFZhbHVlID0gKGJsb2NrLmFuc3dlcikgPyBibG9jay5hbnN3ZXIgOiAoKGJsb2NrLm1heCAmJiBibG9jay5taW4pID8gTWF0aC5yb3VuZCgoTnVtYmVyKGJsb2NrLm1heCkrIE51bWJlcihibG9jay5taW4pKS8yKSA6IDUwKTtcbiAgICAgICAgLy8gPG91dHB1dCBmb3I9XCJmb29cIiBvbmZvcm1pbnB1dD1cInZhbHVlID0gZm9vLnZhbHVlQXNOdW1iZXI7XCI+PC9vdXRwdXQ+XG5cbiAgICAgICAgLy9Bc3NpZ24gZGlmZmVyZW50IGF0dHJpYnV0ZXMgdG8gdGhlIGVsZW1lbnQuIFxuICAgICAgICAvLyBjb25zb2xlLmxvZygnYmxvY2suYW5zd2VyJyk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJsb2NrLmFuc3dlcik7XG4gICAgICAgIEJ1aWxkZXIuc2V0QXR0cmlidXRlcyhmaWVsZCwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS1zbGlkZXJcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInJhbmdlXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgIFwibWluXCI6IChibG9jay5taW4pID8gYmxvY2subWluIDogMCxcbiAgICAgICAgICAgIFwibWF4XCI6IChibG9jay5tYXgpID8gYmxvY2subWF4IDogMTAwLFxuICAgICAgICAgICAgXCJpZFwiOiBcImlucHV0cmFuZ2VfXCIrYmxvY2suaWRcbiAgICAgICAgfSk7XG4gICAgICAgIGlmKGJsb2NrLnN0ZXApe1xuICAgICAgICAgICAgZmllbGQuc2V0QXR0cmlidXRlKFwic3RlcFwiLCBibG9jay5zdGVwKTtcbiAgICAgICAgfVxuICAgICAgICBmaWVsZC5vbmNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGJsb2NrLmFuc3dlciA9IHBhcnNlRmxvYXQoKDxIVE1MSW5wdXRFbGVtZW50PmZpZWxkKS52YWx1ZSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhibG9jay5hbnN3ZXIpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdXRwdXRfXCIrYmxvY2suaWQpLmlubmVySFRNTCA9IGJsb2NrLmFuc3dlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpbnB1dERpdiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaW5wdXREaXYuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJwaXhpdW0tYmxvY2stc2xpZGVyXCIpO1xuICAgICAgICBsZXQgb3V0cHV0ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwib3V0cHV0XCIsIHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJvdXRwdXRfXCIrYmxvY2suaWRcbiAgICAgICAgfSk7XG4gICAgICAgIG91dHB1dC5pbm5lckhUTUwgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIGJsb2NrLmFuc3dlciA9IG91dHB1dC5pbm5lckhUTUw7XG4gICAgICAgIFxuICAgICAgICBpbnB1dERpdi5hcHBlbmRDaGlsZChvdXRwdXQpO1xuICAgICAgICBpbnB1dERpdi5hcHBlbmRDaGlsZChmaWVsZCk7XG4gICAgICAgIGlucHV0RGl2LmFwcGVuZENoaWxkKG1pbik7XG4gICAgICAgIGlucHV0RGl2LmFwcGVuZENoaWxkKG1heCk7IFxuICAgICAgICBob2xkZXIuYXBwZW5kQ2hpbGQoaW5wdXREaXYpO1xuXG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoaG9sZGVyKTtcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJMaWJyYXJ5XCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3JlbWl0YWNoZS9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9ibG9ja0ZyZWV0ZXh0LnRzXCIpOyIsImltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4uL2J1aWxkZXJcIjtcblxuZXhwb3J0IGNsYXNzIEJsb2NrRnJlZXRleHR7XG5cbiAgICBzdGF0aWMgcnVuKG5vZGUsIGJsb2NrKXtcbiAgICAgICAgXG4gICAgICAgIGxldCBob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBob2xkZXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJlbGVtZW50LWZvcm0tY29udGFpbmVyXCIpO1xuXG4gICAgICAgIGxldCBmaWVsZCA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXG4gICAgICAgIC8vQXNzaWduIGRpZmZlcmVudCBhdHRyaWJ1dGVzIHRvIHRoZSBlbGVtZW50LiBcbiAgICAgICAgQnVpbGRlci5zZXRBdHRyaWJ1dGVzKGZpZWxkLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicGl4aXVtLXRleHRib3hcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogYmxvY2suYW5zd2VyLFxuICAgICAgICAgICAgXCJpZFwiOiBcImlucHV0ZnJlZXRleHRfXCIrYmxvY2suaWRcbiAgICAgICAgfSk7IFxuICAgICAgICBmaWVsZC5vbmJsdXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBibG9jay5hbnN3ZXIgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZmllbGQpLnZhbHVlO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYmxvY2suYW5zd2VyKTtcbiAgICAgICAgfTsgXG4gICAgICAgIFxuICAgICAgICBob2xkZXIuYXBwZW5kQ2hpbGQoZmllbGQpOyBcbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChob2xkZXIpO1xuICAgIH1cbn0iLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIkxpYnJhcnlcIl0gPSByZXF1aXJlKFwiLSEvVXNlcnMvcmVtaXRhY2hlL1dvcmtzcGFjZS9mb3JtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcyEuL2Jsb2NrUmFkaW8udHNcIik7IiwiaW1wb3J0IHtCdWlsZGVyfSBmcm9tIFwiLi4vYnVpbGRlclwiO1xuXG5leHBvcnQgY2xhc3MgQmxvY2tSYWRpbyB7XG5cbiAgICBzdGF0aWMgcnVuKG5vZGUsIGJsb2NrKXtcbiAgICAgICAgbGV0IGhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGhvbGRlci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImVsZW1lbnQtZm9ybS1jb250YWluZXJcIik7XG5cbiAgICAgICAgYmxvY2suY2hvaWNlcy5mb3JFYWNoKCAoY2hvaWNlKSA9PiB7XG4gICAgICAgICAgICBsZXQgZiAgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmFkaW9cIixcbiAgICAgICAgICAgICAgICBcImlkXCI6IFwiaW5wdXRyYWRpb19cIitibG9jay5pZCxcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6ICBjaG9pY2UudmFsdWUrXCJcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJuYW1lX1wiK2Jsb2NrLmlkXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGxhYmVsID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSBjaG9pY2UubGFiZWw7XG5cbiAgICAgICAgICAgIGxldCBfZGl2ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgX2Rpdi5hcHBlbmRDaGlsZChmKTtcbiAgICAgICAgICAgIF9kaXYuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgICAgICAgaG9sZGVyLmFwcGVuZENoaWxkKF9kaXYpO1xuXG4gICAgICAgICAgICBmLm9uY2xpY2sgPSAoZXYpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhldi50YXJnZXQpO1xuICAgICAgICAgICAgICAgIGJsb2NrLmFuc3dlciA9ICg8SFRNTElucHV0RWxlbWVudD5ldi50YXJnZXQpLnZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGJsb2NrLmFuc3dlcik7XG4gICAgICAgICAgICB9OyBcbiAgICAgICAgfSk7XG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoaG9sZGVyKTtcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJMaWJyYXJ5XCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3JlbWl0YWNoZS9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9ibG9ja0NoZWNrYm94LnRzXCIpOyIsImltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4uL2J1aWxkZXJcIjtcblxuZXhwb3J0IGNsYXNzIEJsb2NrQ2hlY2tib3gge1xuXG4gICAgc3RhdGljIHJ1bihub2RlLCBibG9jayl7XG4gICAgICAgIGxldCBob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBob2xkZXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJlbGVtZW50LWZvcm0tY29udGFpbmVyXCIpO1xuXG4gICAgICAgIGJsb2NrLmNob2ljZXMuZm9yRWFjaCggKGNob2ljZSkgPT4ge1xuXG4gICAgICAgICAgICBsZXQgZiAgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogIGJsb2NrLmlkLFxuICAgICAgICAgICAgICAgIFwidmFsdWVcIjogIGNob2ljZS52YWx1ZStcIlwiLFxuICAgICAgICAgICAgICAgIFwiaWRcIjogIGNob2ljZS52YWx1ZStcIlwiLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vUHJlc2VsZWN0IGFuc3dlcnMgaWYgc2V0XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrLmFuc3dlci5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgaWYoKGNob2ljZS52YWx1ZStcIlwiKT09PWJsb2NrLmFuc3dlcltpXSl7XG4gICAgICAgICAgICAgICAgICAgIEJ1aWxkZXIuc2V0QXR0cmlidXRlcyhmLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNoZWNrZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgbGV0IGxhYmVsID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSBjaG9pY2UubGFiZWw7XG5cbiAgICAgICAgICAgIGxldCBfZGl2ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgX2Rpdi5hcHBlbmRDaGlsZChmKTtcbiAgICAgICAgICAgIF9kaXYuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgICAgICAgaG9sZGVyLmFwcGVuZENoaWxkKF9kaXYpO1xuXG4gICAgICAgICAgICBmLm9uY2xpY2sgPSAoZXYpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZEJveGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1jaGVja2JveF1bbmFtZT1cIicrYmxvY2suaWQrJ1wiXTpjaGVja2VkJyk7XG4gICAgICAgICAgICAgICAgbGV0IGlkcyA9IFtdO1xuICAgICAgICAgICAgICAgIGNoZWNrZWRCb3hlcy5mb3JFYWNoKCAoZWxlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZHMucHVzaCgoPEhUTUxJbnB1dEVsZW1lbnQ+ZWxlbSkudmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJsb2NrLmFuc3dlciA9IGlkcztcbiAgICAgICAgICAgIH07IFxuICAgICAgICB9KTtcbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChob2xkZXIpO1xuICAgIH1cbn0iLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIkxpYnJhcnlcIl0gPSByZXF1aXJlKFwiLSEvVXNlcnMvcmVtaXRhY2hlL1dvcmtzcGFjZS9mb3JtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcyEuL2Jsb2NrTG9uZ3RleHQudHNcIik7IiwiaW1wb3J0IHtCdWlsZGVyfSBmcm9tIFwiLi4vYnVpbGRlclwiO1xuXG5leHBvcnQgY2xhc3MgQmxvY2tMb25ndGV4dHtcblxuICAgIHN0YXRpYyBydW4obm9kZSwgYmxvY2spe1xuICAgICAgICBcbiAgICAgICAgbGV0IGhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGhvbGRlci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImVsZW1lbnQtZm9ybS1jb250YWluZXJcIik7XG4gICAgICAgIGxldCBmaWVsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcblxuICAgICAgICAvL0Fzc2lnbiBkaWZmZXJlbnQgYXR0cmlidXRlcyB0byB0aGUgZWxlbWVudC4gXG4gICAgICAgIEJ1aWxkZXIuc2V0QXR0cmlidXRlcyhmaWVsZCwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS10ZXh0Ym94XCIsXG4gICAgICAgICAgICBcInJvd3NcIjogNSxcbiAgICAgICAgICAgIFwidmFsdWVcIjogYmxvY2suYW5zd2VyLFxuICAgICAgICAgICAgXCJpZFwiOiBcImlucHV0bG9uZ3RleHRfXCIrYmxvY2suaWRcbiAgICAgICAgfSk7IFxuICAgICAgICAvLyBmaWVsZC5pbm5lckhUTUwgPSBibG9jay5hbnN3ZXI7XG4gICAgICAgIGZpZWxkLm9uYmx1ciA9ICgpID0+IHtcbiAgICAgICAgICAgIGJsb2NrLmFuc3dlciA9ICg8SFRNTFRleHRBcmVhRWxlbWVudD5maWVsZCkudmFsdWU7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhibG9jay5hbnN3ZXIpO1xuICAgICAgICB9OyBcbiAgICAgICAgaG9sZGVyLmFwcGVuZENoaWxkKGZpZWxkKTsgXG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoaG9sZGVyKTtcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJMaWJyYXJ5XCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3JlbWl0YWNoZS9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9CbG9ja1RhZ3MudHNcIik7IiwiaW1wb3J0IHtCdWlsZGVyfSBmcm9tIFwiLi4vYnVpbGRlclwiO1xuaW1wb3J0IHsgQmxvY2tUeXBlIH0gZnJvbSBcIi4vYmxvY2tcIjtcblxuZXhwb3J0IGNsYXNzIEJsb2NrVGFncyB7XG4gICAgLy8gPGRpdiBpZD1cImhvbGRlclwiPlxuICAgIC8vICAgICA8ZGl2IGlkPVwidGFnc1wiPlxuICAgIC8vICAgICAgICAgIDxzcGFuPlxuICAgIC8vICAgICAgICAgICAgICB2YWx1ZVxuICAgIC8vICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRhbmdlclxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIj4tPC9idXR0b24+XG4gICAgLy8gICAgICAgICAgPC9zcGFuPlxuICAgIC8vICAgICA8L2Rpdj5cbiAgICAvLyAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdmFsdWU9XCJcIiAvPlxuICAgIC8vIDwvZGl2PlxuICAgIFxuICAgIHN0YXRpYyBydW4obm9kZSwgYmxvY2spe1xuICAgICAgICAvLyBwYXJzZSBibG9jay5hbnN3ZXIgZm9yIGFycmF5IHRvIHN0cmluZ3MgXG4gICAgICAgIGlmKGJsb2NrLmFuc3dlci5sZW5ndGg9PTApe1xuICAgICAgICAgICAgYmxvY2suYW5zd2VyID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaG9sZGVyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZWxlbWVudC1mb3JtLWNvbnRhaW5lclwiKTtcbiAgICAgICAgaG9sZGVyLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4XCIpO1xuXG4gICAgICAgIC8vIGRpdiBhbnN3ZXJcbiAgICAgICAgbGV0IHRhZ3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBob2xkZXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ0YWdzXCIpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhibG9jay5hbnN3ZXIpO1xuXG4gICAgICAgIGlmKGJsb2NrLmFuc3dlcil7XG4gICAgICAgICAgICBibG9jay5hbnN3ZXIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYodmFsdWUgJiYgdmFsdWUubGVuZ3RoPjApe1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICAgICAgICAgIHRhZy5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInRhZy1cIitibG9jay5pZCtcIi1cIit2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRhZy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQlVJTEQgREVMRVRFIFRBR1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVsQnRuID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcImNsYXNzXCI6XCJidG4gYnRuLWRhbmdlclwiLCBcInR5cGVcIjpcImJ1dHRvblwifSk7XG4gICAgICAgICAgICAgICAgICAgIGRlbEJ0bi5pbm5lclRleHQgPSAnLSc7ICBcbiAgICAgICAgICAgICAgICAgICAgZGVsQnRuLm9uY2xpY2sgPSAoZXYgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFncy5yZW1vdmVDaGlsZCh0YWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2suYW5zd2VyID0gYmxvY2suYW5zd2VyLmZpbHRlcihmdW5jdGlvbihlbCkgeyByZXR1cm4gZWwrZGVsQnRuLm91dGVySFRNTCAhPSB0YWcuaW5uZXJIVE1MOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRhZy5hcHBlbmRDaGlsZChkZWxCdG4pOyBcbiAgICAgICAgICAgICAgICAgICAgdGFncy5hcHBlbmRDaGlsZCh0YWcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZpZWxkID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgJ2NsYXNzJzogXCJmZmZcIlxuICAgICAgICB9KTtcbiAgICAgICAgLy9Bc3NpZ24gZGlmZmVyZW50IGF0dHJpYnV0ZXMgdG8gdGhlIGVsZW1lbnQuIFxuXG4gICAgICAgIGZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlwcmVzc1wiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgQmxvY2tUYWdzLnByb2Nlc3NOZXdLZXl3b3JkKGV2ZW50LCBmaWVsZCwgYmxvY2ssIHRhZ3MpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmaWVsZC5vbmJsdXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBCbG9ja1RhZ3MucHJvY2Vzc05ld0tleXdvcmQoZXZlbnQsIGZpZWxkLCBibG9jaywgdGFncywgdHJ1ZSk7XG4gICAgICAgIH07IFxuXG4gICAgICAgIC8vIGFkZCBvbmJsdXIgc2F2ZVxuICAgICAgICAvLyBmaWVsZC5vbmJsdXIgPSAoKSA9PiB7XG4gICAgICAgIC8vICAgICBibG9jay5hbnN3ZXIucHVzaCgoPEhUTUxJbnB1dEVsZW1lbnQ+ZmllbGQpLnZhbHVlKTtcbiAgICAgICAgLy8gICAgICg8SFRNTElucHV0RWxlbWVudD5maWVsZCkudmFsdWUgPSBudWxsO1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coYmxvY2suYW5zd2VyKTtcbiAgICAgICAgLy8gfTsgXG5cbiAgICAgICAgaG9sZGVyLmFwcGVuZENoaWxkKHRhZ3MpOyBcbiAgICAgICAgaG9sZGVyLmFwcGVuZENoaWxkKGZpZWxkKTsgXG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoaG9sZGVyKTtcbiAgICB9XG5cblxuICAgIHN0YXRpYyBwcm9jZXNzTmV3S2V5d29yZChldmVudCwgZmllbGQsIGJsb2NrLCB0YWdzLCBmb3JjZVByb2Nlc3M6Ym9vbGVhbiA9IGZhbHNlKXtcbiAgICAgICAgLy8gXCJFbnRlclwiIGtleSBvbiB0aGUga2V5Ym9hcmRcbiAgICAgICAgaWYgKGZvcmNlUHJvY2VzcyB8fCBldmVudC5rZXkgPT09ICdFbnRlcicgfHwgZXZlbnQua2V5ID09PSAnLCcgfHwgZXZlbnQua2V5Q29kZSA9PSAxODgpIHsgLy8gfHwgZXZlbnQua2V5ID09PSAnICcgfHwgZXZlbnQuY29kZSA9PT0gJ1NwYWNlJyB8fCBldmVudC5rZXkgPT09ICdTcGFjZWJhcidcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZmllbGQpLnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgICAgICAgIGlmKHZhbHVlICYmIHZhbHVlLmxlbmd0aD4wKXtcbiAgICAgICAgICAgICAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZmllbGQpLnZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvL2FkZCB0byBhbnN3ZXJcbiAgICAgICAgICAgICAgICBibG9jay5hbnN3ZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy9hZGQgdG8gZGlzcGxheVxuICAgICAgICAgICAgICAgIGxldCB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgICAgICB0YWcuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgLy8gQlVJTEQgREVMRVRFIFRBR1xuICAgICAgICAgICAgICAgIGxldCBkZWxCdG4gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1wiY2xhc3NcIjpcImJ0blwiLCBcInR5cGVcIjpcImJ1dHRvblwifSk7XG4gICAgICAgICAgICAgICAgZGVsQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhIGZhLXRpbWVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPic7ICBcbiAgICAgICAgICAgICAgICBkZWxCdG4ub25jbGljayA9IChldiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRhZ3MucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suYW5zd2VyID0gYmxvY2suYW5zd2VyLmZpbHRlcihmdW5jdGlvbihlbCkgeyByZXR1cm4gZWwrZGVsQnRuLm91dGVySFRNTCAhPSB0YWcuaW5uZXJIVE1MOyB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0YWcuYXBwZW5kQ2hpbGQoZGVsQnRuKTsgXG4gICAgICAgICAgICAgICAgdGFncy5hcHBlbmRDaGlsZCh0YWcpOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9