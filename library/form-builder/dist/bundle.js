!function(e){var t={};function i(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(n,s,function(t){return e[t]}.bind(null,s));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="./dist/",i(i.s=2)}([
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(e){"object"==typeof window&&(i=window)}e.exports=i},
/*!********************************!*\
  !*** ./src/builder.ts-exposed ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./builder.ts */8)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!*****************************!*\
  !*** ./src/main.ts-exposed ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./main.ts */3)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!**********************************************!*\
  !*** ./node_modules/ts-loader!./src/main.ts ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PixiumForm=t.Params=void 0;const n=i(/*! ./section */4),s=i(/*! ./builder */1),l=i(/*! ./data.json */23);function o(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]==t)return!0;return!1}function r(e,t){for(var i=document.querySelectorAll(t),n=e.parentNode;n&&!o(i,n);)n=n.parentNode;return n}class a{}t.Params=a;t.PixiumForm=class{constructor(e){if(this.sections=[],this.currentNode=0,this.params=new a,e.div){if(this.div=e.div,this.mainNode=document.getElementById(this.div),console.log(this.mainNode),this.mainNode.setAttribute("class","container form-container drop-targets"),e.data?this.json=e.data:this.json=l,e.singleSection?this.params.singleSection=e.singleSection:this.params.singleSection=!1,e.hideEditQuestion?this.params.hideEditQuestion=e.hideEditQuestion:this.params.hideEditQuestion=!1,this.params.hideQuestionType=e.hideQuestionType,this.params.hideQuestionTypeSelection=e.hideQuestionTypeSelection,this.json&&this.json.sections){this.json.sections.forEach(e=>{let t=new n.Section(this.mainNode,e,this.params.singleSection?null:e=>this.moveSection(e));this.sections.push(t)})}else alert("Could not init the module."),console.log(this.json);e.debug?this.debug=e.debug:this.debug=!1,e.mode?this.mode=e.mode:this.mode="run","build"===this.mode?this.build():this.run()}else alert("Div not found. Cannot display the form")}getIndexFromSectionId(e){for(let t=0;t<this.sections.length;t++)if(this.sections[t].id==e)return t;return null}swapSections(e,t){console.log(this.sections);let i=this.sections[e];this.sections[e]=this.sections[t],this.sections[t]=i,console.log(this.sections)}dragStart(e){let t=r(e.target,".drop-target");e.dataTransfer.setData("text/plain",t.id),setTimeout(()=>{t||console.log(t)},0)}dragEnter(e){e.preventDefault();let t=r(e.target,".drop-target");t&&t.classList.add("drag-over")}dragOver(e){e.preventDefault();let t=r(e.target,".drop-target");t&&t.classList.add("drag-over")}dragLeave(e){let t=r(e.target,".drop-target");t&&t.classList.remove("drag-over")}dragEnd(e){let t=r(e.target,".drop-target");t&&t.children[0].classList.remove("hidden")}drop(e){e.target.classList.remove("drag-over");const t=e.dataTransfer.getData("text/plain");let i=document.getElementById(t),n=r(e.target,".drop-target");if(i&&i.classList.remove("hidden"),n.classList.remove("drag-over"),i.classList.remove("drag-over"),n){let e=this.getIndexFromSectionId(n.id),t=this.getIndexFromSectionId(i.id);e!=t&&(this.swapSections(e,t),l=i,o=(s=n).parentNode,a=l.parentNode,d=document.createElement("div"),c=document.createElement("div"),o.replaceChild(d,s),a.replaceChild(c,l),o.replaceChild(l,d),a.replaceChild(s,c))}else alert("not parent found");var s,l,o,a,d,c}build(){if(this.clear(),this.sections.forEach(e=>{if(e.build(this.mainNode,this.params),!this.params.singleSection&&!this.params.hideEditQuestion){let t=s.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button",id:"btn-delete-section-"+e.id});t.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',e.contentWrapper.appendChild(t),t.onclick=t=>{this.mainNode.removeChild(e.node),this.sections=this.sections.filter((function(t){return t.id!=e.id}))}}e.dragNode.ondragstart=e=>{this.dragStart(e)}}),document.querySelectorAll(".pixium-box").forEach(e=>{e.addEventListener("dragenter",this.dragEnter),e.addEventListener("dragover",this.dragOver),e.addEventListener("dragleave",this.dragLeave),e.addEventListener("dragend",this.dragEnd),e.addEventListener("drop",e=>this.drop(e))}),!this.params.singleSection){let t=s.Builder.createElement("button",{class:"btn btn-success form-builder-btn fullwidth",type:"button"});t.innerText="ADD SECTION",t.onclick=t=>{let i=t.target,l=new n.Section(this.mainNode,null,e=>this.moveSection(e));this.sections.push(l),this.mainNode.removeChild(i),this.debug&&this.mainNode.removeChild(e),l.build(this.mainNode,this.params);let o=s.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button",id:"btn-delete-section-"+l.id});o.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',o.onclick=e=>{this.mainNode.removeChild(l.node),this.sections=this.sections.filter((function(e){return e.id!=l.id}))},l.contentWrapper.appendChild(o),this.mainNode.appendChild(i),this.debug&&this.mainNode.appendChild(e)},this.mainNode.appendChild(t)}let e=s.Builder.createElement("button",{class:"btn btn-primary form-builder-btn",type:"button"});e.innerText="GO TO RUN",e.onclick=()=>{this.run()},this.debug&&this.mainNode.appendChild(e)}run(){this.clear(),this.sections.forEach(e=>{e.run(this.mainNode)}),this.saveBtn=s.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"submit",id:"form-builder-save-final-btn"}),this.saveBtn.innerText="Save",this.saveBtn.onclick=e=>{this.sections[this.currentNode].isCompleted()?this.compileJson():(e.preventDefault(),alert("Please complete the form"))},this.currentNode!=this.sections.length-1||this.params.singleSection||(document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="none",document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).after(this.saveBtn)),this.params.singleSection&&this.sections[this.currentNode].node.appendChild(this.saveBtn);let e=s.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button",id:"form-builder-save-btn"});e.innerText="SAVE",e.onclick=()=>{this.compileJson()},this.debug&&this.mainNode.appendChild(e);let t=s.Builder.createElement("button",{class:"btn btn-primary form-builder-btn",type:"button"});t.innerText="GO TO BUILD MODE",t.onclick=()=>{this.build()},this.debug&&this.mainNode.appendChild(t),this.display()}result(){}clear(){this.mainNode&&(this.mainNode.innerHTML="",this.sections.forEach(e=>{e&&e.clear()}),this.currentNode=0)}display(){this.currentNode>=0&&this.currentNode<this.sections.length&&this.sections[this.currentNode].show()}compileJson(){let e;e=[],this.sections.forEach(t=>{e.push(t.compileJson())});let t=JSON.stringify({sections:e});return console.log("finalOutput"),console.log(t),t}moveSection(e){e?this.currentNode>=0&&this.currentNode<this.sections.length-1?(this.sections[this.currentNode].hide(),this.currentNode++,this.sections[this.currentNode].show(),document.getElementById("btn-previous-section-"+this.sections[this.currentNode].id).style.display="inline-block",this.currentNode==this.sections.length-1?(document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="none",document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).after(this.saveBtn)):document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="inline-block"):alert("You already are on the next slide"):this.currentNode>=1&&this.currentNode<this.sections.length?(this.sections[this.currentNode].hide(),this.currentNode--,this.sections[this.currentNode].show(),document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="inline-block",0==this.currentNode&&(document.getElementById("btn-previous-section-"+this.sections[this.currentNode].id).style.display="none")):alert("You already are on the first slide")}}},
/*!********************************!*\
  !*** ./src/section.ts-exposed ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./section.ts */5)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************!*\
  !*** ./node_modules/ts-loader!./src/section.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Section=void 0;const n=i(/*! ./block/block */6),s=i(/*! ./builder */1);t.Section=class{constructor(e,t,i){this.parent=e,this.blocks=[],this.callback=i,this.title="",this.id=Math.random().toString(36).substring(7),t&&(t.title&&(this.title=t.title),t.blocks&&t.blocks.forEach(e=>{let t=new n.Block(e);this.blocks.push(t)}))}build(e,t){this.contentWrapper=s.Builder.createElement("div",{class:"pixium-box-content drop-target",id:this.id}),this.node=s.Builder.createElement("div",{class:"row pixium-box",id:"holder-"+this.id}),this.dragNode=s.Builder.createElement("i",{class:"fa fa-th drag-cursor",draggable:!0,id:"dragNod-"+this.id});let i=s.Builder.createElement("div",{class:"row pixium-block-build pixium-block-build-header"});if(s.Builder.addBuilderInputText(i,this.id,this.title,"Title Section",e=>{this.title=e},"col-md-12"),this.contentWrapper.appendChild(i),i.children[0].appendChild(this.dragNode),this.blocks.forEach(e=>{let i=s.Builder.createElement("button",{class:"form-builder-btn button-delete",type:"button",style:"display:block"});i.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',t.hideEditQuestion?i=s.Builder.createElement("span"):i.onclick=t=>{this.contentWrapper.removeChild(e.node),this.blocks=this.blocks.filter((function(t){return t.id!=e.id}))},e.build(this.contentWrapper,t,i)}),!t.hideEditQuestion){let e=s.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button"});e.innerHTML="+",e.onclick=e=>{let i,l=e.target,o=new n.Block(null);this.blocks.push(o),this.contentWrapper.removeChild(l),this.callback&&(i=document.getElementById("btn-delete-section-"+this.id),this.contentWrapper.removeChild(i)),o.build(this.contentWrapper,t,!1,"");let r=s.Builder.createElement("button",{class:"form-builder-btn button-delete float-right",type:"button",style:"display:block"});r.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',r.onclick=e=>{this.contentWrapper.removeChild(o.node),this.blocks=this.blocks.filter((function(e){return e.id!=o.id}))},o.header.insertBefore(r,o.header.firstChild),this.contentWrapper.appendChild(l),this.callback&&this.contentWrapper.appendChild(i)},this.contentWrapper.appendChild(e)}this.node.appendChild(this.contentWrapper),e.appendChild(this.node)}run(e){this.node=s.Builder.createElement("div",{class:"row pixium-box"});let t=document.createElement("h1");if(t.innerHTML=this.title,this.node.appendChild(t),this.blocks.forEach(e=>{e.run(this.node)}),console.log("node.singleSection"),console.log(this.callback),this.callback){let e=s.Builder.createElement("button",{class:"btn btn-primary form-builder-btn",id:"btn-previous-section-"+this.id,type:"button"});e.innerText="Previous",e.style.display="none",e.onclick=()=>{this.callback&&this.callback(!1)},this.node.appendChild(e);let t=s.Builder.createElement("button",{class:"btn btn-primary form-builder-btn",id:"btn-next-section-"+this.id,type:"button"});t.innerText="Next",t.onclick=()=>{this.isCompleted()?this.callback&&this.callback(!0):alert("Please complete the form...")},this.node.appendChild(t)}this.node.style.display="none",e.appendChild(this.node)}clear(){this.node&&(this.node.innerHTML=""),this.blocks.forEach(e=>{e.clear()})}getNode(){return alert(this.node),this.node}show(){this.node.style.display="block"}hide(){this.node.style.display="none"}isCompleted(){let e=!0;return this.blocks.forEach(t=>{console.log(t.answer),t&&0==t.answer.length&&t.type!==n.BlockType.NOANSWER&&(e=!1)}),e}compileJson(){let e;return e=[],this.blocks.forEach(t=>{e.push(t.compileJson())}),{title:this.title,blocks:e}}}},
/*!************************************!*\
  !*** ./src/block/block.ts-exposed ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./block.ts */7)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*****************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/block.ts ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Block=t.BlockType=void 0;const n=i(/*! ../builder */1),s=i(/*! ./choice */9),l=i(/*! ./blockSlider */11),o=i(/*! ./blockFreetext */13),r=i(/*! ./blockRadio */15),a=i(/*! ./blockCheckbox */17),d=i(/*! ./blockLongtext */19),c=i(/*! ./BlockTags */21);var u;!function(e){e[e.FREETEXT=1]="FREETEXT",e[e.RADIO=2]="RADIO",e[e.SLIDER=3]="SLIDER",e[e.CHECKBOX=4]="CHECKBOX",e[e.LONGTEXT=5]="LONGTEXT",e[e.NOANSWER=6]="NOANSWER",e[e.TAGS=7]="TAGS"}(u=t.BlockType||(t.BlockType={}));t.Block=class{constructor(e=null){this.json=e,this.text="",this.type=1,this.min="",this.max="",this.step="",this.answer="",this.choices=[],this.id=Math.random().toString(36).substring(7),e&&(e.text&&(this.text=e.text),e.type&&(this.type=e.type),this.answer="",e.answer&&(this.answer=e.answer),e.min&&(this.min=e.min),e.max&&(this.max=e.max),e.step&&(this.step=e.step),this.type!==u.RADIO&&this.type!==u.CHECKBOX||e.choices&&e.choices.forEach(e=>{let t=new s.Choice(e);this.choices.push(t)}))}clear(){this.node&&(this.node.innerHTML="")}build(e,t,i=null,l="collapse"){this.node=n.Builder.createElement("div",{class:"row pixium-block-build"});let o=n.Builder.createElement("div",{class:"col-md-12 "+l});this.header=n.Builder.addBoxHeader(this.node,this.id,o,i),n.Builder.addBuilderInputText(this.header,this.id,this.text,"Text",e=>{this.text=e},"col-md-10"),this.node.appendChild(o);let r=Object.keys(u).filter(e=>e.match(/^\D/)).map(e=>({name:e,value:u[e]})),a=[];if(t.hideQuestionType)for(var d=0;d<r.length;d++){let e=r[d].name;e&&(t.hideQuestionType[e]||a.push(r[d]))}else a=r;console.log(a);let c="";t.hideQuestionType&&(c="hidden"),n.Builder.addBuilderInputDropdown(o,this.id,this.type,"Type",e=>{this.type=Number(e),this.answer="",this.triggerSubElementBlock()},a,"col-md-4 "+c);let h="";this.type!==u.RADIO&&this.type!==u.CHECKBOX&&(h="display:none;");let p=n.Builder.createElement("div",{id:"choices_block_"+this.id,class:"col-md-12 custom_block_type",style:h}),m=n.Builder.createElement("label");m.innerHTML="Choices : ",p.appendChild(m),this.choices.length>0&&this.choices.forEach(e=>{e.build(p);let t=n.Builder.createElement("button",{class:"form-builder-btn button-delete form-builder-btn",type:"button"});t.innerHTML='<i class="fa fa-times" aria-hidden="true"></i>',t.onclick=t=>{p.removeChild(e.node),this.choices=this.choices.filter((function(t){return t.id!=e.id}))},e.node.appendChild(t)});let b=n.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button"});b.innerHTML="+",b.onclick=e=>{let t=e.target,i=new s.Choice(null);this.choices.push(i),p.removeChild(t),i.build(p);let l=n.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button"});l.innerText="-",l.onclick=e=>{p.removeChild(i.node),this.choices=this.choices.filter((function(e){return e.id!=i.id}))},i.node.appendChild(l),p.appendChild(t)},p.appendChild(b),o.appendChild(p);let f="";this.type!==u.SLIDER&&(f="display:none;");let g=n.Builder.createElement("div",{id:"slider_block_"+this.id,class:"col-md-12 custom_block_type",style:f});n.Builder.addBuilderInputText(g,this.id,this.min,"Min",e=>{this.min=e},"col-md-4",!0),n.Builder.addBuilderInputText(g,this.id,this.max,"Max",e=>{this.max=e},"col-md-4",!0),n.Builder.addBuilderInputText(g,this.id,this.step,"Step",e=>{this.step=e},"col-md-4",!0),o.appendChild(g),e.appendChild(this.node)}run(e){let t=n.Builder.createElement("p");switch(t.innerHTML=this.text,this.node=n.Builder.createElement("div",{class:"pixium-block-run-question"}),this.node.appendChild(t),this.type){case u.RADIO:r.BlockRadio.run(this.node,this);break;case u.CHECKBOX:a.BlockCheckbox.run(this.node,this);break;case u.FREETEXT:o.BlockFreetext.run(this.node,this);break;case u.LONGTEXT:d.BlockLongtext.run(this.node,this);break;case u.NOANSWER:break;case u.SLIDER:l.BlockSlider.run(this.node,this);break;case u.TAGS:c.BlockTags.run(this.node,this)}e.appendChild(this.node)}display(){}triggerSubElementBlock(){let e=null;(e=document.getElementById("slider_block_"+this.id))?this.type===u.SLIDER?e.style.display="block":e.style.display="none":alert("Node Silder not found");let t=null;(t=document.getElementById("choices_block_"+this.id))?this.type===u.RADIO||this.type===u.CHECKBOX?t.style.display="block":t.style.display="none":alert("Node Choice not found")}compileJson(){let e;return e=[],this.choices.forEach(t=>{e.push(t.compileJson())}),this.json={type:this.type,text:this.text,answer:this.answer,min:this.min,max:this.max,step:this.step,choices:e},this.json}}},
/*!*************************************************!*\
  !*** ./node_modules/ts-loader!./src/builder.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Builder=void 0;class n{static createElement(e,t=null){if(!e)return void alert("Could not build the element");let i=document.createElement(e);if(t)for(var n in t){var s=t[n];i.setAttribute(n,s)}return i}static setAttributes(e,t=null){if(t)for(var i in t){var n=t[i];e.setAttribute(i,n)}}static addBuilderInputText(e,t,i,s,l,o="col-md-12",r=!1){let a=n.createElement("div",{class:"pixium-row-block "+o}),d=n.createElement("input",{class:"pixium-textbox",type:"text",value:i,name:s+"_"+t,placeholder:s});if(d.onblur=e=>{console.log(e.target),l(e.target.value)},r){let e=n.createElement("label",{style:"float:left"});e.innerHTML=s+": ",a.appendChild(e)}a.appendChild(d),e.appendChild(a)}static addBoxHeader(e,t,i,s){let l=n.createElement("div",{class:"col-md-12 block-header block-header-"+t});s&&(s.className+=" float-right",l.appendChild(s));let o=n.createElement("i",{class:"fa fa-caret-left float-right","aria-hidden":"true"});l.appendChild(o);let r=n.createElement("i",{class:"fa fa-caret-down float-right hidden","aria-hidden":"true"});return l.appendChild(r),o.onclick=e=>{i.classList.toggle("collapse"),o.classList.toggle("hidden"),r.classList.toggle("hidden")},r.onclick=e=>{i.classList.toggle("collapse"),o.classList.toggle("hidden"),r.classList.toggle("hidden")},e.appendChild(l),l}static addBuilderInputDropdown(e,t,i,s,l,o,r="col-md-12"){let a=n.createElement("div",{class:"pixium-row-block "+r}),d=n.createElement("label");d.innerHTML=s+": ";let c=n.createElement("select",{class:"pixium-dropdown",value:i,name:s+"_"+t,style:"display:block"});c.onchange=e=>{l(e.target.value)},o.forEach(e=>{let t=n.createElement("option",{value:e.value});i===e.value&&n.setAttributes(t,{selected:"selected"}),t.innerHTML=e.name,c.appendChild(t)}),a.appendChild(d),a.appendChild(c),e.appendChild(a)}}t.Builder=n},
/*!*************************************!*\
  !*** ./src/block/choice.ts-exposed ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./choice.ts */10)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!******************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/choice.ts ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Choice=void 0;const n=i(/*! ../builder */1);t.Choice=class{constructor(e){this.id=Math.random().toString(36).substring(7),e&&(e.label&&(this.label=e.label),e.value&&(this.value=e.value))}build(e){this.node=n.Builder.createElement("div",{class:"pixium-row-block block-choices col-md-12"});let t=n.Builder.createElement("label",{for:"input_"+this.value+"_"+this.id});t.innerHTML="Value : ";let i=n.Builder.createElement("input",{class:"pixium-textbox",type:"text",value:this.value?this.value:"",placeholder:"Value",id:"input_"+this.value+"_"+this.id});i.onblur=e=>{console.log(e.target),this.value=e.target.value};let s=n.Builder.createElement("label",{for:"input_"+this.label+"_"+this.id,style:"min-width: auto;"});s.innerHTML="Label : ";let l=n.Builder.createElement("input",{class:"pixium-textbox",type:"text",value:this.label?this.label:"",placeholder:"Label",id:"input_"+this.label+"_"+this.id});l.onblur=e=>{console.log(e.target),this.label=e.target.value},this.node.appendChild(t),this.node.appendChild(i),this.node.appendChild(s),this.node.appendChild(l),e.appendChild(this.node)}compileJson(){return this.json={label:this.label,value:this.value},this.json}}},
/*!******************************************!*\
  !*** ./src/block/blockSlider.ts-exposed ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockSlider.ts */12)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!***********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockSlider.ts ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockSlider=void 0;const n=i(/*! ../builder */1);t.BlockSlider=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let s=n.Builder.createElement("input"),l=n.Builder.createElement("span",{class:"_left"});l.innerHTML=t.min?t.min:"0";let o=n.Builder.createElement("span",{class:"_right"});o.innerHTML=t.max?t.max:"100";let r=t.answer?t.answer:t.max&&t.min?Math.round((Number(t.max)+Number(t.min))/2):50;n.Builder.setAttributes(s,{class:"pixium-slider",type:"range",value:r,min:t.min?t.min:0,max:t.max?t.max:100,id:"inputrange_"+t.id}),t.step&&s.setAttribute("step",t.step),s.onchange=()=>{t.answer=parseFloat(s.value),console.log(t.answer),document.getElementById("output_"+t.id).innerHTML=t.answer};let a=n.Builder.createElement("div");a.setAttribute("class","pixium-block-slider");let d=n.Builder.createElement("output",{id:"output_"+t.id});d.innerHTML=r,t.answer=d.innerHTML,a.appendChild(d),a.appendChild(s),a.appendChild(l),a.appendChild(o),i.appendChild(a),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockFreetext.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockFreetext.ts */14)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockFreetext.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockFreetext=void 0;const n=i(/*! ../builder */1);t.BlockFreetext=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let s=n.Builder.createElement("input");n.Builder.setAttributes(s,{class:"pixium-textbox",type:"text",value:t.answer,id:"inputfreetext_"+t.id}),s.onblur=()=>{t.answer=s.value,console.log(t.answer)},i.appendChild(s),e.appendChild(i)}}},
/*!*****************************************!*\
  !*** ./src/block/blockRadio.ts-exposed ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockRadio.ts */16)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!**********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockRadio.ts ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockRadio=void 0;const n=i(/*! ../builder */1);t.BlockRadio=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container"),t.choices.forEach(e=>{let s=n.Builder.createElement("input",{type:"radio",id:"inputradio_"+t.id,value:e.value+"",name:"name_"+t.id}),l=n.Builder.createElement("label");l.innerHTML=e.label;let o=n.Builder.createElement("div");o.appendChild(s),o.appendChild(l),i.appendChild(o),s.onclick=e=>{console.log(e.target),t.answer=e.target.value,console.log(t.answer)}}),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockCheckbox.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockCheckbox.ts */18)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockCheckbox.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockCheckbox=void 0;const n=i(/*! ../builder */1);t.BlockCheckbox=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container"),t.choices.forEach(e=>{let s=n.Builder.createElement("input",{type:"checkbox",name:t.id,value:e.value+"",id:e.value+""});for(var l=0;l<t.answer.length;l++)e.value+""===t.answer[l]&&n.Builder.setAttributes(s,{checked:!0});let o=n.Builder.createElement("label");o.innerHTML=e.label;let r=n.Builder.createElement("div");r.appendChild(s),r.appendChild(o),i.appendChild(r),s.onclick=e=>{let i=document.querySelectorAll('input[type=checkbox][name="'+t.id+'"]:checked'),n=[];i.forEach(e=>{n.push(e.value)}),t.answer=n}}),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockLongtext.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockLongtext.ts */20)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockLongtext.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockLongtext=void 0;const n=i(/*! ../builder */1);t.BlockLongtext=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let s=document.createElement("textarea");n.Builder.setAttributes(s,{class:"pixium-textbox",rows:5,value:t.answer,id:"inputlongtext_"+t.id}),s.onblur=()=>{t.answer=s.value,console.log(t.answer)},i.appendChild(s),e.appendChild(i)}}},
/*!****************************************!*\
  !*** ./src/block/BlockTags.ts-exposed ***!
  \****************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./BlockTags.ts */22)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/BlockTags.ts ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockTags=void 0;const n=i(/*! ../builder */1);class s{static run(e,t){0==t.answer.length&&(t.answer=[]);let i=document.createElement("div");i.setAttribute("class","element-form-container"),i.setAttribute("style","display:flex");let l=document.createElement("div");i.setAttribute("class","tags"),t.answer&&t.answer.forEach(e=>{if(e&&e.length>0){let i=document.createElement("span");i.setAttribute("id","tag-"+t.id+"-"+e),i.innerHTML=e;let s=n.Builder.createElement("button",{class:"btn btn-danger",type:"button"});s.innerText="-",s.onclick=e=>{l.removeChild(i),t.answer=t.answer.filter((function(e){return e+s.outerHTML!=i.innerHTML}))},i.appendChild(s),l.appendChild(i)}});let o=n.Builder.createElement("input",{class:"fff"});o.addEventListener("keypress",(function(e){s.processNewKeyword(e,o,t,l)})),o.onblur=()=>{s.processNewKeyword(event,o,t,l,!0)},i.appendChild(l),i.appendChild(o),e.appendChild(i)}static processNewKeyword(e,t,i,s,l=!1){if(l||"Enter"===e.key||","===e.key||188==e.keyCode){e.preventDefault();let l=t.value.trim();if(console.log(l),l&&l.length>0){t.value=null,i.answer.push(l);let e=document.createElement("span");e.innerHTML=l;let o=n.Builder.createElement("button",{class:"btn",type:"button"});o.innerHTML='<i class="fa fa-times" aria-hidden="true"></i>',o.onclick=t=>{s.removeChild(e),i.answer=i.answer.filter((function(t){return t+o.outerHTML!=e.innerHTML}))},e.appendChild(o),s.appendChild(e)}}}}t.BlockTags=s},
/*!***********************!*\
  !*** ./src/data.json ***!
  \***********************/
/*! exports provided: sections, default */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e){e.exports=JSON.parse('{"sections":[{"title":"Section 1","blocks":[{"text":"BLABLA: <br> <br> How BLALBAty to delegate?","name":"q3","type":7},{"text":"Test Ludo?","name":"q3bis","type":3,"min":"1","max":"10","step":"1","label":"Delegation"}]},{"title":"Block Test Checkbox","blocks":[{"type":2,"name":"q2","text":"How do you feel about meeting new people?","choices":[{"value":1,"label":"Extraverted"},{"value":2,"label":"Introverted"}]},{"type":4,"name":"q22","text":"How do you feel about meeting new people?","choices":[{"value":1,"label":"I love meeting new people!"},{"value":2,"label":"Sometimes I like to meet new people, if I\'m in the right mood."}]}]},{"name":"block 1","blocks":[{"text":"DDDDELEGATION: <br> <br> How skilled do you feel today about your ability to delegate?","name":"q1","type":1,"group":1,"label":"Delegation"},{"text":"TEST: <br> <br> How sity to delegate?","name":"q2","type":1,"group":1,"label":"Delegation"}]}]}')}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,