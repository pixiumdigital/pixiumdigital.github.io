!function(e){var t={};function i(n){if(t[n])return t[n].exports;var l=t[n]={i:n,l:!1,exports:{}};return e[n].call(l.exports,l,l.exports,i),l.l=!0,l.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)i.d(n,l,function(t){return e[t]}.bind(null,l));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="./dist/",i(i.s=2)}([
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(e){"object"==typeof window&&(i=window)}e.exports=i},
/*!********************************!*\
  !*** ./src/builder.ts-exposed ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./builder.ts */8)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!*****************************!*\
  !*** ./src/main.ts-exposed ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./main.ts */3)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!**********************************************!*\
  !*** ./node_modules/ts-loader!./src/main.ts ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PixiumForm=void 0;const n=i(/*! ./section */4),l=i(/*! ./builder */1),s=i(/*! ./data.json */23);function o(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]==t)return!0;return!1}function r(e,t){for(var i=document.querySelectorAll(t),n=e.parentNode;n&&!o(i,n);)n=n.parentNode;return n}t.PixiumForm=class{constructor(e){if(this.sections=[],this.currentNode=0,e.div){if(this.div=e.div,this.mainNode=document.getElementById(this.div),console.log(this.mainNode),this.mainNode.setAttribute("class","container form-container drop-targets"),e.data?this.json=e.data:this.json=s,e.singleSection?this.singleSection=e.singleSection:this.singleSection=!1,this.json&&this.json.sections){this.json.sections.forEach(e=>{let t=new n.Section(this.mainNode,e,this.singleSection?null:e=>this.moveSection(e));this.sections.push(t)})}else alert("Could not init the module."),console.log(this.json);e.debug?this.debug=e.debug:this.debug=!1,e.mode?this.mode=e.mode:this.mode="run","build"===this.mode?this.build():this.run()}else alert("Div not found. Cannot display the form")}getIndexFromSectionId(e){for(let t=0;t<this.sections.length;t++)if(this.sections[t].id==e)return t;return null}swapSections(e,t){console.log(this.sections);let i=this.sections[e];this.sections[e]=this.sections[t],this.sections[t]=i,console.log(this.sections)}dragStart(e){e.dataTransfer.setData("text/plain",e.target.id),setTimeout(()=>{let t=r(e.target,".drop-target");t?t.children[0].classList.add("hidden"):alert("not found")},0)}dragEnter(e){e.preventDefault();let t=r(e.target,".drop-target");t&&t.classList.add("drag-over")}dragOver(e){e.preventDefault();let t=r(e.target,".drop-target");t&&t.classList.add("drag-over")}dragLeave(e){let t=r(e.target,".drop-target");t&&t.classList.remove("drag-over")}dragEnd(e){let t=r(e.target,".drop-target");t&&t.children[0].classList.remove("hidden")}drop(e){e.target.classList.remove("drag-over");const t=e.dataTransfer.getData("text/plain");let i=document.getElementById(t),n=r(e.target,".drop-target");if(i&&i.classList.remove("hidden"),n.classList.remove("drag-over"),i.classList.remove("drag-over"),n){let e=this.getIndexFromSectionId(n.children[0].id),t=this.getIndexFromSectionId(i.id);e!=t&&(this.swapSections(e,t),l=n.children[0],s=i,o=l.parentNode,d=s.parentNode,a=document.createElement("div"),c=document.createElement("div"),o.replaceChild(a,l),d.replaceChild(c,s),o.replaceChild(s,a),d.replaceChild(l,c))}else alert("not parent found");var l,s,o,d,a,c}build(){if(this.clear(),this.sections.forEach(e=>{if(e.build(this.mainNode),!this.singleSection){let t=l.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button",id:"btn-delete-section-"+e.id});t.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',e.contentWrapper.appendChild(t),t.onclick=t=>{this.mainNode.removeChild(e.node),this.sections=this.sections.filter((function(t){return t.id!=e.id}))}}e.contentWrapper.ondragstart=e=>{this.dragStart(e)}}),document.querySelectorAll(".pixium-box").forEach(e=>{e.addEventListener("dragenter",this.dragEnter),e.addEventListener("dragover",this.dragOver),e.addEventListener("dragleave",this.dragLeave),e.addEventListener("dragend",this.dragEnd),e.addEventListener("drop",e=>this.drop(e))}),!this.singleSection){let t=l.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button"});t.innerText="+",t.onclick=t=>{let i=t.target,s=new n.Section(this.mainNode,null,e=>this.moveSection(e));this.sections.push(s),this.mainNode.removeChild(i),this.debug&&this.mainNode.removeChild(e),s.build(this.mainNode);let o=l.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button",id:"btn-delete-section-"+s.id});o.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',o.onclick=e=>{this.mainNode.removeChild(s.node),this.sections=this.sections.filter((function(e){return e.id!=s.id}))},s.contentWrapper.appendChild(o),this.mainNode.appendChild(i),this.debug&&this.mainNode.appendChild(e)},this.mainNode.appendChild(t)}let e=l.Builder.createElement("button",{class:"btn btn-primary form-builder-btn",type:"button"});e.innerText="GO TO RUN",e.onclick=()=>{this.run()},this.debug&&this.mainNode.appendChild(e)}run(){this.clear(),this.sections.forEach(e=>{e.run(this.mainNode)}),this.saveBtn=l.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"submit",id:"form-builder-save-final-btn"}),this.saveBtn.innerText="Save",this.saveBtn.onclick=e=>{this.sections[this.currentNode].isCompleted()?this.compileJson():(e.preventDefault(),alert("Please complete the form"))},this.currentNode!=this.sections.length-1||this.singleSection||(document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="none",document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).after(this.saveBtn)),this.singleSection&&this.sections[this.currentNode].node.appendChild(this.saveBtn);let e=l.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button",id:"form-builder-save-btn"});e.innerText="SAVE",e.onclick=()=>{this.compileJson()},this.debug&&this.mainNode.appendChild(e);let t=l.Builder.createElement("button",{class:"btn btn-primary form-builder-btn",type:"button"});t.innerText="GO TO BUILD MODE",t.onclick=()=>{this.build()},this.debug&&this.mainNode.appendChild(t),this.display()}result(){}clear(){this.mainNode&&(this.mainNode.innerHTML="",this.sections.forEach(e=>{e.clear()}),this.currentNode=0)}display(){this.currentNode>=0&&this.currentNode<this.sections.length&&this.sections[this.currentNode].show()}compileJson(){let e;e=[],this.sections.forEach(t=>{e.push(t.compileJson())});let t=JSON.stringify({sections:e});return console.log("finalOutput"),console.log(t),t}moveSection(e){e?this.currentNode>=0&&this.currentNode<this.sections.length-1?(this.sections[this.currentNode].hide(),this.currentNode++,this.sections[this.currentNode].show(),document.getElementById("btn-previous-section-"+this.sections[this.currentNode].id).style.display="inline-block",this.currentNode==this.sections.length-1?(document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="none",document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).after(this.saveBtn)):document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="inline-block"):alert("You already are on the next slide"):this.currentNode>=1&&this.currentNode<this.sections.length?(this.sections[this.currentNode].hide(),this.currentNode--,this.sections[this.currentNode].show(),document.getElementById("btn-next-section-"+this.sections[this.currentNode].id).style.display="inline-block",0==this.currentNode&&(document.getElementById("btn-previous-section-"+this.sections[this.currentNode].id).style.display="none")):alert("You already are on the first slide")}}},
/*!********************************!*\
  !*** ./src/section.ts-exposed ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./section.ts */5)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************!*\
  !*** ./node_modules/ts-loader!./src/section.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Section=void 0;const n=i(/*! ./block/block */6),l=i(/*! ./builder */1);t.Section=class{constructor(e,t,i){this.parent=e,this.blocks=[],this.callback=i,this.title="",this.id=Math.random().toString(36).substring(7),t&&(t.title&&(this.title=t.title),t.blocks&&t.blocks.forEach(e=>{let t=new n.Block(e);this.blocks.push(t)}))}build(e){this.contentWrapper=l.Builder.createElement("div",{class:"pixium-box-content",draggable:!0,id:this.id}),this.node=l.Builder.createElement("div",{class:"row pixium-box drop-target",id:"holder-"+this.id});let t=l.Builder.createElement("div",{class:"row pixium-block-build pixium-block-build-header"});l.Builder.addBuilderInputText(t,this.id,this.title,"Title Section",e=>{this.title=e},"col-md-12"),this.contentWrapper.appendChild(t),this.blocks.forEach(e=>{let t=l.Builder.createElement("button",{class:"form-builder-btn button-delete",type:"button",style:"display:block"});t.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',e.build(this.contentWrapper,t),t.onclick=t=>{this.contentWrapper.removeChild(e.node),this.blocks=this.blocks.filter((function(t){return t.id!=e.id}))}});let i=l.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button"});i.innerHTML="+",i.onclick=e=>{let t,i=e.target,s=new n.Block(null);this.blocks.push(s),this.contentWrapper.removeChild(i),this.callback&&(t=document.getElementById("btn-delete-section-"+this.id),this.contentWrapper.removeChild(t)),s.build(this.contentWrapper,!1,"");let o=l.Builder.createElement("button",{class:"form-builder-btn button-delete float-right",type:"button",style:"display:block"});o.innerHTML='<i class="fa fa-trash" aria-hidden="true"></i>',o.onclick=e=>{this.contentWrapper.removeChild(s.node),this.blocks=this.blocks.filter((function(e){return e.id!=s.id}))},s.header.insertBefore(o,s.header.firstChild),this.contentWrapper.appendChild(i),this.callback&&this.contentWrapper.appendChild(t)},this.contentWrapper.appendChild(i),this.node.appendChild(this.contentWrapper),e.appendChild(this.node)}run(e){this.node=l.Builder.createElement("div",{class:"row pixium-box"});let t=document.createElement("h1");t.innerHTML=this.title;let i=document.createElement("hr");if(this.node.appendChild(t),this.node.appendChild(i),this.blocks.forEach(e=>{e.run(this.node)}),console.log("node.singleSection"),console.log(this.callback),this.callback){let e=l.Builder.createElement("button",{class:"btn btn-info form-builder-btn",id:"btn-previous-section-"+this.id,type:"button"});e.innerText="Previous",e.style.display="none",e.onclick=()=>{this.callback&&this.callback(!1)},this.node.appendChild(e);let t=l.Builder.createElement("button",{class:"btn btn-info form-builder-btn",id:"btn-next-section-"+this.id,type:"button"});t.innerText="Next",t.onclick=()=>{this.isCompleted()?this.callback&&this.callback(!0):alert("Please complete the form...")},this.node.appendChild(t)}this.node.style.display="none",e.appendChild(this.node)}clear(){this.node&&(this.node.innerHTML=""),this.blocks.forEach(e=>{e.clear()})}getNode(){return alert(this.node),this.node}show(){this.node.style.display="block"}hide(){this.node.style.display="none"}isCompleted(){let e=!0;return this.blocks.forEach(t=>{console.log(t.answer),t&&0==t.answer.length&&t.type!==n.BlockType.NOANSWER&&(e=!1)}),e}compileJson(){let e;return e=[],this.blocks.forEach(t=>{e.push(t.compileJson())}),{title:this.title,blocks:e}}}},
/*!************************************!*\
  !*** ./src/block/block.ts-exposed ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./block.ts */7)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*****************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/block.ts ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Block=t.BlockType=void 0;const n=i(/*! ../builder */1),l=i(/*! ./choice */9),s=i(/*! ./blockSlider */11),o=i(/*! ./blockFreetext */13),r=i(/*! ./blockRadio */15),d=i(/*! ./blockCheckbox */17),a=i(/*! ./blockLongtext */19),c=i(/*! ./BlockTags */21);var u;!function(e){e[e.FREETEXT=1]="FREETEXT",e[e.RADIO=2]="RADIO",e[e.SLIDER=3]="SLIDER",e[e.CHECKBOX=4]="CHECKBOX",e[e.LONGTEXT=5]="LONGTEXT",e[e.NOANSWER=6]="NOANSWER",e[e.TAGS=7]="TAGS"}(u=t.BlockType||(t.BlockType={}));t.Block=class{constructor(e=null){this.json=e,this.text="",this.type=1,this.min="",this.max="",this.step="",this.answer="",this.choices=[],this.id=Math.random().toString(36).substring(7),e&&(e.text&&(this.text=e.text),e.type&&(this.type=e.type),this.answer="",e.answer&&(this.answer=e.answer),e.min&&(this.min=e.min),e.max&&(this.max=e.max),e.step&&(this.step=e.step),this.type!==u.RADIO&&this.type!==u.CHECKBOX||e.choices&&e.choices.forEach(e=>{let t=new l.Choice(e);this.choices.push(t)}))}clear(){this.node&&(this.node.innerHTML="")}build(e,t=null,i="collapse"){this.node=n.Builder.createElement("div",{class:"row pixium-block-build"});let s=n.Builder.createElement("div",{class:"col-md-12 "+i});this.header=n.Builder.addBoxHeader(this.node,this.id,s,t),n.Builder.addBuilderInputText(this.header,this.id,this.text,"Text",e=>{this.text=e},"col-md-6"),this.node.appendChild(s);let o=Object.keys(u).filter(e=>e.match(/^\D/)).map(e=>({name:e,value:u[e]}));n.Builder.addBuilderInputDropdown(s,this.id,this.type,"Type",e=>{this.type=Number(e),this.answer="",this.triggerSubElementBlock()},o,"col-md-4");let r="";this.type!==u.RADIO&&this.type!==u.CHECKBOX&&(r="display:none;");let d=n.Builder.createElement("div",{id:"choices_block_"+this.id,class:"col-md-12 custom_block_type",style:r}),a=n.Builder.createElement("label");a.innerHTML="Choices : ",d.appendChild(a),this.choices.length>0&&this.choices.forEach(e=>{e.build(d);let t=n.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button"});t.innerText="-",t.onclick=t=>{d.removeChild(e.node),this.choices=this.choices.filter((function(t){return t.id!=e.id}))},e.node.appendChild(t)});let c=n.Builder.createElement("button",{class:"btn btn-success form-builder-btn",type:"button"});c.innerText="+",c.onclick=e=>{let t=e.target,i=new l.Choice(null);this.choices.push(i),d.removeChild(t),i.build(d);let s=n.Builder.createElement("button",{class:"btn btn-danger form-builder-btn",type:"button"});s.innerText="-",s.onclick=e=>{d.removeChild(i.node),this.choices=this.choices.filter((function(e){return e.id!=i.id}))},i.node.appendChild(s),d.appendChild(t)},d.appendChild(c),s.appendChild(d);let h="";this.type!==u.SLIDER&&(h="display:none;");let p=n.Builder.createElement("div",{id:"slider_block_"+this.id,class:"col-md-12 custom_block_type",style:h});n.Builder.addBuilderInputText(p,this.id,this.min,"Min",e=>{this.min=e},"col-md-4"),n.Builder.addBuilderInputText(p,this.id,this.max,"Max",e=>{this.max=e},"col-md-4"),n.Builder.addBuilderInputText(p,this.id,this.step,"Step",e=>{this.step=e},"col-md-4"),s.appendChild(p),e.appendChild(this.node)}run(e){let t=n.Builder.createElement("p");switch(t.innerHTML=this.text,this.node=n.Builder.createElement("div"),this.node.appendChild(t),this.type){case u.RADIO:r.BlockRadio.run(this.node,this);break;case u.CHECKBOX:d.BlockCheckbox.run(this.node,this);break;case u.FREETEXT:o.BlockFreetext.run(this.node,this);break;case u.LONGTEXT:a.BlockLongtext.run(this.node,this);break;case u.NOANSWER:break;case u.SLIDER:s.BlockSlider.run(this.node,this);break;case u.TAGS:c.BlockTags.run(this.node,this)}let i=n.Builder.createElement("hr",{class:"pixium-hr"});this.node.appendChild(i),e.appendChild(this.node)}display(){}triggerSubElementBlock(){let e=null;(e=document.getElementById("slider_block_"+this.id))?this.type===u.SLIDER?e.style.display="block":e.style.display="none":alert("Node Silder not found");let t=null;(t=document.getElementById("choices_block_"+this.id))?this.type===u.RADIO||this.type===u.CHECKBOX?t.style.display="block":t.style.display="none":alert("Node Choice not found")}compileJson(){let e;return e=[],this.choices.forEach(t=>{e.push(t.compileJson())}),this.json={type:this.type,text:this.text,answer:this.answer,min:this.min,max:this.max,step:this.step,choices:e},this.json}}},
/*!*************************************************!*\
  !*** ./node_modules/ts-loader!./src/builder.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Builder=void 0;class n{static createElement(e,t=null){if(!e)return void alert("Could not build the element");let i=document.createElement(e);if(t)for(var n in t){var l=t[n];i.setAttribute(n,l)}return i}static setAttributes(e,t=null){if(t)for(var i in t){var n=t[i];e.setAttribute(i,n)}}static addBuilderInputText(e,t,i,l,s,o="col-md-12"){let r=n.createElement("div",{class:"pixium-row-block "+o}),d=n.createElement("input",{class:"pixium-textbox",type:"text",value:i,name:l+"_"+t,placeholder:l});d.onblur=e=>{console.log(e.target),s(e.target.value)},r.appendChild(d),e.appendChild(r)}static addBoxHeader(e,t,i,l){let s=n.createElement("div",{class:"col-md-12 block-header block-header-"+t});l&&(l.className+=" float-right",s.appendChild(l));let o=n.createElement("i",{class:"fa fa-caret-left float-right","aria-hidden":"true"});s.appendChild(o);let r=n.createElement("i",{class:"fa fa-caret-down float-right hidden","aria-hidden":"true"});return s.appendChild(r),o.onclick=e=>{i.classList.toggle("collapse"),o.classList.toggle("hidden"),r.classList.toggle("hidden")},r.onclick=e=>{i.classList.toggle("collapse"),o.classList.toggle("hidden"),r.classList.toggle("hidden")},e.appendChild(s),s}static addBuilderInputDropdown(e,t,i,l,s,o,r="col-md-12"){let d=n.createElement("div",{class:"pixium-row-block "+r}),a=n.createElement("label");a.innerHTML=l+": ";let c=n.createElement("select",{class:"pixium-dropdown",value:i,name:l+"_"+t,style:"display:block"});c.onchange=e=>{s(e.target.value)},o.forEach(e=>{let t=n.createElement("option",{value:e.value});i===e.value&&n.setAttributes(t,{selected:"selected"}),t.innerHTML=e.name,c.appendChild(t)}),d.appendChild(a),d.appendChild(c),e.appendChild(d)}}t.Builder=n},
/*!*************************************!*\
  !*** ./src/block/choice.ts-exposed ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./choice.ts */10)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!******************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/choice.ts ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Choice=void 0;const n=i(/*! ../builder */1);t.Choice=class{constructor(e){this.id=Math.random().toString(36).substring(7),e&&(e.label&&(this.label=e.label),e.value&&(this.value=e.value))}build(e){this.node=n.Builder.createElement("div",{class:"pixium-row-block block-choices col-md-12"});let t=n.Builder.createElement("label",{for:"input_"+this.value+"_"+this.id});t.innerHTML="Value : ";let i=n.Builder.createElement("input",{class:"pixium-textbox",type:"text",value:this.value?this.value:"",placeholder:"Value",id:"input_"+this.value+"_"+this.id});i.onblur=e=>{console.log(e.target),this.value=e.target.value};let l=n.Builder.createElement("label",{for:"input_"+this.label+"_"+this.id,style:"min-width: auto;"});l.innerHTML="Label : ";let s=n.Builder.createElement("input",{class:"pixium-textbox",type:"text",value:this.label?this.label:"",placeholder:"Label",id:"input_"+this.label+"_"+this.id});s.onblur=e=>{console.log(e.target),this.label=e.target.value},this.node.appendChild(t),this.node.appendChild(i),this.node.appendChild(l),this.node.appendChild(s),e.appendChild(this.node)}compileJson(){return this.json={label:this.label,value:this.value},this.json}}},
/*!******************************************!*\
  !*** ./src/block/blockSlider.ts-exposed ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockSlider.ts */12)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!***********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockSlider.ts ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockSlider=void 0;const n=i(/*! ../builder */1);t.BlockSlider=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let l=n.Builder.createElement("input"),s=n.Builder.createElement("span",{class:"_left"});s.innerHTML=t.min?t.min:"0";let o=n.Builder.createElement("span",{class:"_right"});o.innerHTML=t.max?t.max:"100",n.Builder.setAttributes(l,{class:"pixium-slider",type:"range",value:t.answer?t.answer:t.max?Number(t.max)/2:50,min:t.min?t.min:0,max:t.max?t.max:100,id:"inputrange_"+t.id}),t.step&&l.setAttribute("step",t.step),l.onchange=()=>{t.answer=parseFloat(l.value),console.log(t.answer),document.getElementById("output_"+t.id).innerHTML=t.answer};let r=n.Builder.createElement("div");r.setAttribute("class","pixium-block-slider");let d=n.Builder.createElement("output",{id:"output_"+t.id});d.innerHTML=t.answer?t.answer:t.max?Number(t.max)/2:50,t.answer=d.innerHTML,r.appendChild(d),r.appendChild(l),r.appendChild(s),r.appendChild(o),i.appendChild(r),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockFreetext.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockFreetext.ts */14)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockFreetext.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockFreetext=void 0;const n=i(/*! ../builder */1);t.BlockFreetext=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let l=n.Builder.createElement("input");n.Builder.setAttributes(l,{class:"pixium-textbox",type:"text",value:t.answer,id:"inputfreetext_"+t.id}),l.onblur=()=>{t.answer=l.value,console.log(t.answer)},i.appendChild(l),e.appendChild(i)}}},
/*!*****************************************!*\
  !*** ./src/block/blockRadio.ts-exposed ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockRadio.ts */16)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!**********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockRadio.ts ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockRadio=void 0;const n=i(/*! ../builder */1);t.BlockRadio=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container"),t.choices.forEach(e=>{let l=n.Builder.createElement("input",{type:"radio",id:"inputradio_"+t.id,value:e.value+""}),s=n.Builder.createElement("label");s.innerHTML=e.label;let o=n.Builder.createElement("div");o.appendChild(l),o.appendChild(s),i.appendChild(o),l.onclick=e=>{console.log(e.target),t.answer=e.target.value,console.log(t.answer)}}),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockCheckbox.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockCheckbox.ts */18)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockCheckbox.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockCheckbox=void 0;const n=i(/*! ../builder */1);t.BlockCheckbox=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container"),t.choices.forEach(e=>{let l=n.Builder.createElement("input",{type:"checkbox",name:t.id,value:e.value+"",id:e.value+""});for(var s=0;s<t.answer.length;s++)e.value+""===t.answer[s]&&n.Builder.setAttributes(l,{checked:!0});let o=n.Builder.createElement("label");o.innerHTML=e.label;let r=n.Builder.createElement("div");r.appendChild(l),r.appendChild(o),i.appendChild(r),l.onclick=e=>{let i=document.querySelectorAll('input[type=checkbox][name="'+t.id+'"]:checked'),n=[];i.forEach(e=>{n.push(e.value)}),t.answer=n}}),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockLongtext.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockLongtext.ts */20)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockLongtext.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockLongtext=void 0;const n=i(/*! ../builder */1);t.BlockLongtext=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let l=document.createElement("textarea");n.Builder.setAttributes(l,{class:"pixium-textbox",rows:5,value:t.answer,id:"inputlongtext_"+t.id}),l.onblur=()=>{t.answer=l.value,console.log(t.answer)},i.appendChild(l),e.appendChild(i)}}},
/*!****************************************!*\
  !*** ./src/block/BlockTags.ts-exposed ***!
  \****************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./BlockTags.ts */22)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/BlockTags.ts ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockTags=void 0;const n=i(/*! ../builder */1);class l{static run(e,t){0==t.answer.length&&(t.answer=[]);let i=document.createElement("div");i.setAttribute("class","element-form-container"),i.setAttribute("style","display:flex");let s=document.createElement("div");i.setAttribute("class","tags"),t.answer&&t.answer.forEach(e=>{if(e&&e.length>0){let i=document.createElement("span");i.setAttribute("id","tag-"+t.id+"-"+e),i.innerHTML=e;let l=n.Builder.createElement("button",{class:"btn btn-danger",type:"button"});l.innerText="-",l.onclick=e=>{s.removeChild(i),t.answer=t.answer.filter((function(e){return e+l.outerHTML!=i.innerHTML}))},i.appendChild(l),s.appendChild(i)}});let o=n.Builder.createElement("input",{class:"fff"});o.addEventListener("keypress",(function(e){l.processNewKeyword(e,o,t,s)})),o.onblur=()=>{l.processNewKeyword(event,o,t,s,!0)},i.appendChild(s),i.appendChild(o),e.appendChild(i)}static processNewKeyword(e,t,i,l,s=!1){if(s||"Enter"===e.key||","===e.key||188==e.keyCode){e.preventDefault();let s=t.value.trim();if(console.log(s),s&&s.length>0){t.value=null,i.answer.push(s);let e=document.createElement("span");e.innerHTML=s;let o=n.Builder.createElement("button",{class:"btn",type:"button"});o.innerHTML='<i class="fa fa-times" aria-hidden="true"></i>',o.onclick=t=>{l.removeChild(e),i.answer=i.answer.filter((function(t){return t+o.outerHTML!=e.innerHTML}))},e.appendChild(o),l.appendChild(e)}}}}t.BlockTags=l},
/*!***********************!*\
  !*** ./src/data.json ***!
  \***********************/
/*! exports provided: sections, default */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e){e.exports=JSON.parse('{"sections":[{"title":"Section 1","blocks":[{"text":"BLABLA: <br> <br> How BLALBAty to delegate?","name":"q3","type":7},{"text":"Test Ludo?","name":"q3bis","type":3,"min":"1","max":"10","step":"1","label":"Delegation"}]},{"title":"Block Test Checkbox","blocks":[{"type":2,"name":"q2","text":"How do you feel about meeting new people?","choices":[{"value":1,"label":"Extraverted"},{"value":2,"label":"Introverted"}]},{"type":4,"name":"q22","text":"How do you feel about meeting new people?","choices":[{"value":1,"label":"I love meeting new people!"},{"value":2,"label":"Sometimes I like to meet new people, if I\'m in the right mood."}]}]},{"name":"block 1","blocks":[{"text":"DDDDELEGATION: <br> <br> How skilled do you feel today about your ability to delegate?","name":"q1","type":1,"group":1,"label":"Delegation"},{"text":"TEST: <br> <br> How sity to delegate?","name":"q2","type":1,"group":1,"label":"Delegation"}]}]}')}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,